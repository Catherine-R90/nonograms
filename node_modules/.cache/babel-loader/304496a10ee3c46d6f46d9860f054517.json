{"ast":null,"code":"const gameRows = props.gameRows; // ASSIGN COL ROWS\n\nconst nums = gameRows.map((row, index) => row[index].col);\nconst gameCols = [];\nnums.forEach(num => {\n  const col = [];\n  gameRows.map(row => {\n    const colNum = row.map(square => {\n      if (square.col === num) {\n        return col.push(square);\n      }\n    });\n    return colNum;\n  });\n  return gameCols.push(col);\n}); // GET NUMBERS FOR COLS\n\nconst colCount = gameCols.map(col => {\n  let continueColSequence = false;\n  let colCount = 0;\n  let colSequences = [];\n  col.map(square => {\n    if (square.value === false && continueColSequence === true) {\n      continueColSequence = false;\n      colSequences.push(colCount);\n      colCount = 0;\n    }\n\n    if (square.value === true) {\n      continueColSequence = true;\n      colCount++;\n    }\n\n    if (colSequences.length < gameCols.length) {\n      return colSequences.push(colCount);\n    } else {\n      return;\n    }\n  });\n  return colSequences;\n}); // MAP COL NUMBERS TO OBJECTS\n\nconst colNums = colCount.map(seq => {\n  let only1s = [];\n  let greaterThan1 = [];\n\n  const onlyOne = num => num === 1 || num === 0;\n\n  if (seq.every(onlyOne)) {\n    seq.map(num => {\n      if (num === 1) {\n        return only1s.push(num);\n      }\n    });\n  } else {\n    seq.map(num => {\n      return greaterThan1.push(num);\n    });\n  }\n\n  const oneTotals = only1s.join();\n  const greaterTotal = greaterThan1.length;\n  const rawNums = `${oneTotals} ${greaterTotal}`;\n  const nums = rawNums.replace('0', '');\n  const obj = gameCols.map((col, index) => {\n    return {\n      nums: nums,\n      col: col[index].row,\n      col: col[index].col\n    };\n  });\n  return obj;\n}); // GET NUMBERS FOR ROWS\n\nconst rowCount = gameRows.map(row => {\n  let continueSequence = false;\n  let count = 0;\n  let sequences = [];\n  row.map(square => {\n    if (square.value === false && continueSequence === true) {\n      continueSequence = false;\n      sequences.push(count);\n      count = 0;\n    }\n\n    if (square.value === true) {\n      continueSequence = true;\n      count++;\n    }\n\n    return sequences.push(count);\n  });\n  return sequences;\n}); // MAP ROW NUMBERS TO OBJECTS\n\nconst rowNums = rowCount.map(seq => {\n  let only1s = [];\n  let greaterThan1 = [];\n\n  const onlyOne = num => num === 1 || num === 0;\n\n  if (seq.every(onlyOne)) {\n    seq.map(num => {\n      if (num === 1) {\n        return only1s.push(num);\n      }\n    });\n  } else {\n    seq.map(num => {\n      return greaterThan1.push(num);\n    });\n  }\n\n  const oneTotals = only1s.join();\n  const greaterTotal = greaterThan1.length;\n  const rawNums = `${oneTotals} ${greaterTotal}`;\n  const nums = rawNums.replace('0', '');\n  const obj = gameRows.map((row, index) => {\n    return {\n      nums: nums,\n      row: row[index].row,\n      col: row[index].col\n    };\n  });\n  return obj;\n});","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/ColAndRowHelpers.js"],"names":["gameRows","props","nums","map","row","index","col","gameCols","forEach","num","colNum","square","push","colCount","continueColSequence","colSequences","value","length","colNums","seq","only1s","greaterThan1","onlyOne","every","oneTotals","join","greaterTotal","rawNums","replace","obj","rowCount","continueSequence","count","sequences","rowNums"],"mappings":"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","sourcesContent":["const gameRows = props.gameRows;\n\n// ASSIGN COL ROWS\nconst nums = gameRows.map((row, index) => row[index].col);\n\nconst gameCols = [];\nnums.forEach(num=>{\n    const col = [];\n    gameRows.map(row=>{\n        const colNum = row.map(square=>{\n            if(square.col === num) {\n                return col.push(square);\n            }\n        });\n        return colNum;\n    })\n    return gameCols.push(col);\n});\n\n// GET NUMBERS FOR COLS\nconst colCount = gameCols.map(col=>{\n    let continueColSequence = false;\n    let colCount = 0;\n    let colSequences = []\n    col.map(square=>{\n        if(square.value === false && continueColSequence === true) {\n            continueColSequence = false;\n            colSequences.push(colCount);\n            colCount = 0;\n        }\n        if(square.value === true) {\n            continueColSequence = true;\n            colCount++\n        }\n        if(colSequences.length < gameCols.length) {\n            return colSequences.push(colCount);\n        } else {\n            return;\n        }\n    });\n    return colSequences;\n})\n\n// MAP COL NUMBERS TO OBJECTS\nconst colNums = colCount.map(seq=> {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = (num) => num === 1 || num === 0;\n\n    if(seq.every(onlyOne)) {\n        seq.map(num =>{\n            if(num === 1) {\n                return only1s.push(num);\n            }\n        })\n    } else {\n        seq.map(num => {\n            return greaterThan1.push(num);\n        })    \n    }\n    \n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    \n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n\n    const obj = gameCols.map((col, index)=>{\n        return {nums:nums, col:col[index].row, col:col[index].col };\n    })\n\n    return obj;\n});\n\n// GET NUMBERS FOR ROWS\nconst rowCount = gameRows.map(row=>{\n    let continueSequence = false;\n    let count = 0;\n    let sequences = []\n    row.map(square=>{\n        if(square.value === false && continueSequence === true) {\n            continueSequence = false;\n            sequences.push(count);\n            count = 0;\n        }\n        if(square.value === true) {\n            continueSequence = true;\n            count++\n        }\n        return sequences.push(count);\n    })\n    return sequences;\n})\n\n// MAP ROW NUMBERS TO OBJECTS\nconst rowNums = rowCount.map(seq=> {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = (num) => num === 1 || num === 0;\n\n    if(seq.every(onlyOne)) {\n        seq.map(num =>{\n            if(num === 1) {\n                return only1s.push(num);\n            }\n        })\n    } else {\n        seq.map(num => {\n            return greaterThan1.push(num);\n        })    \n    }\n    \n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    \n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n\n    const obj = gameRows.map((row, index)=>{\n        return {nums:nums, row:row[index].row, col:row[index].col };\n    })\n\n    return obj;\n});"]},"metadata":{},"sourceType":"module"}