{"ast":null,"code":"import { nanoid } from \"nanoid\";\nexport default function RowObject(rawRows) {\n  const gameRows = [];\n  rawRows.map(rawRow => {\n    const row = [];\n    rawRow.map(square => {\n      if (square === true) {\n        row.push({\n          value: true,\n          id: \"square-\" + nanoid(),\n          row: '',\n          col: ''\n        });\n      } else {\n        row.push({\n          value: false,\n          id: \"square-\" + nanoid(),\n          row: '',\n          col: ''\n        });\n      }\n    });\n\n    for (let i = 0; i <= row.length; i++) {\n      row.map(square => {\n        square.row = i;\n      });\n    }\n\n    gameRows.push(row);\n  });\n  console.log(gameRows); // return gameRows;\n}\n_c = RowObject;\n\nvar _c;\n\n$RefreshReg$(_c, \"RowObject\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/RowObject.js"],"names":["nanoid","RowObject","rawRows","gameRows","map","rawRow","row","square","push","value","id","col","i","length","console","log"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,eAAe,SAASC,SAAT,CAAoBC,OAApB,EAA6B;AACxC,QAAMC,QAAQ,GAAG,EAAjB;AACAD,EAAAA,OAAO,CAACE,GAAR,CAAYC,MAAM,IAAE;AAChB,UAAMC,GAAG,GAAG,EAAZ;AACAD,IAAAA,MAAM,CAACD,GAAP,CAAWG,MAAM,IAAE;AACf,UAAGA,MAAM,KAAI,IAAb,EAAmB;AACfD,QAAAA,GAAG,CAACE,IAAJ,CAAS;AAACC,UAAAA,KAAK,EAAC,IAAP;AAAaC,UAAAA,EAAE,EAAC,YAAUV,MAAM,EAAhC;AAAoCM,UAAAA,GAAG,EAAC,EAAxC;AAA4CK,UAAAA,GAAG,EAAC;AAAhD,SAAT;AACH,OAFD,MAEO;AACHL,QAAAA,GAAG,CAACE,IAAJ,CAAS;AAACC,UAAAA,KAAK,EAAC,KAAP;AAAcC,UAAAA,EAAE,EAAC,YAAUV,MAAM,EAAjC;AAAqCM,UAAAA,GAAG,EAAC,EAAzC;AAA6CK,UAAAA,GAAG,EAAC;AAAjD,SAAT;AACH;AACJ,KAND;;AAOA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCN,MAAAA,GAAG,CAACF,GAAJ,CAAQG,MAAM,IAAE;AACZA,QAAAA,MAAM,CAACD,GAAP,GAAaM,CAAb;AACH,OAFD;AAGH;;AACDT,IAAAA,QAAQ,CAACK,IAAT,CAAcF,GAAd;AACH,GAfD;AAiBAQ,EAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ,EAnBwC,CAoBxC;AACH;KArBuBF,S","sourcesContent":["import { nanoid } from \"nanoid\";\n\nexport default function RowObject (rawRows) {\n    const gameRows = [];\n    rawRows.map(rawRow=>{\n        const row = [];\n        rawRow.map(square=>{\n            if(square=== true) {\n                row.push({value:true, id:\"square-\"+nanoid(), row:'', col:''},);\n            } else {\n                row.push({value:false, id:\"square-\"+nanoid(), row:'', col:''});\n            }\n        })\n        for(let i = 0; i <= row.length; i++) {\n            row.map(square=>{\n                square.row = i;\n            })\n        }\n        gameRows.push(row);\n    });\n    \n    console.log(gameRows);\n    // return gameRows;\n}"]},"metadata":{},"sourceType":"module"}