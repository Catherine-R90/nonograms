{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Tutorial.js\";\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport Columns from '../Helpers/ColumnHelper';\nimport Rows from '../Helpers/RowHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tutorial() {\n  const rawRows = [[true, true, true, true, true], [true, false, false, false, false], [true, false, false, false, false], [true, false, false, false, false], [true, true, true, true, true]];\n  const gameRows = [];\n\n  for (let i = 1; i <= rawRows.length; i++) {\n    rawRows[i].map(square => {\n      if (square === true) {\n        return gameRows.push({\n          value: true,\n          id: \"square-\" + nanoid(),\n          row: i\n        });\n      } else {\n        return gameRows.push({\n          value: false,\n          id: \"square-\" + nanoid(),\n          row: i\n        });\n      }\n    });\n  }\n\n  console.log(gameRows);\n  const colNums = Columns(gameRows);\n  const rowNums = Rows(gameRows);\n  const tutorial = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums,\n    colNums: colNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_c = Tutorial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tutorial\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Tutorial.js"],"names":["nanoid","Row","Board","Columns","Rows","Tutorial","rawRows","gameRows","i","length","map","square","push","value","id","row","console","log","colNums","rowNums","tutorial","board"],"mappings":";AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAC/B,QAAMC,OAAO,GAAG,CACZ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CADY,EAEZ,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,KAArB,EAA4B,KAA5B,CAFY,EAGZ,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,KAArB,EAA4B,KAA5B,CAHY,EAIZ,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,KAArB,EAA4B,KAA5B,CAJY,EAKZ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CALY,CAAhB;AAQA,QAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCF,IAAAA,OAAO,CAACE,CAAD,CAAP,CAAWE,GAAX,CAAeC,MAAM,IAAE;AACnB,UAAGA,MAAM,KAAI,IAAb,EAAmB;AACf,eAAOJ,QAAQ,CAACK,IAAT,CAAc;AAACC,UAAAA,KAAK,EAAC,IAAP;AAAaC,UAAAA,EAAE,EAAC,YAAUd,MAAM,EAAhC;AAAoCe,UAAAA,GAAG,EAACP;AAAxC,SAAd,CAAP;AACH,OAFD,MAEO;AACH,eAAOD,QAAQ,CAACK,IAAT,CAAc;AAACC,UAAAA,KAAK,EAAC,KAAP;AAAcC,UAAAA,EAAE,EAAC,YAAUd,MAAM,EAAjC;AAAqCe,UAAAA,GAAG,EAACP;AAAzC,SAAd,CAAP;AACH;AACJ,KAND;AAOH;;AAEDQ,EAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AAEA,QAAMW,OAAO,GAAGf,OAAO,CAACI,QAAD,CAAvB;AAEA,QAAMY,OAAO,GAAGf,IAAI,CAACG,QAAD,CAApB;AAEA,QAAMa,QAAQ,GAAGb,QAAQ,CAACG,GAAT,CAAaK,GAAG,IAAI;AACjC,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAEI,MAAA,EAAE,EAAEA,GAAG,CAACD;AAFZ,OAGS,SAAOd,MAAM,EAHtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GARgB,CAAjB;;AAUA,QAAMqB,KAAK,gBAAG,QAAC,KAAD;AAAO,IAAA,QAAQ,EAAEd,QAAjB;AAA2B,IAAA,OAAO,EAAEY,OAApC;AAA6C,IAAA,OAAO,EAAED;AAAtD;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,sBACI;AAAA,cACKG;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KA3CuBhB,Q","sourcesContent":["import { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport Columns from '../Helpers/ColumnHelper';\nimport Rows from '../Helpers/RowHelper';\n\nexport default function Tutorial() {\n    const rawRows = [\n        [true, true, true, true, true],\n        [true, false, false, false, false],\n        [true, false, false, false, false],\n        [true, false, false, false, false],\n        [true, true, true, true, true],\n    ];\n\n    const gameRows = [];\n    for(let i = 1; i <= rawRows.length; i++) {\n        rawRows[i].map(square=>{\n            if(square=== true) {\n                return gameRows.push({value:true, id:\"square-\"+nanoid(), row:i});\n            } else {\n                return gameRows.push({value:false, id:\"square-\"+nanoid(), row:i});\n            }\n        })\n    }\n\n    console.log(gameRows);\n\n    const colNums = Columns(gameRows);\n\n    const rowNums = Rows(gameRows);\n\n    const tutorial = gameRows.map(row => {\n        return (\n            <Row \n                row={row}\n                id={row.id}\n                key={'row-'+nanoid()}\n            />\n        );\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} colNums={colNums} />\n    \n    return (\n        <div>\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}