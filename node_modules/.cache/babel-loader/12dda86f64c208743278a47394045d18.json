{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const [gameRows, setGameRows] = useState(props.gameRows);\n\n  const handleClick = id => {\n    const updatedRow = rows.map(square => {\n      if (square.id === id) {\n        return { ...square,\n          value: !square.value\n        };\n      }\n\n      return square;\n    });\n    setRows(updatedRow);\n    props.winState();\n  };\n\n  const rowContent = {\n    value: false\n  };\n  const rawRow = new Array(props.length).fill(rowContent);\n  const rows = rawRow.map(row => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, row);\n  });\n  const columns = new Array(props.height).fill(rows);\n  const [boardRows, setBoardRows] = useState(columns);\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      handleClick: handleClick,\n      winState: winState,\n      setBoardRows: setBoardRows,\n      gameRows: gameRows,\n      boardRows: boardRows\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length;\n    const gameVals = gameRows.map(gameRow => {\n      gameRow.map(square => {\n        return square.value;\n      });\n    });\n    const boardVals = boardRows.map(boardRow => {\n      boardRow.map(square => {\n        return square.value;\n      });\n    }); // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}. game values: ${gameVals}. board values: ${boardVals}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [winState(), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"J3WJjAlhsQoAEplQv9JyFEHF+Nk=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","setGameRows","handleClick","id","updatedRow","rows","map","square","value","setRows","winState","rowContent","rawRow","Array","length","fill","row","Object","assign","columns","height","boardRows","setBoardRows","board","isArray","gameVals","gameRow","boardVals","boardRow","console","log"],"mappings":"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","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const [gameRows, setGameRows] = useState(props.gameRows);\n\n    const handleClick = (id) => {\n        const updatedRow = rows.map(square => {\n            if(square.id === id) {\n                return {...square, value: !square.value}\n            }\n            return square;\n        });\n        setRows(updatedRow);\n        props.winState();\n    }\n\n    const rowContent = {value:false};\n    const rawRow = new Array(props.length).fill(rowContent);\n    const rows = rawRow.map(row =>{\n        return Object.assign({id:\"square-\"+nanoid()}, row)    \n    });\n    const columns = new Array(props.height).fill(rows)\n\n    const [boardRows, setBoardRows] = useState(columns);\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                handleClick={handleClick}\n                winState={winState}\n                setBoardRows={setBoardRows}\n                gameRows={gameRows}\n                boardRows={boardRows}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        const gameVals = gameRows.map(gameRow => {\n            gameRow.map(square=>{\n                return square.value;\n            });\n        })\n        const boardVals = boardRows.map(boardRow => {\n            boardRow.map(square=>{\n                return square.value;\n            });\n        })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}. game values: ${gameVals}. board values: ${boardVals}`)\n    }\n\n    return (   \n        <div className=\"board\">\n            {winState()}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}