{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const [gameRows, setGameRows] = useState(props.gameRows);\n  const rowContent = {\n    value: false\n  };\n  const rawRow = new Array(props.length).fill(rowContent);\n  const rows = rawRow.map(row => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, row);\n  });\n  const columns = new Array(props.height).fill(rows);\n  const [boardRows, setBoardRows] = useState(columns);\n\n  const updateRow = (arr, key) => {\n    const updatedRow = arr.map(row => {\n      if (row.key === key) {\n        return { ...row\n        };\n      }\n\n      return row;\n    });\n    setBoardRows(updatedRow);\n  };\n\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      winState: winState,\n      updateRow: updateRow,\n      gameRows: gameRows,\n      boardRows: boardRows\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length;\n    const gameVals = gameRows.map(gameRow => {\n      gameRow.map(square => {\n        return square.value;\n      });\n    });\n    const boardVals = boardRows.map(boardRow => {\n      boardRow.map(square => {\n        return square.value;\n      });\n    }); // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}. game values: ${gameVals}. board values: ${boardVals}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [winState(), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"J3WJjAlhsQoAEplQv9JyFEHF+Nk=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","setGameRows","rowContent","value","rawRow","Array","length","fill","rows","map","row","Object","assign","id","columns","height","boardRows","setBoardRows","updateRow","arr","key","updatedRow","board","winState","isArray","gameVals","gameRow","square","boardVals","boardRow","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAACG,KAAK,CAACC,QAAP,CAAxC;AAEA,QAAME,UAAU,GAAG;AAACC,IAAAA,KAAK,EAAC;AAAP,GAAnB;AACA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUN,KAAK,CAACO,MAAhB,EAAwBC,IAAxB,CAA6BL,UAA7B,CAAf;AACA,QAAMM,IAAI,GAAGJ,MAAM,CAACK,GAAP,CAAWC,GAAG,IAAG;AAC1B,WAAOC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,YAAUlB,MAAM;AAApB,KAAd,EAAuCe,GAAvC,CAAP;AACH,GAFY,CAAb;AAGA,QAAMI,OAAO,GAAG,IAAIT,KAAJ,CAAUN,KAAK,CAACgB,MAAhB,EAAwBR,IAAxB,CAA6BC,IAA7B,CAAhB;AAEA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAACkB,OAAD,CAA1C;;AAEA,QAAMI,SAAS,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAa;AAC3B,UAAMC,UAAU,GAAGF,GAAG,CAACV,GAAJ,CAAQC,GAAG,IAAI;AAC9B,UAAGA,GAAG,CAACU,GAAJ,KAAYA,GAAf,EAAmB;AACf,eAAO,EAAC,GAAGV;AAAJ,SAAP;AACH;;AACD,aAAOA,GAAP;AACH,KALkB,CAAnB;AAMAO,IAAAA,YAAY,CAACI,UAAD,CAAZ;AACH,GARD;;AAUA,QAAMC,KAAK,GAAGN,SAAS,CAACP,GAAV,CAAcC,GAAG,IAAI;AAC/B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,QAAQ,EAAEa,QAHd;AAII,MAAA,SAAS,EAAEL,SAJf;AAKI,MAAA,QAAQ,EAAElB,QALd;AAMI,MAAA,SAAS,EAAEgB;AANf,OAES,SAAOrB,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH,GAXa,CAAd;;AAaA,WAAS4B,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,OAAO,GAAGnB,KAAK,CAACmB,OAAN,CAAcxB,QAAd,KAA2BK,KAAK,CAACmB,OAAN,CAAcR,SAAd,CAA3C;AACA,UAAMV,MAAM,GAAGN,QAAQ,CAACM,MAAT,KAAoBU,SAAS,CAACV,MAA7C;AACA,UAAMmB,QAAQ,GAAGzB,QAAQ,CAACS,GAAT,CAAaiB,OAAO,IAAI;AACrCA,MAAAA,OAAO,CAACjB,GAAR,CAAYkB,MAAM,IAAE;AAChB,eAAOA,MAAM,CAACxB,KAAd;AACH,OAFD;AAGH,KAJgB,CAAjB;AAKA,UAAMyB,SAAS,GAAGZ,SAAS,CAACP,GAAV,CAAcoB,QAAQ,IAAI;AACxCA,MAAAA,QAAQ,CAACpB,GAAT,CAAakB,MAAM,IAAE;AACjB,eAAOA,MAAM,CAACxB,KAAd;AACH,OAFD;AAGH,KAJiB,CAAlB,CAVgB,CAehB;;AAGA,WAAO2B,OAAO,CAACC,GAAR,CAAa,aAAYP,OAAQ,aAAYlB,MAAO,kBAAiBmB,QAAS,mBAAkBG,SAAU,EAA1G,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACKL,QAAQ,EADb,EAEKD,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA9DuBxB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const [gameRows, setGameRows] = useState(props.gameRows);\n\n    const rowContent = {value:false};\n    const rawRow = new Array(props.length).fill(rowContent);\n    const rows = rawRow.map(row =>{\n        return Object.assign({id:\"square-\"+nanoid()}, row)    \n    });\n    const columns = new Array(props.height).fill(rows)\n\n    const [boardRows, setBoardRows] = useState(columns);\n\n    const updateRow = (arr, key) =>{\n        const updatedRow = arr.map(row => {\n            if(row.key === key){\n                return {...row}\n            }\n            return row;\n        })\n        setBoardRows(updatedRow);\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                winState={winState}\n                updateRow={updateRow}\n                gameRows={gameRows}\n                boardRows={boardRows}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        const gameVals = gameRows.map(gameRow => {\n            gameRow.map(square=>{\n                return square.value;\n            });\n        })\n        const boardVals = boardRows.map(boardRow => {\n            boardRow.map(square=>{\n                return square.value;\n            });\n        })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}. game values: ${gameVals}. board values: ${boardVals}`)\n    }\n\n    return (   \n        <div className=\"board\">\n            {winState()}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}