{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const [gameRows, setGameRows] = useState(props.gameRows);\n  const rawRow = new Array(props.length).fill({\n    value: false\n  });\n  const rows = rawRow.map(square => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, square);\n  });\n  const columns = new Array(props.height).fill(rows);\n  const colsId = columns.map(row => {\n    return Object.assign({\n      id: \"boardRow-\" + nanoid()\n    }, row);\n  }); // const [boardRows, setBoardRows] = useState(colsId);\n\n  const board = columns.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length; // const gameVals = gameRows.map(gameRow => {\n    //     gameRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const boardVals = boardRows.map(boardRow => {\n    //     boardRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}.`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"ClKmcqQhVu+qQ91IRHsEiBUFWck=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","setGameRows","rawRow","Array","length","fill","value","rows","map","square","Object","assign","id","columns","height","colsId","row","board","winState","isArray","boardRows","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAACG,KAAK,CAACC,QAAP,CAAxC;AAEA,QAAME,MAAM,GAAG,IAAIC,KAAJ,CAAUJ,KAAK,CAACK,MAAhB,EAAwBC,IAAxB,CAA6B;AAACC,IAAAA,KAAK,EAAC;AAAP,GAA7B,CAAf;AACA,QAAMC,IAAI,GAAGL,MAAM,CAACM,GAAP,CAAWC,MAAM,IAAG;AAC7B,WAAOC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,YAAUjB,MAAM;AAApB,KAAd,EAAuCc,MAAvC,CAAP;AACH,GAFY,CAAb;AAGA,QAAMI,OAAO,GAAG,IAAIV,KAAJ,CAAUJ,KAAK,CAACe,MAAhB,EAAwBT,IAAxB,CAA6BE,IAA7B,CAAhB;AACA,QAAMQ,MAAM,GAAGF,OAAO,CAACL,GAAR,CAAYQ,GAAG,IAAE;AAC5B,WAAON,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,cAAYjB,MAAM;AAAtB,KAAd,EAAyCqB,GAAzC,CAAP;AACH,GAFc,CAAf,CARiC,CAYjC;;AAEA,QAAMC,KAAK,GAAGJ,OAAO,CAACL,GAAR,CAAYQ,GAAG,IAAI;AAC7B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,EAAE,EAAEA,GAAG,CAACJ;AAHZ,OAES,SAAOjB,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GARa,CAAd;;AAUA,WAASuB,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,OAAO,GAAGhB,KAAK,CAACgB,OAAN,CAAcnB,QAAd,KAA2BG,KAAK,CAACgB,OAAN,CAAcC,SAAd,CAA3C;AACA,UAAMhB,MAAM,GAAGJ,QAAQ,CAACI,MAAT,KAAoBgB,SAAS,CAAChB,MAA7C,CAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAAOiB,OAAO,CAACC,GAAR,CAAa,aAAYH,OAAQ,aAAYf,MAAO,GAApD,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKa;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAlDuBnB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const [gameRows, setGameRows] = useState(props.gameRows);\n\n    const rawRow = new Array(props.length).fill({value:false});\n    const rows = rawRow.map(square =>{\n        return Object.assign({id:\"square-\"+nanoid()}, square);  \n    });\n    const columns = new Array(props.height).fill(rows);\n    const colsId = columns.map(row=>{\n        return Object.assign({id:\"boardRow-\"+nanoid()}, row);\n    });\n\n    // const [boardRows, setBoardRows] = useState(colsId);\n\n    const board = columns.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                id={row.id}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        // const gameVals = gameRows.map(gameRow => {\n        //     gameRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const boardVals = boardRows.map(boardRow => {\n        //     boardRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}.`)\n    }\n\n    return (   \n        <div className=\"board\">\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}