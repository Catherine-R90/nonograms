{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\";\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  const gameRows = props.gameRows;\n  const rawRow = new Array(props.length).fill({\n    value: false\n  }); // const rows = rawRow.map(square =>{\n  //     return Object.assign({id:\"square-\"+nanoid()}, square);  \n  // });\n\n  var boardRows = [];\n\n  for (let i = 0; i < props.height; i++) {\n    boardRows[i] = [rawRow];\n  } // const [boardRows, setBoardRows] = useState(rows);\n  // const cols = new Array(props.height).fill(rows);\n  // const [columns, setColumns] = useState(cols);\n\n\n  const updateRow = id => {// const updatedRow = boardRows.map(square => {\n    //     if(square.id === id) {\n    //         return {...square, value:!square.value}\n    //     }\n    //     return square;\n    // })\n    // const updatedCol = \n    // setBoardRows(updatedRow);\n    // setColumns(updatedCol);\n  };\n\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      winState: winState,\n      updateRow: updateRow // id={row.id}\n\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length; // const gameVals = gameRows.map(gameRow => {\n    //     gameRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const boardVals = boardRows.map(boardRow => {\n    //     boardRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}.`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","rawRow","Array","length","fill","value","boardRows","i","height","updateRow","id","board","map","row","winState","isArray","console","log"],"mappings":";AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACjC,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AAEA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUH,KAAK,CAACI,MAAhB,EAAwBC,IAAxB,CAA6B;AAACC,IAAAA,KAAK,EAAC;AAAP,GAA7B,CAAf,CAHiC,CAIjC;AACA;AACA;;AAEA,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,KAAK,CAACS,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,SAAS,CAACC,CAAD,CAAT,GAAe,CACXN,MADW,CAAf;AAGH,GAbgC,CAgBjC;AAEA;AAEA;;;AAEA,QAAMQ,SAAS,GAAIC,EAAD,IAAO,CACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAVD;;AAYA,QAAMC,KAAK,GAAGL,SAAS,CAACM,GAAV,CAAcC,GAAG,IAAI;AAC/B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,QAAQ,EAAEC,QAHd;AAII,MAAA,SAAS,EAAEL,SAJf,CAKI;;AALJ,OAES,SAAOd,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAVa,CAAd;;AAYA,WAASmB,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,OAAO,GAAGb,KAAK,CAACa,OAAN,CAAcf,QAAd,KAA2BE,KAAK,CAACa,OAAN,CAAcT,SAAd,CAA3C;AACA,UAAMH,MAAM,GAAGH,QAAQ,CAACG,MAAT,KAAoBG,SAAS,CAACH,MAA7C,CAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAAOa,OAAO,CAACC,GAAR,CAAa,aAAYF,OAAQ,aAAYZ,MAAO,GAApD,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKQ;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KAxEuBb,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const rawRow = new Array(props.length).fill({value:false});\n    // const rows = rawRow.map(square =>{\n    //     return Object.assign({id:\"square-\"+nanoid()}, square);  \n    // });\n\n    var boardRows = [];\n    for(let i = 0; i < props.height; i++) {\n        boardRows[i] = [        \n            rawRow\n        ];\n    }\n\n\n    // const [boardRows, setBoardRows] = useState(rows);\n\n    // const cols = new Array(props.height).fill(rows);\n   \n    // const [columns, setColumns] = useState(cols);\n\n    const updateRow = (id) =>{\n        // const updatedRow = boardRows.map(square => {\n        //     if(square.id === id) {\n        //         return {...square, value:!square.value}\n        //     }\n        //     return square;\n        // })\n        // const updatedCol = \n        // setBoardRows(updatedRow);\n        // setColumns(updatedCol);\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                winState={winState}\n                updateRow={updateRow}\n                // id={row.id}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        // const gameVals = gameRows.map(gameRow => {\n        //     gameRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const boardVals = boardRows.map(boardRow => {\n        //     boardRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}.`)\n    }\n\n    return (   \n        <div className=\"board\">\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}