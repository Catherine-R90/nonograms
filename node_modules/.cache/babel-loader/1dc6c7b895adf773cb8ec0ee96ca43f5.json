{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Level1.js\";\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Level1() {\n  const row1 = [{\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 6\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 10\n  }];\n  const row2 = [{\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 6\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 10\n  }];\n  const row3 = [{\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 10\n  }];\n  const row4 = [{\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 5\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 6\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 10\n  }];\n  const row5 = [{\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 5\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 10\n  }];\n  const row6 = [{\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 7\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 8\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 6,\n    col: 10\n  }];\n  const row7 = [{\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 8\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 7,\n    col: 10\n  }];\n  const row8 = [{\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 7\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 8\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 8,\n    col: 10\n  }];\n  const row9 = [{\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 5\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 9,\n    col: 10\n  }];\n  const row10 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 5\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 7\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 8\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 9\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 10,\n    col: 10\n  }];\n  const gameRows = [row1, row2, row3, row4, row5, row6, row7, row8, row9, row10]; // ASSIGN COL ROWS\n\n  const nums = gameRows.map((row, index) => row[index].col);\n  const gameCols = [];\n  nums.forEach(num => {\n    const col = [];\n    gameRows.map(row => {\n      const colNum = row.map(square => {\n        if (square.col === num) {\n          return col.push(square);\n        }\n      });\n      return colNum;\n    });\n    return gameCols.push(col);\n  }); // GET NUMBERS FOR COLS\n\n  const colCount = gameCols.map(col => {\n    let continueColSequence = false;\n    let colCount = 0;\n    let colSequences = [];\n    col.map(square => {\n      if (square.value === false && continueColSequence === true) {\n        continueColSequence = false;\n        colSequences.push(colCount);\n        colCount = 0;\n      }\n\n      if (square.value === true) {\n        continueColSequence = true;\n        colCount++;\n      }\n\n      if (colSequences.length < gameCols.length) {\n        return colSequences.push(colCount);\n      } else {\n        return;\n      }\n    });\n    return colSequences;\n  }); // MAP COL NUMBERS TO OBJECTS\n\n  const colNums = colCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameCols.map((col, index) => {\n      return {\n        nums: nums,\n        col: col[index].row,\n        col: col[index].col\n      };\n    });\n    return obj;\n  }); // GET NUMBERS FOR ROWS\n\n  const rowCount = gameRows.map(row => {\n    let continueSequence = false;\n    let count = 0;\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false && continueSequence === true) {\n        continueSequence = false;\n        sequences.push(count);\n        count = 0;\n      }\n\n      if (square.value === true) {\n        continueSequence = true;\n        count++;\n      }\n\n      if (sequences.length < gameRows.length) {\n        return sequences.push(count);\n      } else {\n        return;\n      }\n    });\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map((row, index) => {\n      return {\n        nums: nums,\n        row: row[index].row,\n        col: row[index].col\n      };\n    });\n    return obj;\n  });\n  const level1 = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums,\n    colNums: colNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(\"rows: \"), console.log(gameRows), console.log(\"cols: \"), console.log(gameCols), board, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"level\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 9\n  }, this);\n}\n_c = Level1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Level1\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Level1.js"],"names":["React","nanoid","Row","Board","Level1","row1","value","id","key","row","col","row2","row3","row4","row5","row6","row7","row8","row9","row10","gameRows","nums","map","index","gameCols","forEach","num","colNum","square","push","colCount","continueColSequence","colSequences","length","colNums","seq","only1s","greaterThan1","onlyOne","every","oneTotals","join","greaterTotal","rawNums","replace","obj","rowCount","continueSequence","count","sequences","rowNums","level1","board","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\n\nexport default function Level1() {\n    const row1 = [\n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:1}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:2}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:3}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:4}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:5}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:6}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:7}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:8}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:9}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:10}\n    ];\n    const row2 = [\n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:1}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:2}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:3}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:4}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:5}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:6}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:7}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:8}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:9}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:10}\n    ];\n    const row3 = [\n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:1}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:2}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:3}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:4}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:5}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:6}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:7}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:8}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:9}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:10}\n    ];\n    const row4 = [\n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:1}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:2}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:3}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:4}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:5}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:6}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:7}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:8}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:9}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:10}\n    ];\n    const row5 = [\n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:1}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:2}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:3}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:4}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:5}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:6}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:7}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:8}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:9}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:10}\n    ];\n    const row6 = [\n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:1}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:2}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:3}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:4}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:5}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:6}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:7}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:8}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:9}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:6, col:10}\n    ];\n    const row7 = [\n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:1}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:2}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:3}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:4}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:5}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:6}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:7}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:8}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:9}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:7, col:10}\n    ];\n    const row8 = [\n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:1}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:2}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:3}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:4}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:5}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:6}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:7}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:8}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:9}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:8, col:10}\n    ];\n    const row9 = [\n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:1}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:2}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:3}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:4}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:5}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:6}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:7}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:8}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:9}, \n        {value: false, id:\"square-\"+nanoid(), key:nanoid(), row:9, col:10}\n    ];\n    const row10 = [\n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:1}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:2}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:3}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:4}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:5}, \n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:6}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:7}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:8}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:9}, \n        {value: true, id:\"square-\"+nanoid(), key:nanoid(), row:10, col:10}\n    ];\n\n    const gameRows = [row1, row2, row3, row4, row5, row6, row7, row8, row9, row10];\n\n    // ASSIGN COL ROWS\n    const nums = gameRows.map((row, index) => row[index].col);\n\n    const gameCols = [];\n    nums.forEach(num=>{\n        const col = [];\n        gameRows.map(row=>{\n            const colNum = row.map(square=>{\n                if(square.col === num) {\n                    return col.push(square);\n                }\n            });\n            return colNum;\n        })\n        return gameCols.push(col);\n    });\n\n    // GET NUMBERS FOR COLS\n    const colCount = gameCols.map(col=>{\n        let continueColSequence = false;\n        let colCount = 0;\n        let colSequences = []\n        col.map(square=>{\n            if(square.value === false && continueColSequence === true) {\n                continueColSequence = false;\n                colSequences.push(colCount);\n                colCount = 0;\n            }\n            if(square.value === true) {\n                continueColSequence = true;\n                colCount++\n            }\n            if(colSequences.length < gameCols.length) {\n                return colSequences.push(colCount);\n            } else {\n                return;\n            }\n        });\n        return colSequences;\n    })\n\n    // MAP COL NUMBERS TO OBJECTS\n    const colNums = colCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n    \n        const onlyOne = (num) => num === 1 || num === 0;\n    \n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n    \n        const obj = gameCols.map((col, index)=>{\n            return {nums:nums, col:col[index].row, col:col[index].col };\n        })\n    \n        return obj;\n    });\n\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let continueSequence = false;\n        let count = 0;\n        let sequences = [];\n        row.map(square=>{\n            if(square.value === false && continueSequence === true) {\n                continueSequence = false;\n                sequences.push(count);\n                count = 0;\n            }\n            if(square.value === true) {\n                continueSequence = true;\n                count++\n            }\n            if(sequences.length < gameRows.length) {\n                return sequences.push(count);\n            } else {\n                return;\n            }\n        })\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map((row, index)=>{\n            return {nums:nums, row:row[index].row, col:row[index].col };\n        })\n\n        return obj;\n    });\n\n    const level1 = gameRows.map(row=>{\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n            />\n        );\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} colNums={colNums} />\n\n    return (\n        <div>\n            {console.log(\"rows: \")}\n            {console.log(gameRows)}\n            {console.log(\"cols: \")}\n            {console.log(gameCols)}\n            {board}\n            <div className='level'>\n                {/* {level1} */}    \n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}