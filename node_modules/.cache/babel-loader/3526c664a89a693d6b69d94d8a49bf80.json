{"ast":null,"code":"export default function Columns(gameRows) {\n  // ASSIGN COL ROWS\n  const nums = gameRows.map((row, index) => row[index].col);\n  console.log(nums);\n  const gameCols = [];\n  nums.forEach(num => {\n    const col = [];\n    gameRows.map(row => {\n      const colNum = row.map(square => {\n        if (square.col === num) {\n          return col.push(square);\n        }\n      });\n      return colNum;\n    });\n    return gameCols.push(col);\n  }); // GET NUMBERS FOR COLS\n\n  const sequences = gameCols.map(col => {\n    let sequences = [];\n    col.map(square => {\n      if (square.value === false) {\n        sequences.push(0);\n      }\n\n      if (square.value === true) {\n        sequences.push(1);\n      }\n    });\n    return sequences;\n  });\n  const colCount = sequences.map(seq => {\n    let countSequences = [];\n    let count = 0;\n    seq.forEach(num => {\n      if (num === 0) {\n        countSequences.push(count);\n        count = 0;\n      }\n\n      if (num === 1) {\n        count++;\n      }\n    });\n    countSequences.push(count);\n    return countSequences;\n  });\n  const colNums = colCount.map(seq => {\n    const onlyZero = num => num === 0;\n\n    let obj;\n\n    if (seq.every(onlyZero)) {\n      obj = {\n        nums: \"0\"\n      };\n    } else {\n      const cleanNums = seq.filter(num => num !== 0);\n      obj = {\n        nums: cleanNums.join()\n      };\n    }\n\n    return obj;\n  });\n  return colNums;\n}\n_c = Columns;\n\nvar _c;\n\n$RefreshReg$(_c, \"Columns\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/ColumnHelper.js"],"names":["Columns","gameRows","nums","map","row","index","col","console","log","gameCols","forEach","num","colNum","square","push","sequences","value","colCount","seq","countSequences","count","colNums","onlyZero","obj","every","cleanNums","filter","join"],"mappings":"AAAA,eAAe,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AACtC;AACA,QAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,CAAa,CAACC,GAAD,EAAMC,KAAN,KAAgBD,GAAG,CAACC,KAAD,CAAH,CAAWC,GAAxC,CAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,QAAMO,QAAQ,GAAG,EAAjB;AAEAP,EAAAA,IAAI,CAACQ,OAAL,CAAaC,GAAG,IAAE;AACd,UAAML,GAAG,GAAG,EAAZ;AACAL,IAAAA,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AACd,YAAMQ,MAAM,GAAGR,GAAG,CAACD,GAAJ,CAAQU,MAAM,IAAE;AAC3B,YAAGA,MAAM,CAACP,GAAP,KAAeK,GAAlB,EAAuB;AACnB,iBAAOL,GAAG,CAACQ,IAAJ,CAASD,MAAT,CAAP;AACH;AACJ,OAJc,CAAf;AAKA,aAAOD,MAAP;AACH,KAPD;AAQA,WAAOH,QAAQ,CAACK,IAAT,CAAcR,GAAd,CAAP;AACH,GAXD,EANsC,CAmBtC;;AACA,QAAMS,SAAS,GAAGN,QAAQ,CAACN,GAAT,CAAaG,GAAG,IAAE;AAChC,QAAIS,SAAS,GAAG,EAAhB;AACAT,IAAAA,GAAG,CAACH,GAAJ,CAAQU,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACG,KAAP,KAAiB,KAApB,EAA2B;AACvBD,QAAAA,SAAS,CAACD,IAAV,CAAe,CAAf;AACH;;AACD,UAAGD,MAAM,CAACG,KAAP,KAAiB,IAApB,EAA0B;AACtBD,QAAAA,SAAS,CAACD,IAAV,CAAe,CAAf;AACH;AACJ,KAPD;AAQA,WAAOC,SAAP;AACH,GAXiB,CAAlB;AAaA,QAAME,QAAQ,GAAGF,SAAS,CAACZ,GAAV,CAAce,GAAG,IAAG;AACjC,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;AAEAF,IAAAA,GAAG,CAACR,OAAJ,CAAYC,GAAG,IAAE;AACb,UAAGA,GAAG,KAAK,CAAX,EAAc;AACVQ,QAAAA,cAAc,CAACL,IAAf,CAAoBM,KAApB;AACAA,QAAAA,KAAK,GAAG,CAAR;AACH;;AACD,UAAGT,GAAG,KAAK,CAAX,EAAc;AACVS,QAAAA,KAAK;AACR;AACJ,KARD;AASAD,IAAAA,cAAc,CAACL,IAAf,CAAoBM,KAApB;AACA,WAAOD,cAAP;AACH,GAfgB,CAAjB;AAiBA,QAAME,OAAO,GAAGJ,QAAQ,CAACd,GAAT,CAAae,GAAG,IAAG;AAC/B,UAAMI,QAAQ,GAAIX,GAAD,IAASA,GAAG,KAAK,CAAlC;;AAEA,QAAIY,GAAJ;;AAEA,QAAGL,GAAG,CAACM,KAAJ,CAAUF,QAAV,CAAH,EAAwB;AACpBC,MAAAA,GAAG,GAAG;AAACrB,QAAAA,IAAI,EAAC;AAAN,OAAN;AACH,KAFD,MAEO;AACH,YAAMuB,SAAS,GAAGP,GAAG,CAACQ,MAAJ,CAAWf,GAAG,IAAIA,GAAG,KAAK,CAA1B,CAAlB;AACAY,MAAAA,GAAG,GAAG;AAACrB,QAAAA,IAAI,EAACuB,SAAS,CAACE,IAAV;AAAN,OAAN;AACH;;AAED,WAAOJ,GAAP;AACH,GAbe,CAAhB;AAeA,SAAOF,OAAP;AACH;KAlEuBrB,O","sourcesContent":["export default function Columns(gameRows) {\n    // ASSIGN COL ROWS\n    const nums = gameRows.map((row, index) => row[index].col);\n    console.log(nums);\n    const gameCols = [];\n\n    nums.forEach(num=>{\n        const col = [];\n        gameRows.map(row=>{\n            const colNum = row.map(square=>{\n                if(square.col === num) {\n                    return col.push(square);\n                }\n            });\n            return colNum;\n        })\n        return gameCols.push(col);\n    });\n\n    // GET NUMBERS FOR COLS\n    const sequences = gameCols.map(col=>{\n        let sequences = [];\n        col.map(square=>{\n            if(square.value === false) {\n                sequences.push(0);\n            }\n            if(square.value === true) {\n                sequences.push(1);\n            }\n        })\n        return sequences;\n    });\n\n    const colCount = sequences.map(seq =>{        \n        let countSequences = [];\n        let count = 0;\n\n        seq.forEach(num=>{\n            if(num === 0) {\n                countSequences.push(count);\n                count = 0;\n            }\n            if(num === 1) {\n                count++\n            }\n        });\n        countSequences.push(count);\n        return countSequences;\n    });\n\n    const colNums = colCount.map(seq=> {\n        const onlyZero = (num) => num === 0;\n\n        let obj;\n\n        if(seq.every(onlyZero)) {\n            obj = {nums:\"0\"};\n        } else {\n            const cleanNums = seq.filter(num => num !== 0);\n            obj = {nums:cleanNums.join()};\n        }\n\n        return obj;\n    });\n\n    return colNums;\n}"]},"metadata":{},"sourceType":"module"}