{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const [gameRows, setGameRows] = useState(props.gameRows);\n  const rowContent = {\n    value: false\n  };\n  const rawRow = new Array(props.length).fill(rowContent);\n  const rows = rawRow.map(row => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, row);\n  });\n  const [boardRows, setBoardRows] = useState(new Array(props.height).fill(rows));\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      winState: winState,\n      gameRows: gameRows,\n      boardRows: boardRows\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const win = gameRows.map(gameRow => {\n      boardRows.map(boardRow => {\n        return win = Array.isArray(gameRow) && Array.isArray(boardRow) && gameRow.length === boardRow.length && gameRow.every((val, index) => val === boardRow[index]);\n      });\n    });\n\n    if (win === true) {\n      return console.log(\"success!\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [winState(), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"BiZI9KU5xcpe7ZZczMobLuFknMo=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","setGameRows","rowContent","value","rawRow","Array","length","fill","rows","map","row","Object","assign","id","boardRows","setBoardRows","height","board","winState","win","gameRow","boardRow","isArray","every","val","index","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAACG,KAAK,CAACC,QAAP,CAAxC;AAEA,QAAME,UAAU,GAAG;AAACC,IAAAA,KAAK,EAAC;AAAP,GAAnB;AACA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUN,KAAK,CAACO,MAAhB,EAAwBC,IAAxB,CAA6BL,UAA7B,CAAf;AACA,QAAMM,IAAI,GAAGJ,MAAM,CAACK,GAAP,CAAWC,GAAG,IAAG;AAC1B,WAAOC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,YAAUlB,MAAM;AAApB,KAAd,EAAuCe,GAAvC,CAAP;AACH,GAFY,CAAb;AAIA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,IAAIS,KAAJ,CAAUN,KAAK,CAACiB,MAAhB,EAAwBT,IAAxB,CAA6BC,IAA7B,CAAD,CAA1C;AAEA,QAAMS,KAAK,GAAGH,SAAS,CAACL,GAAV,CAAcC,GAAG,IAAI;AAC/B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,QAAQ,EAAEQ,QAHd;AAII,MAAA,QAAQ,EAAElB,QAJd;AAKI,MAAA,SAAS,EAAEc;AALf,OAES,SAAOnB,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAVa,CAAd;;AAYA,WAASuB,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,GAAG,GAAEnB,QAAQ,CAACS,GAAT,CAAaW,OAAO,IAAE;AAC7BN,MAAAA,SAAS,CAACL,GAAV,CAAcY,QAAQ,IAAE;AACpB,eAAOF,GAAG,GAAGd,KAAK,CAACiB,OAAN,CAAcF,OAAd,KAA0Bf,KAAK,CAACiB,OAAN,CAAcD,QAAd,CAA1B,IAAqDD,OAAO,CAACd,MAAR,KAAmBe,QAAQ,CAACf,MAAjF,IAA2Fc,OAAO,CAACG,KAAR,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgBD,GAAG,KAAKH,QAAQ,CAACI,KAAD,CAA9C,CAAxG;AAEH,OAHD;AAIH,KALU,CAAX;;AAMA,QAAGN,GAAG,KAAK,IAAX,EAAiB;AACb,aAAOO,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAP;AACH;AACJ;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACKT,QAAQ,EADb,EAEKD,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA3CuBnB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const [gameRows, setGameRows] = useState(props.gameRows);\n\n    const rowContent = {value:false};\n    const rawRow = new Array(props.length).fill(rowContent);\n    const rows = rawRow.map(row =>{\n        return Object.assign({id:\"square-\"+nanoid()}, row)    \n    });\n\n    const [boardRows, setBoardRows] = useState(new Array(props.height).fill(rows));\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                winState={winState}\n                gameRows={gameRows}\n                boardRows={boardRows}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const win =gameRows.map(gameRow=>{\n            boardRows.map(boardRow=>{\n                return win = Array.isArray(gameRow) && Array.isArray(boardRow) && gameRow.length === boardRow.length && gameRow.every((val, index) => val === boardRow[index]);\n                \n            })\n        })\n        if(win === true) {\n            return console.log(\"success!\")\n        }\n    }\n\n    return (   \n        <div className=\"board\">\n            {winState()}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}