{"ast":null,"code":"export default function Rows(gameRows) {\n  // GET NUMBERS FOR ROWS\n  const rowCount = gameRows.map(row => {\n    let count = 0;\n    let sequences = [];\n    let continueSeq = true;\n    row.map(square => {\n      if (square.value === false && continueSeq === true) {\n        continueSeq = false;\n        if (sequence.every(0)) sequence.push(new Array(row.length).fill(0));\n        sequences.push(count);\n        count = 0;\n        console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`);\n      }\n\n      if (square.value === true) {\n        continueSeq = true;\n        count++;\n        console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`);\n      }\n\n      return sequences.push(count);\n    });\n    console.log(sequences);\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map((row, index) => {\n      return {\n        nums: nums,\n        row: row[index].row,\n        col: row[index].col\n      };\n    });\n    return obj;\n  });\n  return rowNums;\n}\n_c = Rows;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rows\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/RowHelper.js"],"names":["Rows","gameRows","rowCount","map","row","count","sequences","continueSeq","square","value","sequence","every","push","Array","length","fill","console","log","id","col","rowNums","seq","only1s","greaterThan1","onlyOne","num","oneTotals","join","greaterTotal","rawNums","nums","replace","obj","index"],"mappings":"AAAA,eAAe,SAASA,IAAT,CAAcC,QAAd,EAAwB;AACnC;AACA,QAAMC,QAAQ,GAAGD,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAC/B,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,WAAW,GAAG,IAAlB;AACAH,IAAAA,GAAG,CAACD,GAAJ,CAAQK,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACC,KAAP,KAAiB,KAAjB,IAA0BF,WAAW,KAAK,IAA7C,EAAmD;AAC/CA,QAAAA,WAAW,GAAG,KAAd;AACA,YAAGG,QAAQ,CAACC,KAAT,CAAe,CAAf,CAAH,EAAsBD,QAAQ,CAACE,IAAT,CAAc,IAAIC,KAAJ,CAAUT,GAAG,CAACU,MAAd,EAAsBC,IAAtB,CAA2B,CAA3B,CAAd;AACtBT,QAAAA,SAAS,CAACM,IAAV,CAAeP,KAAf;AACAA,QAAAA,KAAK,GAAG,CAAR;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAa,eAAcT,MAAM,CAACU,EAAG,SAAQV,MAAM,CAACJ,GAAI,SAAQI,MAAM,CAACW,GAAI,EAA3E;AACH;;AACD,UAAGX,MAAM,CAACC,KAAP,KAAiB,IAApB,EAA0B;AACtBF,QAAAA,WAAW,GAAG,IAAd;AACAF,QAAAA,KAAK;AACLW,QAAAA,OAAO,CAACC,GAAR,CAAa,cAAaT,MAAM,CAACU,EAAG,SAAQV,MAAM,CAACJ,GAAI,SAAQI,MAAM,CAACW,GAAI,EAA1E;AACH;;AACD,aAAOb,SAAS,CAACM,IAAV,CAAeP,KAAf,CAAP;AACH,KAdD;AAeAW,IAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACA,WAAOA,SAAP;AACH,GArBgB,CAAjB,CAFmC,CAyBnC;;AACA,QAAMc,OAAO,GAAGlB,QAAQ,CAACC,GAAT,CAAakB,GAAG,IAAG;AAC/B,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,YAAY,GAAG,EAAnB;;AAEA,UAAMC,OAAO,GAAIC,GAAD,IAASA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAA9C;;AAEA,QAAGJ,GAAG,CAACV,KAAJ,CAAUa,OAAV,CAAH,EAAuB;AACnBH,MAAAA,GAAG,CAAClB,GAAJ,CAAQsB,GAAG,IAAG;AACV,YAAGA,GAAG,KAAK,CAAX,EAAc;AACV,iBAAOH,MAAM,CAACV,IAAP,CAAYa,GAAZ,CAAP;AACH;AACJ,OAJD;AAKH,KAND,MAMO;AACHJ,MAAAA,GAAG,CAAClB,GAAJ,CAAQsB,GAAG,IAAI;AACX,eAAOF,YAAY,CAACX,IAAb,CAAkBa,GAAlB,CAAP;AACH,OAFD;AAGH;;AAED,UAAMC,SAAS,GAAGJ,MAAM,CAACK,IAAP,EAAlB;AACA,UAAMC,YAAY,GAAGL,YAAY,CAACT,MAAlC;AAEA,UAAMe,OAAO,GAAI,GAAEH,SAAU,IAAGE,YAAa,EAA7C;AACA,UAAME,IAAI,GAAGD,OAAO,CAACE,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAb;AAEA,UAAMC,GAAG,GAAG/B,QAAQ,CAACE,GAAT,CAAa,CAACC,GAAD,EAAM6B,KAAN,KAAc;AACnC,aAAO;AAACH,QAAAA,IAAI,EAACA,IAAN;AAAY1B,QAAAA,GAAG,EAACA,GAAG,CAAC6B,KAAD,CAAH,CAAW7B,GAA3B;AAAgCe,QAAAA,GAAG,EAACf,GAAG,CAAC6B,KAAD,CAAH,CAAWd;AAA/C,OAAP;AACH,KAFW,CAAZ;AAIA,WAAOa,GAAP;AACH,GA7Be,CAAhB;AA+BA,SAAOZ,OAAP;AACH;KA1DuBpB,I","sourcesContent":["export default function Rows(gameRows) {\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let count = 0;\n        let sequences = [];\n        let continueSeq = true;\n        row.map(square=>{\n            if(square.value === false && continueSeq === true) {\n                continueSeq = false;\n                if(sequence.every(0)) sequence.push(new Array(row.length).fill(0))\n                sequences.push(count);\n                count = 0;\n                console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n            }\n            if(square.value === true) {\n                continueSeq = true;\n                count++\n                console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n            }\n            return sequences.push(count);\n        })\n        console.log(sequences);\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map((row, index)=>{\n            return {nums:nums, row:row[index].row, col:row[index].col };\n        })\n\n        return obj;\n    });\n\n    return rowNums;\n}"]},"metadata":{},"sourceType":"module"}