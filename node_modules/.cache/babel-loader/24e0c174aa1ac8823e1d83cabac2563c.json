{"ast":null,"code":"export default function Rows(gameRows) {\n  // GET NUMBERS FOR ROWS\n  // const rowCount = gameRows.map(row=>{\n  //     let count = 0;\n  //     let sequences = [];\n  //     let continueSeq = true;\n  //     row.map(square=>{\n  //         if(square.value === false && continueSeq === true) {\n  //             continueSeq = false;\n  //             sequences.push(count);\n  //             count = 0;\n  //             console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n  //         }\n  //         if(square.value === true) {\n  //             continueSeq = true;\n  //             count++\n  //             console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n  //         }\n  //         return sequences.push(count);\n  //     })\n  //     console.log(sequences);\n  //     return sequences;\n  // })\n  const sequences = gameRows.map(row => {\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false) {\n        sequences.push(0);\n      }\n\n      if (square.value === true) {\n        sequences.push(1);\n      }\n    });\n    return sequences;\n  });\n  const rowCount = sequences.map(seq => {\n    let countSequences = [];\n    let count = 0;\n    seq.forEach(num => {\n      if (num === 0) {\n        countSequences.push(count);\n        count = 0;\n      }\n\n      if (num === 1) {\n        count++;\n      }\n    });\n    countSequences.push(count);\n    return countSequences;\n  });\n  const rowNums = rowCount.map(seq => {\n    const onlyZero = num => num === 0;\n\n    const obj = [];\n\n    if (seq.every(onlyZero)) {\n      obj.push({\n        nums: 0\n      });\n    } else {\n      const cleanNums = seq.filter(num => num !== 0);\n      obj.push({\n        nums: cleanNums.join()\n      });\n    } // cleanNums.map(seq=>{\n    //     return obj.push({nums:seq});\n    // })\n    // only0s.map(seq=>{\n    //     return obj.push({nums:0});\n    // })\n\n\n    return obj;\n  });\n  console.log(rowNums);\n  return rowNums;\n}\n_c = Rows;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rows\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/RowHelper.js"],"names":["Rows","gameRows","sequences","map","row","square","value","push","rowCount","seq","countSequences","count","forEach","num","rowNums","onlyZero","obj","every","nums","cleanNums","filter","join","console","log"],"mappings":"AAAA,eAAe,SAASA,IAAT,CAAcC,QAAd,EAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,SAAS,GAAGD,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAChC,QAAIF,SAAS,GAAG,EAAhB;AACAE,IAAAA,GAAG,CAACD,GAAJ,CAAQE,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACC,KAAP,KAAiB,KAApB,EAA2B;AACvBJ,QAAAA,SAAS,CAACK,IAAV,CAAe,CAAf;AACH;;AACD,UAAGF,MAAM,CAACC,KAAP,KAAiB,IAApB,EAA0B;AACtBJ,QAAAA,SAAS,CAACK,IAAV,CAAe,CAAf;AACH;AACJ,KAPD;AAQA,WAAOL,SAAP;AACH,GAXiB,CAAlB;AAaA,QAAMM,QAAQ,GAAGN,SAAS,CAACC,GAAV,CAAcM,GAAG,IAAG;AACjC,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;AAEAF,IAAAA,GAAG,CAACG,OAAJ,CAAYC,GAAG,IAAE;AACb,UAAGA,GAAG,KAAK,CAAX,EAAc;AACVH,QAAAA,cAAc,CAACH,IAAf,CAAoBI,KAApB;AACAA,QAAAA,KAAK,GAAG,CAAR;AACH;;AACD,UAAGE,GAAG,KAAK,CAAX,EAAc;AACVF,QAAAA,KAAK;AACR;AACJ,KARD;AASAD,IAAAA,cAAc,CAACH,IAAf,CAAoBI,KAApB;AACA,WAAOD,cAAP;AACH,GAfgB,CAAjB;AAiBA,QAAMI,OAAO,GAAGN,QAAQ,CAACL,GAAT,CAAaM,GAAG,IAAG;AAC/B,UAAMM,QAAQ,GAAIF,GAAD,IAASA,GAAG,KAAK,CAAlC;;AAEA,UAAMG,GAAG,GAAG,EAAZ;;AAEA,QAAGP,GAAG,CAACQ,KAAJ,CAAUF,QAAV,CAAH,EAAwB;AACpBC,MAAAA,GAAG,CAACT,IAAJ,CAAS;AAACW,QAAAA,IAAI,EAAC;AAAN,OAAT;AACH,KAFD,MAEO;AACH,YAAMC,SAAS,GAAGV,GAAG,CAACW,MAAJ,CAAWP,GAAG,IAAIA,GAAG,KAAK,CAA1B,CAAlB;AACAG,MAAAA,GAAG,CAACT,IAAJ,CAAS;AAACW,QAAAA,IAAI,EAACC,SAAS,CAACE,IAAV;AAAN,OAAT;AACH,KAV8B,CAY/B;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAAOL,GAAP;AACH,GApBe,CAAhB;AAsBAM,EAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AAEA,SAAOA,OAAP;AACH;KA/EuBd,I","sourcesContent":["export default function Rows(gameRows) {\n    // GET NUMBERS FOR ROWS\n    // const rowCount = gameRows.map(row=>{\n    //     let count = 0;\n    //     let sequences = [];\n    //     let continueSeq = true;\n    //     row.map(square=>{\n    //         if(square.value === false && continueSeq === true) {\n    //             continueSeq = false;\n    //             sequences.push(count);\n    //             count = 0;\n    //             console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n    //         }\n    //         if(square.value === true) {\n    //             continueSeq = true;\n    //             count++\n    //             console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n    //         }\n    //         return sequences.push(count);\n    //     })\n    //     console.log(sequences);\n    //     return sequences;\n    // })\n\n    const sequences = gameRows.map(row=>{\n        let sequences = [];\n        row.map(square=>{\n            if(square.value === false) {\n                sequences.push(0);\n            }\n            if(square.value === true) {\n                sequences.push(1);\n            }\n        })\n        return sequences;\n    });\n\n    const rowCount = sequences.map(seq =>{        \n        let countSequences = [];\n        let count = 0;\n\n        seq.forEach(num=>{\n            if(num === 0) {\n                countSequences.push(count);\n                count = 0;\n            }\n            if(num === 1) {\n                count++\n            }\n        });\n        countSequences.push(count);\n        return countSequences;\n    });\n\n    const rowNums = rowCount.map(seq=> {\n        const onlyZero = (num) => num === 0;\n\n        const obj = [];\n\n        if(seq.every(onlyZero)) {\n            obj.push({nums:0});\n        } else {\n            const cleanNums = seq.filter(num => num !== 0);\n            obj.push({nums:cleanNums.join()});\n        }\n\n        // cleanNums.map(seq=>{\n        //     return obj.push({nums:seq});\n        // })\n        // only0s.map(seq=>{\n        //     return obj.push({nums:0});\n        // })\n\n        return obj;\n    });\n\n    console.log(rowNums)\n\n    return rowNums;\n}"]},"metadata":{},"sourceType":"module"}