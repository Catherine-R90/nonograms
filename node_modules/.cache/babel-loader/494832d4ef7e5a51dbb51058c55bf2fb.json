{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Tutorial.js\";\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tutorial() {\n  const row1 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 5\n  }];\n  const row2 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 5\n  }];\n  const row3 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 5\n  }];\n  const row4 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 5\n  }];\n  const row5 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 5\n  }];\n  const gameRows = [row1, row2, row3, row4, row5];\n  const gameCols = gameRows.map((row, index) => {\n    // const col1 = [];\n    // const col2 = [];\n    // const col3 = [];\n    // const col4 = [];\n    // const col5 = [];\n    row.map(square => {\n      if (square.col === 1) {\n        const col1 = [square];\n        return col1;\n      }\n\n      if (square.col === 2) {\n        const col2 = square;\n        return col2;\n      }\n\n      if (square.col === 3) {\n        const col3 = square;\n        return col3;\n      }\n\n      if (square.col === 4) {\n        const col4 = square;\n        return col4;\n      }\n\n      if (square.col === 5) {\n        const col5 = square;\n        return col5;\n      }\n\n      const cols = [col1, col2, col3, col4, col5];\n      return cols;\n    });\n    return cols;\n  }); // GET NUMBERS FOR ROWS\n\n  const rowCount = gameRows.map(row => {\n    let continueSequence = false;\n    let count = 0;\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false && continueSequence === true) {\n        continueSequence = false;\n        sequences.push(count);\n        count = 0;\n      }\n\n      if (square.value === true) {\n        continueSequence = true;\n        count++;\n      }\n\n      return sequences.push(count);\n    });\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map((row, index) => {\n      return {\n        nums: nums,\n        row: row[index].row,\n        col: row[index].col\n      };\n    });\n    return obj;\n  }); // GET NUMBERS FOR ROWS\n  // const colCount = gameCols.map((row, index)=>{\n  //     let continueSequence = false;\n  //     let count = 0;\n  //     let sequences = []\n  //     row.map(square=>{\n  //         if(square.value === false && continueSequence === true) {\n  //             continueSequence = false;\n  //             sequences.push(count);\n  //             count = 0;\n  //         }\n  //         if(square.value === true && square.col === row[index].col) {\n  //             continueSequence = true;\n  //             count++\n  //         }\n  //         return sequences.push(count);\n  //     })\n  //     return console.log(row[index].col + \"  \" + row[index].row);\n  // })\n  // MAP ROW NUMBERS TO OBJECTS\n  // const colNums = colCount.map(seq=> {\n  //     let only1s = [];\n  //     let greaterThan1 = [];\n  //     const onlyOne = (num) => num === 1 || num === 0;\n  //     if(seq.every(onlyOne)) {\n  //         seq.map(num =>{\n  //             if(num === 1) {\n  //                 return only1s.push(num);\n  //             }\n  //         })\n  //     } else {\n  //         seq.map(num => {\n  //             return greaterThan1.push(num);\n  //         })    \n  //     }\n  //     const oneTotals = only1s.join();\n  //     const greaterTotal = greaterThan1.length;\n  //     const rawNums = `${oneTotals} ${greaterTotal}`;\n  //     const nums = rawNums.replace('0', '');\n  //     const obj = gameRows.map((row, index)=>{\n  //         return {nums:nums, row:row[index].row, col:row[index].col };\n  //     })\n  //     return obj;\n  // });\n\n  const tutorial = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(gameCols), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, this);\n}\n_c = Tutorial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tutorial\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Tutorial.js"],"names":["nanoid","Row","Board","Tutorial","row1","value","id","key","row","col","row2","row3","row4","row5","gameRows","gameCols","map","index","square","col1","col2","col3","col4","col5","cols","rowCount","continueSequence","count","sequences","push","rowNums","seq","only1s","greaterThan1","onlyOne","num","every","oneTotals","join","greaterTotal","length","rawNums","nums","replace","obj","tutorial","board","console","log"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\n\nexport default function Tutorial() {\n    const row1 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:1},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:2},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:3},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:4},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:5},\n    ];\n    const row2 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:1},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:2},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:3},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:4},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:5},\n    ];\n    const row3 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:1},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:2},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:3},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:4},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:5},\n    ];\n    const row4 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:1},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:2},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:3},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:4},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:5},\n    ];\n    const row5 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:1},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:2},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:3},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:4},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:5},\n    ];\n\n    const gameRows = [row1, row2, row3, row4, row5];\n\n    const gameCols = gameRows.map((row, index)=>{\n        // const col1 = [];\n        // const col2 = [];\n        // const col3 = [];\n        // const col4 = [];\n        // const col5 = [];\n        row.map(square=>{\n            if(square.col === 1) {\n                const col1 = [square];\n                return col1;\n            }\n            if(square.col === 2) {\n                const col2 = square;\n                return col2;\n            }\n            if(square.col === 3) {\n                const col3 = square;\n                return col3;\n            }\n            if(square.col === 4) {\n                const col4 = square;\n                return col4;\n            }\n            if(square.col === 5) {\n                const col5 = square;\n                return col5;\n            }\n            const cols = [col1, col2, col3, col4, col5];\n            return cols; \n        })\n        return cols;\n    })\n\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let continueSequence = false;\n        let count = 0;\n        let sequences = []\n        row.map(square=>{\n            if(square.value === false && continueSequence === true) {\n                continueSequence = false;\n                sequences.push(count);\n                count = 0;\n            }\n            if(square.value === true) {\n                continueSequence = true;\n                count++\n            }\n            return sequences.push(count);\n        })\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map((row, index)=>{\n            return {nums:nums, row:row[index].row, col:row[index].col };\n        })\n\n        return obj;\n    });\n\n    // GET NUMBERS FOR ROWS\n    // const colCount = gameCols.map((row, index)=>{\n    //     let continueSequence = false;\n    //     let count = 0;\n    //     let sequences = []\n    //     row.map(square=>{\n    //         if(square.value === false && continueSequence === true) {\n    //             continueSequence = false;\n    //             sequences.push(count);\n    //             count = 0;\n    //         }\n    //         if(square.value === true && square.col === row[index].col) {\n    //             continueSequence = true;\n    //             count++\n    //         }\n    //         return sequences.push(count);\n    //     })\n    //     return console.log(row[index].col + \"  \" + row[index].row);\n    // })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    // const colNums = colCount.map(seq=> {\n    //     let only1s = [];\n    //     let greaterThan1 = [];\n\n    //     const onlyOne = (num) => num === 1 || num === 0;\n\n    //     if(seq.every(onlyOne)) {\n    //         seq.map(num =>{\n    //             if(num === 1) {\n    //                 return only1s.push(num);\n    //             }\n    //         })\n    //     } else {\n    //         seq.map(num => {\n    //             return greaterThan1.push(num);\n    //         })    \n    //     }\n        \n    //     const oneTotals = only1s.join();\n    //     const greaterTotal = greaterThan1.length;\n        \n    //     const rawNums = `${oneTotals} ${greaterTotal}`;\n    //     const nums = rawNums.replace('0', '');\n\n    //     const obj = gameRows.map((row, index)=>{\n    //         return {nums:nums, row:row[index].row, col:row[index].col };\n    //     })\n\n    //     return obj;\n    // });\n\n    const tutorial = gameRows.map(row => {\n        return (\n            <Row \n                row={row}\n                id={row.id}\n                key={'row-'+nanoid()}\n            />\n        )\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} />\n    \n    return (\n        <div>\n            {console.log(gameCols)}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}