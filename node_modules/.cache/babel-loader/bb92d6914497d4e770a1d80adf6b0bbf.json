{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const [winner, declareWinner] = useState(false);\n  const bRows = gameRows.map(row => {\n    const boardRow = row.map(square => {\n      return {\n        square,\n        value: false,\n        id: \"square-\" + nanoid(),\n        key: nanoid()\n      };\n    });\n    return boardRow;\n  });\n  const [boardRows, setBoardRows] = useState(bRows);\n\n  const handleClick = (e, id) => {\n    const updatedRow = boardRows.map(row => {\n      const updatedSquare = row.map(square => {\n        if (square.id === id) {\n          if (e.type === 'click') {\n            return { ...square,\n              value: !square.value\n            };\n          } else if (e.type === 'contextmenu') {\n            e.preventDefault();\n\n            if (square.value === 'x-square') {\n              return { ...square,\n                value: false\n              };\n            } else {\n              return { ...square,\n                value: \"x-square\"\n              };\n            }\n          }\n        }\n\n        return square;\n      });\n      return updatedSquare;\n    });\n    setBoardRows(updatedRow);\n  };\n\n  const rowNums = props.rowNums.map(row => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: row.nums\n    }, \"num-\" + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  });\n  const colNums = props.colNums.map(col => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: col.nums\n    }, \"num-\" + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  });\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      handleClick: handleClick,\n      rowNums: rowNums,\n      colNums: colNums\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    const gameVals = gameRows.map(gameRow => {\n      const values = gameRow.map(square => {\n        return square.value;\n      });\n      return values;\n    });\n    const boardVals = boardRows.map(boardRow => {\n      const values = boardRow.map(square => {\n        if (square.value === \"x-square\") {\n          return false;\n        } else {\n          return square.value;\n        }\n      });\n      return values;\n    });\n    const isArray = Array.isArray(gameVals) && Array.isArray(boardVals);\n    const length = gameVals.length === boardVals.length;\n    const matchVals = JSON.stringify(boardVals) === JSON.stringify(gameVals);\n\n    if (isArray === true && length === true && matchVals === true) {\n      alert(\"Woohoo, you won!\");\n      declareWinner(set);\n    }\n  }\n\n  useEffect(() => {\n    winState();\n  });\n\n  if (!winner) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row-nums\",\n        children: rowNums\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-nums\",\n        children: colNums\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Board, \"T+aDmsEaVbqHn0s7Rv5qGemKLBI=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useEffect","useState","Row","Number","Board","props","gameRows","winner","declareWinner","bRows","map","row","boardRow","square","value","id","key","boardRows","setBoardRows","handleClick","e","updatedRow","updatedSquare","type","preventDefault","rowNums","nums","colNums","col","board","winState","gameVals","gameRow","values","boardVals","isArray","Array","length","matchVals","JSON","stringify","alert","set"],"mappings":"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","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n    const [winner, declareWinner] = useState(false);\n\n    const bRows = gameRows.map(row=>{\n        const boardRow = row.map(square=>{\n            return {square, value:false, id:\"square-\"+nanoid(), key:nanoid()}\n        })\n        return boardRow;\n    });\n\n    const [boardRows, setBoardRows] = useState(bRows);\n\n\n    const handleClick = (e, id) => {\n        const updatedRow = boardRows.map(row => {\n            const updatedSquare = row.map(square=>{\n                if(square.id === id) {\n                    if(e.type === 'click') {\n                        return {...square, value: !square.value};\n                    }\n                    else if(e.type === 'contextmenu'){\n                        e.preventDefault();\n                        if(square.value === 'x-square') {\n                            return {...square, value:false}\n                        } else {\n                            return {...square, value:\"x-square\"};\n                        }\n                    }\n                }\n                return square;\n            })\n            return updatedSquare\n        });\n        setBoardRows(updatedRow);\n    }\n\n    const rowNums = props.rowNums.map(row => {\n        return <Number number={row.nums} key={\"num-\"+nanoid()} />;\n    });\n\n    const colNums = props.colNums.map(col => {\n        return <Number number={col.nums} key={\"num-\"+nanoid()} />;\n    })\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                handleClick={handleClick}\n                rowNums={rowNums}\n                colNums={colNums}\n            />\n        );\n    });\n\n    function winState() {\n        const gameVals = gameRows.map(gameRow => {\n            const values = gameRow.map(square=>{\n                return square.value;\n            });\n            return values;\n        })\n        \n        const boardVals = boardRows.map(boardRow => {\n            const values = boardRow.map(square=>{\n                if(square.value === \"x-square\") {\n                    return false\n                } else {\n                    return square.value;\n                }\n            });\n            return values;\n        })\n\n        const isArray = Array.isArray(gameVals) && Array.isArray(boardVals);\n        const length = gameVals.length === boardVals.length;\n        const matchVals = JSON.stringify(boardVals) === JSON.stringify(gameVals);\n\n        if(isArray === true && length === true && matchVals === true) {\n            alert(\"Woohoo, you won!\");\n            declareWinner(set)\n        }\n    }\n\n    useEffect(()=>{\n        winState();\n    })\n\n    if(!winner) {\n        return (\n            <div className=\"board\">\n                <div className=\"row-nums\">{rowNums}</div>\n                <div className=\"col-nums\">{colNums}</div>\n                <div className=\"game-board\">{board}</div>\n            </div>        \n        );\n    } else {\n        return (\n            <div>\n                \n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}