{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Row.js\";\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport FalseSquare from \"./FalseSquare\";\nimport TrueSquare from \"./TrueSquare\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Row(props) {\n  // const [rows, setRows] = useState(props.row);\n  const rows = props.row;\n  const row = rows.map(square => {\n    if (square.value === true) {\n      return /*#__PURE__*/_jsxDEV(TrueSquare, {\n        value: square.value,\n        id: square.id,\n        handleClick: handleClick\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(FalseSquare, {\n        value: square.value,\n        id: square.id,\n        handleClick: handleClick\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 20\n      }, this);\n    }\n  });\n\n  const handleClick = id => {\n    const updatedRow = rows.map(square => {\n      if (square.id === id) {\n        return { ...square,\n          value: !square.value\n        };\n      }\n\n      return square;\n    });\n    setRows(updatedRow);\n    props.updateRow(updatedRow, props.row.id);\n    props.winState();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-row\",\n    children: row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_c = Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Row.js"],"names":["nanoid","useState","FalseSquare","TrueSquare","Row","props","rows","row","map","square","value","id","handleClick","updatedRow","setRows","updateRow","winState"],"mappings":";AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAC/B;AAEA,QAAMC,IAAI,GAAGD,KAAK,CAACE,GAAnB;AAEA,QAAMA,GAAG,GAAGD,IAAI,CAACE,GAAL,CAASC,MAAM,IAAI;AAC3B,QAAGA,MAAM,CAACC,KAAP,KAAiB,IAApB,EAA0B;AACtB,0BAAO,QAAC,UAAD;AACH,QAAA,KAAK,EAAED,MAAM,CAACC,KADX;AAEH,QAAA,EAAE,EAAED,MAAM,CAACE,EAFR;AAGH,QAAA,WAAW,EAAEC;AAHV,SAIEZ,MAAM,EAJR;AAAA;AAAA;AAAA;AAAA,cAAP;AAKH,KAND,MAMO;AACH,0BAAO,QAAC,WAAD;AACH,QAAA,KAAK,EAAES,MAAM,CAACC,KADX;AAEH,QAAA,EAAE,EAAED,MAAM,CAACE,EAFR;AAGH,QAAA,WAAW,EAAEC;AAHV,SAIEZ,MAAM,EAJR;AAAA;AAAA;AAAA;AAAA,cAAP;AAMH;AACJ,GAfW,CAAZ;;AAiBA,QAAMY,WAAW,GAAID,EAAD,IAAQ;AACxB,UAAME,UAAU,GAAGP,IAAI,CAACE,GAAL,CAASC,MAAM,IAAI;AAClC,UAAGA,MAAM,CAACE,EAAP,KAAcA,EAAjB,EAAqB;AACjB,eAAO,EAAC,GAAGF,MAAJ;AAAYC,UAAAA,KAAK,EAAE,CAACD,MAAM,CAACC;AAA3B,SAAP;AACH;;AACD,aAAOD,MAAP;AACH,KALkB,CAAnB;AAMAK,IAAAA,OAAO,CAACD,UAAD,CAAP;AACAR,IAAAA,KAAK,CAACU,SAAN,CAAgBF,UAAhB,EAA4BR,KAAK,CAACE,GAAN,CAAUI,EAAtC;AACAN,IAAAA,KAAK,CAACW,QAAN;AACH,GAVD;;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACKT;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KAvCuBH,G","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport FalseSquare from \"./FalseSquare\";\nimport TrueSquare from \"./TrueSquare\";\n\nexport default function Row(props) {\n    // const [rows, setRows] = useState(props.row);\n\n    const rows = props.row;\n\n    const row = rows.map(square => {\n        if(square.value === true) {\n            return <TrueSquare\n                value={square.value}\n                id={square.id}\n                handleClick={handleClick}\n                key={nanoid()} />\n        } else {\n            return <FalseSquare \n                value={square.value}\n                id={square.id}\n                handleClick={handleClick}\n                key={nanoid()}\n            />\n        }\n    });\n\n    const handleClick = (id) => {\n        const updatedRow = rows.map(square => {\n            if(square.id === id) {\n                return {...square, value: !square.value}\n            }\n            return square;\n        });\n        setRows(updatedRow);\n        props.updateRow(updatedRow, props.row.id)\n        props.winState();\n    }\n\n    return (\n        <div className=\"board-row\">\n            {row}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}