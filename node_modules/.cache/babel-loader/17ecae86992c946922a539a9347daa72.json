{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Tutorial.js\";\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tutorial() {\n  const boardRow = [row1 => [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 5\n  }], row2 => [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 5\n  }], row3 => [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 5\n  }], row4 => [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 5\n  }], row5 => [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 5\n  }]]; // const gameRows = [];\n\n  const gameCols = gameRows.map(); // GET NUMBERS FOR ROWS\n\n  const rowCount = gameRows.map(row => {\n    let continueSequence = false;\n    let count = 0;\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false && continueSequence === true) {\n        continueSequence = false;\n        sequences.push(count);\n        count = 0;\n      }\n\n      if (square.value === true) {\n        continueSequence = true;\n        count++;\n      }\n\n      return sequences.push(count);\n    });\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map(row => {\n      row.map(square => {\n        return {\n          nums: nums,\n          row: square.row,\n          col: square.col\n        };\n      });\n    });\n    return obj;\n  });\n  const tutorial = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(boardRow), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n_c = Tutorial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tutorial\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Tutorial.js"],"names":["nanoid","Row","Board","Tutorial","boardRow","row1","value","id","key","row","col","row2","row3","row4","row5","gameCols","gameRows","map","rowCount","continueSequence","count","sequences","square","push","rowNums","seq","only1s","greaterThan1","onlyOne","num","every","oneTotals","join","greaterTotal","length","rawNums","nums","replace","obj","tutorial","board","console","log"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\n\nexport default function Tutorial() {\n    const boardRow = [\n        row1=>[\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:5},\n        ],\n        row2=>[\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:5},\n        ],\n        row3=>[\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:5},\n        ],\n        row4=>[\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:5},\n        ],\n        row5=>[\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:5},\n        ]\n    ]\n\n    // const gameRows = [];\n    const gameCols = gameRows.map()\n\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let continueSequence = false;\n        let count = 0;\n        let sequences = []\n        row.map(square=>{\n            if(square.value === false && continueSequence === true) {\n                continueSequence = false;\n                sequences.push(count);\n                count = 0;\n            }\n            if(square.value === true) {\n                continueSequence = true;\n                count++\n            }\n            return sequences.push(count);\n        })\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map(row=>{\n            row.map(square=>{\n                return {nums:nums, row:square.row, col:square.col };\n            })\n        })\n\n        return obj;\n    });\n\n    const tutorial = gameRows.map(row => {\n        return (\n            <Row \n                row={row}\n                id={row.id}\n                key={'row-'+nanoid()}\n            />\n        )\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} />\n    \n    return (\n        <div>\n            {console.log(boardRow)}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}