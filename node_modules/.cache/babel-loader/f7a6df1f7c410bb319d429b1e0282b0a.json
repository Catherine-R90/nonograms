{"ast":null,"code":"export default function Columns(gameRows) {\n  // ASSIGN COL ROWS\n  const nums = gameRows.map((row, index) => row[index].col);\n  const gameCols = [];\n  nums.forEach(num => {\n    const col = [];\n    gameRows.map(row => {\n      const colNum = row.map(square => {\n        if (square.col === num) {\n          return col.push(square);\n        }\n      });\n      return colNum;\n    });\n    return gameCols.push(col);\n  }); // GET NUMBERS FOR COLS\n\n  const colCount = gameCols.map(col => {\n    let colCount = 0;\n    let colSequences = [];\n    col.map(square => {\n      {\n        if (square.value === false) {\n          colCount = 0;\n        }\n\n        if (square.value === true) {\n          colCount++;\n        }\n\n        return colSequences.push(colCount);\n      }\n    });\n    return colSequences;\n  }); // MAP COL NUMBERS TO OBJECTS\n\n  const colNums = colCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameCols.map((col, index) => {\n      return {\n        nums: nums,\n        col: col[index].row,\n        col: col[index].col\n      };\n    });\n    return obj;\n  });\n  return colNums;\n}\n_c = Columns;\n\nvar _c;\n\n$RefreshReg$(_c, \"Columns\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/ColumnHelper.js"],"names":["Columns","gameRows","nums","map","row","index","col","gameCols","forEach","num","colNum","square","push","colCount","colSequences","value","colNums","seq","only1s","greaterThan1","onlyOne","every","oneTotals","join","greaterTotal","length","rawNums","replace","obj"],"mappings":"AAAA,eAAe,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AACtC;AACA,QAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,CAAa,CAACC,GAAD,EAAMC,KAAN,KAAgBD,GAAG,CAACC,KAAD,CAAH,CAAWC,GAAxC,CAAb;AAEA,QAAMC,QAAQ,GAAG,EAAjB;AACAL,EAAAA,IAAI,CAACM,OAAL,CAAaC,GAAG,IAAE;AACd,UAAMH,GAAG,GAAG,EAAZ;AACAL,IAAAA,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AACd,YAAMM,MAAM,GAAGN,GAAG,CAACD,GAAJ,CAAQQ,MAAM,IAAE;AAC3B,YAAGA,MAAM,CAACL,GAAP,KAAeG,GAAlB,EAAuB;AACnB,iBAAOH,GAAG,CAACM,IAAJ,CAASD,MAAT,CAAP;AACH;AACJ,OAJc,CAAf;AAKA,aAAOD,MAAP;AACH,KAPD;AAQA,WAAOH,QAAQ,CAACK,IAAT,CAAcN,GAAd,CAAP;AACH,GAXD,EALsC,CAkBtC;;AACA,QAAMO,QAAQ,GAAGN,QAAQ,CAACJ,GAAT,CAAaG,GAAG,IAAE;AAC/B,QAAIO,QAAQ,GAAG,CAAf;AACA,QAAIC,YAAY,GAAG,EAAnB;AACAR,IAAAA,GAAG,CAACH,GAAJ,CAAQQ,MAAM,IAAE;AACZ;AACI,YAAGA,MAAM,CAACI,KAAP,KAAiB,KAApB,EAA2B;AACvBF,UAAAA,QAAQ,GAAG,CAAX;AACH;;AACD,YAAGF,MAAM,CAACI,KAAP,KAAiB,IAApB,EAA0B;AACtBF,UAAAA,QAAQ;AACX;;AACD,eAAOC,YAAY,CAACF,IAAb,CAAkBC,QAAlB,CAAP;AACH;AACJ,KAVD;AAWA,WAAOC,YAAP;AACH,GAfgB,CAAjB,CAnBsC,CAoCtC;;AACA,QAAME,OAAO,GAAGH,QAAQ,CAACV,GAAT,CAAac,GAAG,IAAG;AAC/B,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,YAAY,GAAG,EAAnB;;AAEA,UAAMC,OAAO,GAAIX,GAAD,IAASA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAA9C;;AAEA,QAAGQ,GAAG,CAACI,KAAJ,CAAUD,OAAV,CAAH,EAAuB;AACnBH,MAAAA,GAAG,CAACd,GAAJ,CAAQM,GAAG,IAAG;AACV,YAAGA,GAAG,KAAK,CAAX,EAAc;AACV,iBAAOS,MAAM,CAACN,IAAP,CAAYH,GAAZ,CAAP;AACH;AACJ,OAJD;AAKH,KAND,MAMO;AACHQ,MAAAA,GAAG,CAACd,GAAJ,CAAQM,GAAG,IAAI;AACX,eAAOU,YAAY,CAACP,IAAb,CAAkBH,GAAlB,CAAP;AACH,OAFD;AAGH;;AAED,UAAMa,SAAS,GAAGJ,MAAM,CAACK,IAAP,EAAlB;AACA,UAAMC,YAAY,GAAGL,YAAY,CAACM,MAAlC;AAEA,UAAMC,OAAO,GAAI,GAAEJ,SAAU,IAAGE,YAAa,EAA7C;AACA,UAAMtB,IAAI,GAAGwB,OAAO,CAACC,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAb;AAEA,UAAMC,GAAG,GAAGrB,QAAQ,CAACJ,GAAT,CAAa,CAACG,GAAD,EAAMD,KAAN,KAAc;AACnC,aAAO;AAACH,QAAAA,IAAI,EAACA,IAAN;AAAYI,QAAAA,GAAG,EAACA,GAAG,CAACD,KAAD,CAAH,CAAWD,GAA3B;AAAgCE,QAAAA,GAAG,EAACA,GAAG,CAACD,KAAD,CAAH,CAAWC;AAA/C,OAAP;AACH,KAFW,CAAZ;AAIA,WAAOsB,GAAP;AACH,GA7Be,CAAhB;AA8BA,SAAOZ,OAAP;AACH;KApEuBhB,O","sourcesContent":["export default function Columns(gameRows) {\n    // ASSIGN COL ROWS\n    const nums = gameRows.map((row, index) => row[index].col);\n\n    const gameCols = [];\n    nums.forEach(num=>{\n        const col = [];\n        gameRows.map(row=>{\n            const colNum = row.map(square=>{\n                if(square.col === num) {\n                    return col.push(square);\n                }\n            });\n            return colNum;\n        })\n        return gameCols.push(col);\n    });\n\n    // GET NUMBERS FOR COLS\n    const colCount = gameCols.map(col=>{\n        let colCount = 0;\n        let colSequences = [];\n        col.map(square=>{\n            {\n                if(square.value === false) {\n                    colCount = 0;\n                }\n                if(square.value === true) {\n                    colCount++\n                }\n                return colSequences.push(colCount);\n            }\n        });\n        return colSequences;\n    })\n\n    // MAP COL NUMBERS TO OBJECTS\n    const colNums = colCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n    \n        const onlyOne = (num) => num === 1 || num === 0;\n    \n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n    \n        const obj = gameCols.map((col, index)=>{\n            return {nums:nums, col:col[index].row, col:col[index].col };\n        })\n    \n        return obj;\n    });\n    return colNums;\n}"]},"metadata":{},"sourceType":"module"}