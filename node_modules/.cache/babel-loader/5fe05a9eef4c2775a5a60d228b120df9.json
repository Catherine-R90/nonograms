{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const bRows = gameRows.map(row => {\n    const boardRow = row.map(square => {\n      return {\n        square,\n        value: false,\n        id: \"square-\" + nanoid(),\n        key: nanoid()\n      };\n    });\n    return boardRow;\n  });\n  const [boardRows, setBoardRows] = useState(bRows); // const rawRow = new Array(props.length).fill({value:false, id:\"square-\"+nanoid()});\n  // const rows = rawRow.map(square =>{\n  //     return Object.assign({id:\"square-\"+nanoid()}, square);  \n  // });\n  // var boardRows = [];\n  // var squares = {};\n  // for(let i = 0; i < props.height; i++) {\n  //     for(let j = 0; j < props.length; j++) {\n  //         boardRows[i] = [          \n  //             squares[j] = {\n  //                 value: false, id:\"square-\"+nanoid(), key:nanoid()\n  //             }\n  //         ];\n  //     }\n  // }\n  // const cols = new Array(props.height).fill(rows);\n  // const [columns, setColumns] = useState(cols);\n\n  const handleClick = id => {\n    const updatedRow = boardRows.map(row => {\n      const updatedSquare = row.map(square => {\n        if (square.id === id) {\n          return { ...square,\n            value: !square.value\n          };\n        }\n\n        return square;\n      });\n      return updatedSquare;\n    });\n    setBoardRows(updatedRow);\n  };\n\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      handleClick: handleClick // winState={winState}\n\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length; // const gameVals = gameRows.map(gameRow => {\n    //     gameRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const boardVals = boardRows.map(boardRow => {\n    //     boardRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}.`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"taI91rsSe5axfKg7icm1DlUp8A4=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","bRows","map","row","boardRow","square","value","id","key","boardRows","setBoardRows","handleClick","updatedRow","updatedSquare","board","winState","isArray","Array","length","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AAEA,QAAMC,KAAK,GAAGD,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAC5B,UAAMC,QAAQ,GAAGD,GAAG,CAACD,GAAJ,CAAQG,MAAM,IAAE;AAC7B,aAAO;AAACA,QAAAA,MAAD;AAASC,QAAAA,KAAK,EAAC,KAAf;AAAsBC,QAAAA,EAAE,EAAC,YAAUZ,MAAM,EAAzC;AAA6Ca,QAAAA,GAAG,EAACb,MAAM;AAAvD,OAAP;AACH,KAFgB,CAAjB;AAGA,WAAOS,QAAP;AACH,GALa,CAAd;AAOA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAACK,KAAD,CAA1C,CAViC,CAYjC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,QAAMU,WAAW,GAAIJ,EAAD,IAAQ;AACxB,UAAMK,UAAU,GAAGH,SAAS,CAACP,GAAV,CAAcC,GAAG,IAAI;AACpC,YAAMU,aAAa,GAAGV,GAAG,CAACD,GAAJ,CAAQG,MAAM,IAAE;AAClC,YAAGA,MAAM,CAACE,EAAP,KAAcA,EAAjB,EAAqB;AACjB,iBAAO,EAAC,GAAGF,MAAJ;AAAYC,YAAAA,KAAK,EAAE,CAACD,MAAM,CAACC;AAA3B,WAAP;AACH;;AACD,eAAOD,MAAP;AACH,OALqB,CAAtB;AAMA,aAAOQ,aAAP;AACH,KARkB,CAAnB;AASAH,IAAAA,YAAY,CAACE,UAAD,CAAZ;AACH,GAXD;;AAaA,QAAME,KAAK,GAAGL,SAAS,CAACP,GAAV,CAAcC,GAAG,IAAI;AAC/B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,WAAW,EAAEQ,WAHjB,CAII;;AAJJ,OAES,SAAOhB,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GATa,CAAd;;AAWA,WAASoB,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,OAAO,GAAGC,KAAK,CAACD,OAAN,CAAchB,QAAd,KAA2BiB,KAAK,CAACD,OAAN,CAAcP,SAAd,CAA3C;AACA,UAAMS,MAAM,GAAGlB,QAAQ,CAACkB,MAAT,KAAoBT,SAAS,CAACS,MAA7C,CAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAAOC,OAAO,CAACC,GAAR,CAAa,aAAYJ,OAAQ,aAAYE,MAAO,GAApD,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cAEKJ;AAFL;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GApFuBhB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const bRows = gameRows.map(row=>{\n        const boardRow = row.map(square=>{\n            return {square, value:false, id:\"square-\"+nanoid(), key:nanoid()}\n        })\n        return boardRow;\n    });\n\n    const [boardRows, setBoardRows] = useState(bRows);\n\n    // const rawRow = new Array(props.length).fill({value:false, id:\"square-\"+nanoid()});\n    // const rows = rawRow.map(square =>{\n    //     return Object.assign({id:\"square-\"+nanoid()}, square);  \n    // });\n\n    // var boardRows = [];\n    // var squares = {};\n    // for(let i = 0; i < props.height; i++) {\n    //     for(let j = 0; j < props.length; j++) {\n    //         boardRows[i] = [          \n    //             squares[j] = {\n    //                 value: false, id:\"square-\"+nanoid(), key:nanoid()\n    //             }\n    //         ];\n    //     }\n    // }\n\n    // const cols = new Array(props.height).fill(rows);\n   \n    // const [columns, setColumns] = useState(cols);\n\n    const handleClick = (id) => {\n        const updatedRow = boardRows.map(row => {\n            const updatedSquare = row.map(square=>{\n                if(square.id === id) {\n                    return {...square, value: !square.value}\n                }\n                return square;\n            })\n            return updatedSquare\n        });\n        setBoardRows(updatedRow);\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                handleClick={handleClick}\n                // winState={winState}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        // const gameVals = gameRows.map(gameRow => {\n        //     gameRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const boardVals = boardRows.map(boardRow => {\n        //     boardRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}.`)\n    }\n\n    return (   \n        <div className=\"board\">\n\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}