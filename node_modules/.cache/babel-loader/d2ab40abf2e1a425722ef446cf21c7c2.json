{"ast":null,"code":"export default function Columns(gameRows) {\n  // ASSIGN COL ROWS\n  const nums = gameRows.map((row, index) => {\n    return row[index].colindex;\n  });\n  const gameCols = [];\n  nums.forEach(num => {\n    const col = [];\n    gameRows.map(row => {\n      const colNum = row.map(square => {\n        if (square.colindex === num) {\n          return col.push(square);\n        }\n      });\n      return colNum;\n    });\n    return gameCols.push(col);\n  }); // GET NUMBERS FOR COLS\n\n  const sequences = gameCols.map(col => {\n    let sequences = [];\n    col.map(square => {\n      if (square.value === false) {\n        sequences.push(0);\n      }\n\n      if (square.value === true) {\n        sequences.push(1);\n      }\n    });\n    return sequences;\n  });\n  const colCount = sequences.map(seq => {\n    let countSequences = [];\n    let count = 0;\n    seq.forEach(num => {\n      if (num === 0) {\n        countSequences.push(count);\n        count = 0;\n      }\n\n      if (num === 1) {\n        count++;\n      }\n    });\n    countSequences.push(count);\n    return countSequences;\n  });\n  const colNums = colCount.map((seq, index) => {\n    const onlyZero = num => num === 0;\n\n    const colId = index + 1;\n    console.log(colId);\n    let obj;\n\n    if (seq.every(onlyZero)) {\n      obj = {\n        nums: \"0\"\n      };\n    } else {\n      const cleanNums = seq.filter(num => num !== 0);\n      obj = {\n        nums: cleanNums.join(),\n        colId: colId\n      };\n    }\n\n    return obj;\n  });\n  return colNums;\n}\n_c = Columns;\n\nvar _c;\n\n$RefreshReg$(_c, \"Columns\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/ColumnHelper.js"],"names":["Columns","gameRows","nums","map","row","index","colindex","gameCols","forEach","num","col","colNum","square","push","sequences","value","colCount","seq","countSequences","count","colNums","onlyZero","colId","console","log","obj","every","cleanNums","filter","join"],"mappings":"AAAA,eAAe,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AACtC;AACA,QAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAT,CAAa,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACtC,WAAOD,GAAG,CAACC,KAAD,CAAH,CAAWC,QAAlB;AACH,GAFY,CAAb;AAIA,QAAMC,QAAQ,GAAG,EAAjB;AAEAL,EAAAA,IAAI,CAACM,OAAL,CAAaC,GAAG,IAAE;AACd,UAAMC,GAAG,GAAG,EAAZ;AACAT,IAAAA,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AACd,YAAMO,MAAM,GAAGP,GAAG,CAACD,GAAJ,CAAQS,MAAM,IAAE;AAC3B,YAAGA,MAAM,CAACN,QAAP,KAAoBG,GAAvB,EAA4B;AACxB,iBAAOC,GAAG,CAACG,IAAJ,CAASD,MAAT,CAAP;AACH;AACJ,OAJc,CAAf;AAKA,aAAOD,MAAP;AACH,KAPD;AAQA,WAAOJ,QAAQ,CAACM,IAAT,CAAcH,GAAd,CAAP;AACH,GAXD,EARsC,CAqBtC;;AACA,QAAMI,SAAS,GAAGP,QAAQ,CAACJ,GAAT,CAAaO,GAAG,IAAE;AAChC,QAAII,SAAS,GAAG,EAAhB;AACAJ,IAAAA,GAAG,CAACP,GAAJ,CAAQS,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACG,KAAP,KAAiB,KAApB,EAA2B;AACvBD,QAAAA,SAAS,CAACD,IAAV,CAAe,CAAf;AACH;;AACD,UAAGD,MAAM,CAACG,KAAP,KAAiB,IAApB,EAA0B;AACtBD,QAAAA,SAAS,CAACD,IAAV,CAAe,CAAf;AACH;AACJ,KAPD;AAQA,WAAOC,SAAP;AACH,GAXiB,CAAlB;AAaA,QAAME,QAAQ,GAAGF,SAAS,CAACX,GAAV,CAAcc,GAAG,IAAG;AACjC,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;AACAF,IAAAA,GAAG,CAACT,OAAJ,CAAYC,GAAG,IAAE;AACb,UAAGA,GAAG,KAAK,CAAX,EAAc;AACVS,QAAAA,cAAc,CAACL,IAAf,CAAoBM,KAApB;AACAA,QAAAA,KAAK,GAAG,CAAR;AACH;;AACD,UAAGV,GAAG,KAAK,CAAX,EAAc;AACVU,QAAAA,KAAK;AACR;AACJ,KARD;AASAD,IAAAA,cAAc,CAACL,IAAf,CAAoBM,KAApB;AACA,WAAOD,cAAP;AACH,GAdgB,CAAjB;AAgBA,QAAME,OAAO,GAAGJ,QAAQ,CAACb,GAAT,CAAa,CAACc,GAAD,EAAMZ,KAAN,KAAe;AACxC,UAAMgB,QAAQ,GAAIZ,GAAD,IAASA,GAAG,KAAK,CAAlC;;AAEA,UAAMa,KAAK,GAAGjB,KAAK,GAAG,CAAtB;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAIG,GAAJ;;AAEA,QAAGR,GAAG,CAACS,KAAJ,CAAUL,QAAV,CAAH,EAAwB;AACpBI,MAAAA,GAAG,GAAG;AAACvB,QAAAA,IAAI,EAAC;AAAN,OAAN;AACH,KAFD,MAEO;AACH,YAAMyB,SAAS,GAAGV,GAAG,CAACW,MAAJ,CAAWnB,GAAG,IAAIA,GAAG,KAAK,CAA1B,CAAlB;AACAgB,MAAAA,GAAG,GAAG;AAACvB,QAAAA,IAAI,EAACyB,SAAS,CAACE,IAAV,EAAN;AAAwBP,QAAAA,KAAK,EAACA;AAA9B,OAAN;AACH;;AAED,WAAOG,GAAP;AACH,GAfe,CAAhB;AAiBA,SAAOL,OAAP;AACH;KArEuBpB,O","sourcesContent":["export default function Columns(gameRows) {\n    // ASSIGN COL ROWS\n    const nums = gameRows.map((row, index) => {\n        return row[index].colindex\n    });\n\n    const gameCols = [];\n\n    nums.forEach(num=>{\n        const col = [];\n        gameRows.map(row=>{\n            const colNum = row.map(square=>{\n                if(square.colindex === num) {\n                    return col.push(square);\n                }\n            });\n            return colNum;\n        })\n        return gameCols.push(col);\n    });\n\n    // GET NUMBERS FOR COLS\n    const sequences = gameCols.map(col=>{\n        let sequences = [];\n        col.map(square=>{\n            if(square.value === false) {\n                sequences.push(0);\n            }\n            if(square.value === true) {\n                sequences.push(1);\n            }\n        })\n        return sequences;\n    });\n\n    const colCount = sequences.map(seq =>{        \n        let countSequences = [];\n        let count = 0;\n        seq.forEach(num=>{\n            if(num === 0) {\n                countSequences.push(count);\n                count = 0;\n            }\n            if(num === 1) {\n                count++\n            }\n        });\n        countSequences.push(count);\n        return countSequences;\n    });\n\n    const colNums = colCount.map((seq, index)=> {\n        const onlyZero = (num) => num === 0;\n\n        const colId = index + 1;\n        console.log(colId)\n        let obj;\n\n        if(seq.every(onlyZero)) {\n            obj = {nums:\"0\"};\n        } else {\n            const cleanNums = seq.filter(num => num !== 0);\n            obj = {nums:cleanNums.join(), colId:colId};\n        }\n\n        return obj;\n    });\n\n    return colNums;\n}"]},"metadata":{},"sourceType":"module"}