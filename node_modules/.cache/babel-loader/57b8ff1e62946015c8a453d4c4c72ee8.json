{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Level1.js\";\nimport React from 'react';\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Level1() {\n  const row1 = [{\n    value: false,\n    id: \"square-lvl1-1\",\n    key: nanoid(),\n    row: 1,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-lvl1-2\",\n    key: nanoid(),\n    row: 1,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-lvl1-3\",\n    key: nanoid(),\n    row: 1,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-lvl1-4\",\n    key: nanoid(),\n    row: 1,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-lvl1-5\",\n    key: nanoid(),\n    row: 1,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-lvl1-6\",\n    key: nanoid(),\n    row: 1,\n    col: 6\n  }, {\n    value: false,\n    id: \"square-lvl1-7\",\n    key: nanoid(),\n    row: 1,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-lvl1-8\",\n    key: nanoid(),\n    row: 1,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-lvl1-9\",\n    key: nanoid(),\n    row: 1,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-lvl1-10\",\n    key: nanoid(),\n    row: 1,\n    col: 10\n  }];\n  const row2 = [{\n    value: false,\n    id: \"square-lvl1-11\",\n    key: nanoid(),\n    row: 2,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-lvl1-12\",\n    key: nanoid(),\n    row: 2,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-lvl1-13\",\n    key: nanoid(),\n    row: 2,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-lvl1-14\",\n    key: nanoid(),\n    row: 2,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-lvl1-15\",\n    key: nanoid(),\n    row: 2,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-lvl1-16\",\n    key: nanoid(),\n    row: 2,\n    col: 6\n  }, {\n    value: false,\n    id: \"square-lvl1-17\",\n    key: nanoid(),\n    row: 2,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-lvl1-18\",\n    key: nanoid(),\n    row: 2,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-lvl1-19\",\n    key: nanoid(),\n    row: 2,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-lvl1-20\",\n    key: nanoid(),\n    row: 2,\n    col: 10\n  }];\n  const row3 = [{\n    value: false,\n    id: \"square-lvl1-21\",\n    key: nanoid(),\n    row: 3,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-lvl1-22\",\n    key: nanoid(),\n    row: 3,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-lvl1-23\",\n    key: nanoid(),\n    row: 3,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-lvl1-24\",\n    key: nanoid(),\n    row: 3,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-lvl1-25\",\n    key: nanoid(),\n    row: 3,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-lvl1-26\",\n    key: nanoid(),\n    row: 3,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-lvl1-27\",\n    key: nanoid(),\n    row: 3,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-lvl1-28\",\n    key: nanoid(),\n    row: 3,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-lvl1-29\",\n    key: nanoid(),\n    row: 3,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-lvl1-30\",\n    key: nanoid(),\n    row: 3,\n    col: 10\n  }];\n  const row4 = [{\n    value: false,\n    id: \"square-lvl1-31\",\n    key: nanoid(),\n    row: 4,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-lvl1-32\",\n    key: nanoid(),\n    row: 4,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-lvl1-33\",\n    key: nanoid(),\n    row: 4,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-lvl1-34\",\n    key: nanoid(),\n    row: 4,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-lvl1-35\",\n    key: nanoid(),\n    row: 4,\n    col: 5\n  }, {\n    value: true,\n    id: \"square-lvl1-36\",\n    key: nanoid(),\n    row: 4,\n    col: 6\n  }, {\n    value: false,\n    id: \"square-lvl1-37\",\n    key: nanoid(),\n    row: 4,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-lvl1-38\",\n    key: nanoid(),\n    row: 4,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-lvl1-39\",\n    key: nanoid(),\n    row: 4,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-lvl1-40\",\n    key: nanoid(),\n    row: 4,\n    col: 10\n  }];\n  const row5 = [{\n    value: false,\n    id: \"square-lvl1-41\",\n    key: nanoid(),\n    row: 5,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-lvl1-42\",\n    key: nanoid(),\n    row: 5,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-lvl1-43\",\n    key: nanoid(),\n    row: 5,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-lvl1-44\",\n    key: nanoid(),\n    row: 5,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-lvl1-45\",\n    key: nanoid(),\n    row: 5,\n    col: 5\n  }, {\n    value: true,\n    id: \"square-lvl1-46\",\n    key: nanoid(),\n    row: 5,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-lvl1-47\",\n    key: nanoid(),\n    row: 5,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-lvl1-48\",\n    key: nanoid(),\n    row: 5,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-lvl1-49\",\n    key: nanoid(),\n    row: 5,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-lvl1-50\",\n    key: nanoid(),\n    row: 5,\n    col: 10\n  }];\n  const row6 = [{\n    value: false,\n    id: \"square-lvl1-51\",\n    key: nanoid(),\n    row: 6,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-lvl1-52\",\n    key: nanoid(),\n    row: 6,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-lvl1-53\",\n    key: nanoid(),\n    row: 6,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-lvl1-54\",\n    key: nanoid(),\n    row: 6,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-lvl1-55\",\n    key: nanoid(),\n    row: 6,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-lvl1-56\",\n    key: nanoid(),\n    row: 6,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-lvl1-57\",\n    key: nanoid(),\n    row: 6,\n    col: 7\n  }, {\n    value: true,\n    id: \"square-lvl1-58\",\n    key: nanoid(),\n    row: 6,\n    col: 8\n  }, {\n    value: true,\n    id: \"square-lvl1-59\",\n    key: nanoid(),\n    row: 6,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-lvl1-60\",\n    key: nanoid(),\n    row: 6,\n    col: 10\n  }];\n  const row7 = [{\n    value: false,\n    id: \"square-lvl1-61\",\n    key: nanoid(),\n    row: 7,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-lvl1-62\",\n    key: nanoid(),\n    row: 7,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-lvl1-63\",\n    key: nanoid(),\n    row: 7,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-lvl1-64\",\n    key: nanoid(),\n    row: 7,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-lvl1-65\",\n    key: nanoid(),\n    row: 7,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-lvl1-66\",\n    key: nanoid(),\n    row: 7,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-lvl1-67\",\n    key: nanoid(),\n    row: 7,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-lvl1-68\",\n    key: nanoid(),\n    row: 7,\n    col: 8\n  }, {\n    value: true,\n    id: \"square-lvl1-69\",\n    key: nanoid(),\n    row: 7,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-lvl1-70\",\n    key: nanoid(),\n    row: 7,\n    col: 10\n  }];\n  const row8 = [{\n    value: false,\n    id: \"square-lvl1-71\",\n    key: nanoid(),\n    row: 8,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-lvl1-72\",\n    key: nanoid(),\n    row: 8,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-lvl1-73\",\n    key: nanoid(),\n    row: 8,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-lvl1-74\",\n    key: nanoid(),\n    row: 8,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-lvl1-75\",\n    key: nanoid(),\n    row: 8,\n    col: 5\n  }, {\n    value: false,\n    id: \"square-lvl1-76\",\n    key: nanoid(),\n    row: 8,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-lvl1-77\",\n    key: nanoid(),\n    row: 8,\n    col: 7\n  }, {\n    value: true,\n    id: \"square-lvl1-78\",\n    key: nanoid(),\n    row: 8,\n    col: 8\n  }, {\n    value: true,\n    id: \"square-lvl1-79\",\n    key: nanoid(),\n    row: 8,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-lvl1-80\",\n    key: nanoid(),\n    row: 8,\n    col: 10\n  }];\n  const row9 = [{\n    value: false,\n    id: \"square-lvl1-81\",\n    key: nanoid(),\n    row: 9,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-lvl1-82\",\n    key: nanoid(),\n    row: 9,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-lvl1-83\",\n    key: nanoid(),\n    row: 9,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-lvl1-84\",\n    key: nanoid(),\n    row: 9,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-lvl1-85\",\n    key: nanoid(),\n    row: 9,\n    col: 5\n  }, {\n    value: true,\n    id: \"square-lvl1-86\",\n    key: nanoid(),\n    row: 9,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-lvl1-87\",\n    key: nanoid(),\n    row: 9,\n    col: 7\n  }, {\n    value: false,\n    id: \"square-lvl1-88\",\n    key: nanoid(),\n    row: 9,\n    col: 8\n  }, {\n    value: false,\n    id: \"square-lvl1-89\",\n    key: nanoid(),\n    row: 9,\n    col: 9\n  }, {\n    value: false,\n    id: \"square-lvl1-90\",\n    key: nanoid(),\n    row: 9,\n    col: 10\n  }];\n  const row10 = [{\n    value: true,\n    id: \"square-lvl1-91\",\n    key: nanoid(),\n    row: 10,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-lvl1-92\",\n    key: nanoid(),\n    row: 10,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-lvl1-93\",\n    key: nanoid(),\n    row: 10,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-lvl1-94\",\n    key: nanoid(),\n    row: 10,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-lvl1-95\",\n    key: nanoid(),\n    row: 10,\n    col: 5\n  }, {\n    value: true,\n    id: \"square-lvl1-96\",\n    key: nanoid(),\n    row: 10,\n    col: 6\n  }, {\n    value: true,\n    id: \"square-lvl1-97\",\n    key: nanoid(),\n    row: 10,\n    col: 7\n  }, {\n    value: true,\n    id: \"square-lvl1-98\",\n    key: nanoid(),\n    row: 10,\n    col: 8\n  }, {\n    value: true,\n    id: \"square-lvl1-99\",\n    key: nanoid(),\n    row: 10,\n    col: 9\n  }, {\n    value: true,\n    id: \"square-lvl1-100\",\n    key: nanoid(),\n    row: 10,\n    col: 10\n  }];\n  const gameRows = [row1, row2, row3, row4, row5, row6, row7, row8, row9, row10]; // ASSIGN COL ROWS\n\n  const nums = gameRows.map((row, index) => row[index].col);\n  const gameCols = [];\n  nums.forEach(num => {\n    const col = [];\n    gameRows.map(row => {\n      const colNum = row.map(square => {\n        if (square.col === num) {\n          return col.push(square);\n        }\n      });\n      return colNum;\n    });\n    return gameCols.push(col);\n  }); // GET NUMBERS FOR COLS\n\n  const colCount = gameCols.map(col => {\n    let colCount = 0;\n    let colSequences = [];\n    col.map(square => {\n      {\n        if (square.value === false) {\n          colCount = 0;\n        }\n\n        if (square.value === true) {\n          colCount++;\n        } // console.log(\"id: \" + square.id + \" count: \" + count);\n\n\n        return colSequences.push(colCount);\n      }\n    });\n    return colSequences;\n  }); // MAP COL NUMBERS TO OBJECTS\n\n  const colNums = colCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameCols.map((col, index) => {\n      return {\n        nums: nums,\n        col: col[index].row,\n        col: col[index].col\n      };\n    });\n    return obj;\n  }); // GET NUMBERS FOR ROWS\n\n  const rowCount = gameRows.map(row => {\n    let count = 0;\n    let sequences = [];\n    let continueSequence = false;\n    row.map(square => {\n      if (square.value === false && continueSequence === true) {\n        sequences.push(count);\n        continueSequence = false;\n        count = 0;\n      }\n\n      if (square.value === true) {\n        continueSequence = true;\n        count++;\n      }\n\n      console.log(`id: ${square.id}, count: ${count}`);\n\n      if (count < row.length) {\n        return sequences.push(count);\n      }\n    });\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map((row, index) => {\n      return {\n        nums: nums,\n        row: row[index].row,\n        col: row[index].col\n      };\n    });\n    return obj;\n  });\n  const level1 = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums,\n    colNums: colNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(\"rows: \"), console.log(gameRows), console.log(\"count:\"), console.log(rowCount), board, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"level\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 9\n  }, this);\n}\n_c = Level1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Level1\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Level1.js"],"names":["React","nanoid","Row","Board","Level1","row1","value","id","key","row","col","row2","row3","row4","row5","row6","row7","row8","row9","row10","gameRows","nums","map","index","gameCols","forEach","num","colNum","square","push","colCount","colSequences","colNums","seq","only1s","greaterThan1","onlyOne","every","oneTotals","join","greaterTotal","length","rawNums","replace","obj","rowCount","count","sequences","continueSequence","console","log","rowNums","level1","board"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\n\nexport default function Level1() {\n    const row1 = [\n        {value: false, id:\"square-lvl1-1\" ,key:nanoid(), row:1, col:1}, \n        {value: false, id:\"square-lvl1-2\" ,key:nanoid(), row:1, col:2}, \n        {value: false, id:\"square-lvl1-3\" ,key:nanoid(), row:1, col:3}, \n        {value: false, id:\"square-lvl1-4\" ,key:nanoid(), row:1, col:4}, \n        {value: false, id:\"square-lvl1-5\" ,key:nanoid(), row:1, col:5}, \n        {value: false, id:\"square-lvl1-6\" ,key:nanoid(), row:1, col:6}, \n        {value: false, id:\"square-lvl1-7\" ,key:nanoid(), row:1, col:7}, \n        {value: false, id:\"square-lvl1-8\" ,key:nanoid(), row:1, col:8}, \n        {value: false, id:\"square-lvl1-9\" ,key:nanoid(), row:1, col:9}, \n        {value: false, id:\"square-lvl1-10\" ,key:nanoid(), row:1, col:10}\n    ];\n    const row2 = [\n        {value: false, id:\"square-lvl1-11\" ,key:nanoid(), row:2, col:1}, \n        {value: false, id:\"square-lvl1-12\" ,key:nanoid(), row:2, col:2}, \n        {value: false, id:\"square-lvl1-13\" ,key:nanoid(), row:2, col:3}, \n        {value:true, id:\"square-lvl1-14\" ,key:nanoid(), row:2, col:4}, \n        {value: false, id:\"square-lvl1-15\" ,key:nanoid(), row:2, col:5}, \n        {value: false, id:\"square-lvl1-16\" ,key:nanoid(), row:2, col:6}, \n        {value: false, id:\"square-lvl1-17\" ,key:nanoid(), row:2, col:7}, \n        {value: false, id:\"square-lvl1-18\" ,key:nanoid(), row:2, col:8}, \n        {value: false, id:\"square-lvl1-19\" ,key:nanoid(), row:2, col:9}, \n        {value: false, id:\"square-lvl1-20\" ,key:nanoid(), row:2, col:10}\n    ];\n    const row3 = [\n        {value: false, id:\"square-lvl1-21\" ,key:nanoid(), row:3, col:1}, \n        {value: false, id:\"square-lvl1-22\" ,key:nanoid(), row:3, col:2}, \n        {value:true, id:\"square-lvl1-23\" ,key:nanoid(), row:3, col:3}, \n        {value: false, id:\"square-lvl1-24\" ,key:nanoid(), row:3, col:4}, \n        {value: false, id:\"square-lvl1-25\" ,key:nanoid(), row:3, col:5}, \n        {value: false, id:\"square-lvl1-26\" ,key:nanoid(), row:3, col:6}, \n        {value:true, id:\"square-lvl1-27\" ,key:nanoid(), row:3, col:7}, \n        {value: false, id:\"square-lvl1-28\" ,key:nanoid(), row:3, col:8}, \n        {value: false, id:\"square-lvl1-29\" ,key:nanoid(), row:3, col:9}, \n        {value: false, id:\"square-lvl1-30\" ,key:nanoid(), row:3, col:10}\n    ];\n    const row4 = [\n        {value: false, id:\"square-lvl1-31\" ,key:nanoid(), row:4, col:1}, \n        {value: false, id:\"square-lvl1-32\" ,key:nanoid(), row:4, col:2}, \n        {value: false, id:\"square-lvl1-33\" ,key:nanoid(), row:4, col:3}, \n        {value:true, id:\"square-lvl1-34\" ,key:nanoid(), row:4, col:4}, \n        {value: false, id:\"square-lvl1-35\" ,key:nanoid(), row:4, col:5}, \n        {value:true, id:\"square-lvl1-36\" ,key:nanoid(), row:4, col:6}, \n        {value: false, id:\"square-lvl1-37\" ,key:nanoid(), row:4, col:7}, \n        {value: false, id:\"square-lvl1-38\" ,key:nanoid(), row:4, col:8}, \n        {value: false, id:\"square-lvl1-39\" ,key:nanoid(), row:4, col:9}, \n        {value: false, id:\"square-lvl1-40\" ,key:nanoid(), row:4, col:10}\n    ];\n    const row5 = [\n        {value: false, id:\"square-lvl1-41\" ,key:nanoid(), row:5, col:1}, \n        {value: false, id:\"square-lvl1-42\" ,key:nanoid(), row:5, col:2}, \n        {value: true, id:\"square-lvl1-43\" ,key:nanoid(), row:5, col:3}, \n        {value:true, id:\"square-lvl1-44\" ,key:nanoid(), row:5, col:4}, \n        {value: true, id:\"square-lvl1-45\" ,key:nanoid(), row:5, col:5}, \n        {value:true, id:\"square-lvl1-46\" ,key:nanoid(), row:5, col:6}, \n        {value: true, id:\"square-lvl1-47\" ,key:nanoid(), row:5, col:7}, \n        {value: false, id:\"square-lvl1-48\" ,key:nanoid(), row:5, col:8}, \n        {value: false, id:\"square-lvl1-49\" ,key:nanoid(), row:5, col:9}, \n        {value: false, id:\"square-lvl1-50\" ,key:nanoid(), row:5, col:10}\n    ];\n    const row6 = [\n        {value: false, id:\"square-lvl1-51\" ,key:nanoid(), row:6, col:1}, \n        {value: false, id:\"square-lvl1-52\" ,key:nanoid(), row:6, col:2}, \n        {value: true, id:\"square-lvl1-53\" ,key:nanoid(), row:6, col:3}, \n        {value:false, id:\"square-lvl1-54\" ,key:nanoid(), row:6, col:4}, \n        {value: false, id:\"square-lvl1-55\" ,key:nanoid(), row:6, col:5}, \n        {value:false, id:\"square-lvl1-56\" ,key:nanoid(), row:6, col:6}, \n        {value: true, id:\"square-lvl1-57\" ,key:nanoid(), row:6, col:7}, \n        {value: true, id:\"square-lvl1-58\" ,key:nanoid(), row:6, col:8}, \n        {value: true, id:\"square-lvl1-59\" ,key:nanoid(), row:6, col:9}, \n        {value: false, id:\"square-lvl1-60\" ,key:nanoid(), row:6, col:10}\n    ];\n    const row7 = [\n        {value: false, id:\"square-lvl1-61\" ,key:nanoid(), row:7, col:1}, \n        {value: false, id:\"square-lvl1-62\" ,key:nanoid(), row:7, col:2}, \n        {value: true, id:\"square-lvl1-63\" ,key:nanoid(), row:7, col:3}, \n        {value:false, id:\"square-lvl1-64\" ,key:nanoid(), row:7, col:4}, \n        {value: false, id:\"square-lvl1-65\" ,key:nanoid(), row:7, col:5}, \n        {value:false, id:\"square-lvl1-66\" ,key:nanoid(), row:7, col:6}, \n        {value: true, id:\"square-lvl1-67\" ,key:nanoid(), row:7, col:7}, \n        {value: false, id:\"square-lvl1-68\" ,key:nanoid(), row:7, col:8}, \n        {value: true, id:\"square-lvl1-69\" ,key:nanoid(), row:7, col:9}, \n        {value: false, id:\"square-lvl1-70\" ,key:nanoid(), row:7, col:10}\n    ];\n    const row8 = [\n        {value: false, id:\"square-lvl1-71\" ,key:nanoid(), row:8, col:1}, \n        {value: false, id:\"square-lvl1-72\" ,key:nanoid(), row:8, col:2}, \n        {value: true, id:\"square-lvl1-73\" ,key:nanoid(), row:8, col:3}, \n        {value:false, id:\"square-lvl1-74\" ,key:nanoid(), row:8, col:4}, \n        {value: false, id:\"square-lvl1-75\" ,key:nanoid(), row:8, col:5}, \n        {value:false, id:\"square-lvl1-76\" ,key:nanoid(), row:8, col:6}, \n        {value: true, id:\"square-lvl1-77\" ,key:nanoid(), row:8, col:7}, \n        {value: true, id:\"square-lvl1-78\" ,key:nanoid(), row:8, col:8}, \n        {value: true, id:\"square-lvl1-79\" ,key:nanoid(), row:8, col:9}, \n        {value: false, id:\"square-lvl1-80\" ,key:nanoid(), row:8, col:10}\n    ];\n    const row9 = [\n        {value: false, id:\"square-lvl1-81\" ,key:nanoid(), row:9, col:1}, \n        {value: false, id:\"square-lvl1-82\" ,key:nanoid(), row:9, col:2}, \n        {value: true, id:\"square-lvl1-83\" ,key:nanoid(), row:9, col:3}, \n        {value:true, id:\"square-lvl1-84\" ,key:nanoid(), row:9, col:4}, \n        {value: true, id:\"square-lvl1-85\" ,key:nanoid(), row:9, col:5}, \n        {value:true, id:\"square-lvl1-86\" ,key:nanoid(), row:9, col:6}, \n        {value: true, id:\"square-lvl1-87\" ,key:nanoid(), row:9, col:7}, \n        {value: false, id:\"square-lvl1-88\" ,key:nanoid(), row:9, col:8}, \n        {value: false, id:\"square-lvl1-89\" ,key:nanoid(), row:9, col:9}, \n        {value: false, id:\"square-lvl1-90\" ,key:nanoid(), row:9, col:10}\n    ];\n    const row10 = [\n        {value: true, id:\"square-lvl1-91\" ,key:nanoid(), row:10, col:1}, \n        {value: true, id:\"square-lvl1-92\" ,key:nanoid(), row:10, col:2}, \n        {value: true, id:\"square-lvl1-93\" ,key:nanoid(), row:10, col:3}, \n        {value:true, id:\"square-lvl1-94\" ,key:nanoid(), row:10, col:4}, \n        {value: true, id:\"square-lvl1-95\" ,key:nanoid(), row:10, col:5}, \n        {value:true, id:\"square-lvl1-96\" ,key:nanoid(), row:10, col:6}, \n        {value: true, id:\"square-lvl1-97\" ,key:nanoid(), row:10, col:7}, \n        {value: true, id:\"square-lvl1-98\" ,key:nanoid(), row:10, col:8}, \n        {value: true, id:\"square-lvl1-99\" ,key:nanoid(), row:10, col:9}, \n        {value: true, id:\"square-lvl1-100\" ,key:nanoid(), row:10, col:10}\n    ];\n\n    const gameRows = [row1, row2, row3, row4, row5, row6, row7, row8, row9, row10];\n\n    // ASSIGN COL ROWS\n    const nums = gameRows.map((row, index) => row[index].col);\n\n    const gameCols = [];\n    nums.forEach(num=>{\n        const col = [];\n        gameRows.map(row=>{\n            const colNum = row.map(square=>{\n                if(square.col === num) {\n                    return col.push(square);\n                }\n            });\n            return colNum;\n        })\n        return gameCols.push(col);\n    });\n\n    // GET NUMBERS FOR COLS\n    const colCount = gameCols.map(col=>{\n        let colCount = 0;\n        let colSequences = [];\n        col.map(square=>{\n            {\n                if(square.value === false) {\n                    colCount = 0;\n                }\n                if(square.value === true) {\n                    colCount++\n                }\n                // console.log(\"id: \" + square.id + \" count: \" + count);\n                return colSequences.push(colCount);\n            }\n        });\n        return colSequences;\n    })\n\n    // MAP COL NUMBERS TO OBJECTS\n    const colNums = colCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n    \n        const onlyOne = (num) => num === 1 || num === 0;\n    \n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n    \n        const obj = gameCols.map((col, index)=>{\n            return {nums:nums, col:col[index].row, col:col[index].col };\n        })\n    \n        return obj;\n    });\n\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let count = 0;\n        let sequences = [];\n        let continueSequence = false;\n        row.map(square=>{\n            if(square.value === false && continueSequence === true) {\n                sequences.push(count);\n                continueSequence = false;\n                count = 0;\n            }\n            if(square.value === true) {\n                continueSequence = true;\n                count++\n            }\n            console.log(`id: ${square.id}, count: ${count}`)\n            if(count < row.length) {\n                return sequences.push(count);\n            }\n            \n        });\n        return sequences;\n    });\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map((row, index)=>{\n            return {nums:nums, row:row[index].row, col:row[index].col };\n        })\n\n        return obj;\n    });\n\n    const level1 = gameRows.map(row=>{\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n            />\n        );\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} colNums={colNums} />\n\n    return (\n        <div>\n            {console.log(\"rows: \")}\n            {console.log(gameRows)}\n            {console.log(\"count:\")}\n            {console.log(rowCount)}\n            {board}\n            <div className='level'>\n                {/* {level1} */}    \n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}