{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\";\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  const gameRows = props.gameRows;\n  const boardRows = gameRows.map(row => {\n    row.map(square => {\n      return { ...square,\n        value: false\n      };\n    });\n    return square;\n  }); // const rawRow = new Array(props.length).fill({value:false, id:\"square-\"+nanoid()});\n  // const rows = rawRow.map(square =>{\n  //     return Object.assign({id:\"square-\"+nanoid()}, square);  \n  // });\n  // var boardRows = [];\n  // var squares = {};\n  // for(let i = 0; i < props.height; i++) {\n  //     for(let j = 0; j < props.length; j++) {\n  //         boardRows[i] = [          \n  //             squares[j] = {\n  //                 value: false, id:\"square-\"+nanoid(), key:nanoid()\n  //             }\n  //         ];\n  //     }\n  // }\n  // const [boardRows, setBoardRows] = useState(rows);\n  // const cols = new Array(props.height).fill(rows);\n  // const [columns, setColumns] = useState(cols);\n\n  const updateRow = id => {// const updatedRow = boardRows.map(square => {\n    //     if(square.id === id) {\n    //         return {...square, value:!square.value}\n    //     }\n    //     return square;\n    // })\n    // const updatedCol = \n    // setBoardRows(updatedRow);\n    // setColumns(updatedCol);\n  };\n\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      winState: winState,\n      updateRow: updateRow // id={row.id}\n\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length; // const gameVals = gameRows.map(gameRow => {\n    //     gameRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const boardVals = boardRows.map(boardRow => {\n    //     boardRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}.`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [console.log(\"board rows: \"), console.log(boardRows), console.log(\"squares: \"), console.log(squares), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","boardRows","map","row","square","value","updateRow","id","board","winState","isArray","Array","length","console","log","squares"],"mappings":";AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACjC,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AAEA,QAAMC,SAAS,GAAGD,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAChCA,IAAAA,GAAG,CAACD,GAAJ,CAAQE,MAAM,IAAI;AACd,aAAO,EAAC,GAAGA,MAAJ;AAAYC,QAAAA,KAAK,EAAC;AAAlB,OAAP;AACH,KAFD;AAGA,WAAOD,MAAP;AACH,GALiB,CAAlB,CAHiC,CAUjC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;;AAEA,QAAME,SAAS,GAAIC,EAAD,IAAO,CACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAVD;;AAYA,QAAMC,KAAK,GAAGP,SAAS,CAACC,GAAV,CAAcC,GAAG,IAAI;AAC/B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,QAAQ,EAAEM,QAHd;AAII,MAAA,SAAS,EAAEH,SAJf,CAKI;;AALJ,OAES,SAAOX,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAVa,CAAd;;AAYA,WAASc,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,OAAO,GAAGC,KAAK,CAACD,OAAN,CAAcV,QAAd,KAA2BW,KAAK,CAACD,OAAN,CAAcT,SAAd,CAA3C;AACA,UAAMW,MAAM,GAAGZ,QAAQ,CAACY,MAAT,KAAoBX,SAAS,CAACW,MAA7C,CAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAAOC,OAAO,CAACC,GAAR,CAAa,aAAYJ,OAAQ,aAAYE,MAAO,GAApD,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACKC,OAAO,CAACC,GAAR,CAAY,cAAZ,CADL,EAEKD,OAAO,CAACC,GAAR,CAAYb,SAAZ,CAFL,EAGKY,OAAO,CAACC,GAAR,CAAY,WAAZ,CAHL,EAIKD,OAAO,CAACC,GAAR,CAAYC,OAAZ,CAJL,EAMKP,KANL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;KAzFuBV,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const boardRows = gameRows.map(row=>{\n        row.map(square => {\n            return {...square, value:false}\n        })\n        return square;\n    });\n\n    // const rawRow = new Array(props.length).fill({value:false, id:\"square-\"+nanoid()});\n    // const rows = rawRow.map(square =>{\n    //     return Object.assign({id:\"square-\"+nanoid()}, square);  \n    // });\n\n    // var boardRows = [];\n    // var squares = {};\n    // for(let i = 0; i < props.height; i++) {\n    //     for(let j = 0; j < props.length; j++) {\n    //         boardRows[i] = [          \n    //             squares[j] = {\n    //                 value: false, id:\"square-\"+nanoid(), key:nanoid()\n    //             }\n    //         ];\n    //     }\n    // }\n\n\n    // const [boardRows, setBoardRows] = useState(rows);\n\n    // const cols = new Array(props.height).fill(rows);\n   \n    // const [columns, setColumns] = useState(cols);\n\n    const updateRow = (id) =>{\n        // const updatedRow = boardRows.map(square => {\n        //     if(square.id === id) {\n        //         return {...square, value:!square.value}\n        //     }\n        //     return square;\n        // })\n        // const updatedCol = \n        // setBoardRows(updatedRow);\n        // setColumns(updatedCol);\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                winState={winState}\n                updateRow={updateRow}\n                // id={row.id}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        // const gameVals = gameRows.map(gameRow => {\n        //     gameRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const boardVals = boardRows.map(boardRow => {\n        //     boardRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}.`)\n    }\n\n    return (   \n        <div className=\"board\">\n            {console.log(\"board rows: \")}\n            {console.log(boardRows)}\n            {console.log(\"squares: \")}\n            {console.log(squares)}\n\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}