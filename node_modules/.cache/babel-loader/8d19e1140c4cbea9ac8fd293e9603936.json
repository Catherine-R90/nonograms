{"ast":null,"code":"import { nanoid } from \"nanoid\";\nexport default function RowObject(rawRows) {\n  const gameRows = [];\n  rawRows.map((rawRow, index) => {\n    const rowNum = index + 1;\n    const row = [];\n    rawRow.map((square, index) => {\n      const colNum = index + 1;\n\n      if (square === true) {\n        row.push({\n          value: true,\n          id: \"square-\" + nanoid(),\n          row: rowNum,\n          col: colNum\n        });\n      } else {\n        row.push({\n          value: false,\n          id: \"square-\" + nanoid(),\n          row: rowNum,\n          col: colNum\n        });\n      }\n    }); // const nums = [];\n    // for(let i = 1; i <= row.length; i++) {\n    //     nums.push(i);\n    // }\n    // nums.forEach(num=>{\n    //     row.map(square=>{\n    //         return square.row = num;\n    //     })\n    // })\n\n    gameRows.push(row);\n  });\n  console.log(gameRows); // return gameRows;\n}\n_c = RowObject;\n\nvar _c;\n\n$RefreshReg$(_c, \"RowObject\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/RowObject.js"],"names":["nanoid","RowObject","rawRows","gameRows","map","rawRow","index","rowNum","row","square","colNum","push","value","id","col","console","log"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,eAAe,SAASC,SAAT,CAAoBC,OAApB,EAA6B;AACxC,QAAMC,QAAQ,GAAG,EAAjB;AACAD,EAAAA,OAAO,CAACE,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAiB;AACzB,UAAMC,MAAM,GAAGD,KAAK,GAAC,CAArB;AACA,UAAME,GAAG,GAAG,EAAZ;AACAH,IAAAA,MAAM,CAACD,GAAP,CAAW,CAACK,MAAD,EAASH,KAAT,KAAiB;AACxB,YAAMI,MAAM,GAAGJ,KAAK,GAAC,CAArB;;AACA,UAAGG,MAAM,KAAI,IAAb,EAAmB;AACfD,QAAAA,GAAG,CAACG,IAAJ,CAAS;AAACC,UAAAA,KAAK,EAAC,IAAP;AAAaC,UAAAA,EAAE,EAAC,YAAUb,MAAM,EAAhC;AAAoCQ,UAAAA,GAAG,EAACD,MAAxC;AAAgDO,UAAAA,GAAG,EAACJ;AAApD,SAAT;AACH,OAFD,MAEO;AACHF,QAAAA,GAAG,CAACG,IAAJ,CAAS;AAACC,UAAAA,KAAK,EAAC,KAAP;AAAcC,UAAAA,EAAE,EAAC,YAAUb,MAAM,EAAjC;AAAqCQ,UAAAA,GAAG,EAACD,MAAzC;AAAiDO,UAAAA,GAAG,EAACJ;AAArD,SAAT;AACH;AACJ,KAPD,EAHyB,CAYzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAP,IAAAA,QAAQ,CAACQ,IAAT,CAAcH,GAAd;AACH,GAvBD;AAyBAO,EAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ,EA3BwC,CA4BxC;AACH;KA7BuBF,S","sourcesContent":["import { nanoid } from \"nanoid\";\n\nexport default function RowObject (rawRows) {\n    const gameRows = [];\n    rawRows.map((rawRow, index)=>{\n        const rowNum = index+1;\n        const row = [];\n        rawRow.map((square, index)=>{\n            const colNum = index+1;\n            if(square=== true) {\n                row.push({value:true, id:\"square-\"+nanoid(), row:rowNum, col:colNum},);\n            } else {\n                row.push({value:false, id:\"square-\"+nanoid(), row:rowNum, col:colNum});\n            }\n        })\n\n        // const nums = [];\n        // for(let i = 1; i <= row.length; i++) {\n        //     nums.push(i);\n        // }\n        // nums.forEach(num=>{\n        //     row.map(square=>{\n        //         return square.row = num;\n        //     })\n        // })\n\n        gameRows.push(row);\n    });\n    \n    console.log(gameRows);\n    // return gameRows;\n}"]},"metadata":{},"sourceType":"module"}