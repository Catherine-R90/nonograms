{"ast":null,"code":"export default function Rows(gameRows) {\n  // GET NUMBERS FOR ROWS\n  // const rowCount = gameRows.map(row=>{\n  //     let count = 0;\n  //     let sequences = [];\n  //     let continueSeq = true;\n  //     row.map(square=>{\n  //         if(square.value === false && continueSeq === true) {\n  //             continueSeq = false;\n  //             sequences.push(count);\n  //             count = 0;\n  //             console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n  //         }\n  //         if(square.value === true) {\n  //             continueSeq = true;\n  //             count++\n  //             console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n  //         }\n  //         return sequences.push(count);\n  //     })\n  //     console.log(sequences);\n  //     return sequences;\n  // })\n  const sequences = gameRows.map(row => {\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false) {\n        sequences.push(0);\n      }\n\n      if (square.value === true) {\n        sequences.push(1);\n      }\n    });\n    return sequences;\n  });\n  const rowCount = sequences.map(seq => {\n    let countSequences = [];\n    let count = 0;\n    seq.forEach(num => {\n      if (num === 0) {\n        countSequences.push(count);\n        count = 0;\n      }\n\n      if (num === 1) {\n        count++;\n      }\n    });\n    countSequences.push(count);\n    return countSequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n  // const rowNums = rowCount.map(seq=> {\n  //     console.log(seq);\n  //     let only1s = [];\n  //     let only0s = []\n  //     let greaterThan1 = [];\n  //     const onlyOne = (num) => num === 1 || num === 0;\n  //     const onlyZero = (num) => num === 0;\n  //     if(seq.every(onlyOne)) {\n  //         seq.map(num =>{\n  //             if(num === 1) {\n  //                 return only1s.push(num);\n  //             }\n  //         });\n  //     }\n  //     if(seq.every(onlyZero)) {\n  //         seq.map(num=>{\n  //             return only0s.push(num);\n  //         });\n  //     } else {\n  //         seq.map(num => {\n  //             return greaterThan1.push(num);\n  //         })    \n  //     }\n  //     const oneTotals = only1s.join();\n  //     const greaterTotal = greaterThan1.length;\n  //     const rawNums = `${oneTotals} ${greaterTotal}`;\n  //     const nums = rawNums.replace('0', '');\n  //     const obj = gameRows.map((row, index)=>{\n  //         return {nums:nums, row:row[index].row, col:row[index].col };\n  //     })\n  //     return obj;\n  // });\n\n  const rowNums = rowCount.map(seq => {\n    const only0s = [];\n\n    const onlyZero = num => num === 0;\n\n    if (seq.every(onlyZero)) {\n      seq.map(num => {\n        return only0s.push(num);\n      });\n    }\n\n    const cleanNums = seq.filter(num => num != 0); // const nums = [cleanNums, only0s]\n\n    const obj = [];\n    cleanNums.map(seq => {\n      return obj.push({\n        nums: seq\n      });\n    });\n    only0s.map(seq => {\n      return obj.push({\n        nums: seq\n      });\n    });\n    console.log(obj);\n    return obj;\n  });\n  return rowNums;\n}\n_c = Rows;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rows\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/RowHelper.js"],"names":["Rows","gameRows","sequences","map","row","square","value","push","rowCount","seq","countSequences","count","forEach","num","rowNums","only0s","onlyZero","every","cleanNums","filter","obj","nums","console","log"],"mappings":"AAAA,eAAe,SAASA,IAAT,CAAcC,QAAd,EAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,SAAS,GAAGD,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAChC,QAAIF,SAAS,GAAG,EAAhB;AACAE,IAAAA,GAAG,CAACD,GAAJ,CAAQE,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACC,KAAP,KAAiB,KAApB,EAA2B;AACvBJ,QAAAA,SAAS,CAACK,IAAV,CAAe,CAAf;AACH;;AACD,UAAGF,MAAM,CAACC,KAAP,KAAiB,IAApB,EAA0B;AACtBJ,QAAAA,SAAS,CAACK,IAAV,CAAe,CAAf;AACH;AACJ,KAPD;AAQA,WAAOL,SAAP;AACH,GAXiB,CAAlB;AAaA,QAAMM,QAAQ,GAAGN,SAAS,CAACC,GAAV,CAAcM,GAAG,IAAG;AACjC,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;AAEAF,IAAAA,GAAG,CAACG,OAAJ,CAAYC,GAAG,IAAE;AACb,UAAGA,GAAG,KAAK,CAAX,EAAc;AACVH,QAAAA,cAAc,CAACH,IAAf,CAAoBI,KAApB;AACAA,QAAAA,KAAK,GAAG,CAAR;AACH;;AACD,UAAGE,GAAG,KAAK,CAAX,EAAc;AACVF,QAAAA,KAAK;AACR;AACJ,KARD;AASAD,IAAAA,cAAc,CAACH,IAAf,CAAoBI,KAApB;AACA,WAAOD,cAAP;AACH,GAfgB,CAAjB,CArCmC,CAsDnC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA,QAAMI,OAAO,GAAGN,QAAQ,CAACL,GAAT,CAAaM,GAAG,IAAG;AAC/B,UAAMM,MAAM,GAAG,EAAf;;AACA,UAAMC,QAAQ,GAAIH,GAAD,IAASA,GAAG,KAAK,CAAlC;;AAEA,QAAGJ,GAAG,CAACQ,KAAJ,CAAUD,QAAV,CAAH,EAAwB;AACpBP,MAAAA,GAAG,CAACN,GAAJ,CAAQU,GAAG,IAAE;AACT,eAAOE,MAAM,CAACR,IAAP,CAAYM,GAAZ,CAAP;AACH,OAFD;AAGH;;AAED,UAAMK,SAAS,GAAGT,GAAG,CAACU,MAAJ,CAAWN,GAAG,IAAIA,GAAG,IAAI,CAAzB,CAAlB,CAV+B,CAa/B;;AAEA,UAAMO,GAAG,GAAG,EAAZ;AACAF,IAAAA,SAAS,CAACf,GAAV,CAAcM,GAAG,IAAE;AACf,aAAOW,GAAG,CAACb,IAAJ,CAAS;AAACc,QAAAA,IAAI,EAACZ;AAAN,OAAT,CAAP;AACH,KAFD;AAGAM,IAAAA,MAAM,CAACZ,GAAP,CAAWM,GAAG,IAAE;AACZ,aAAOW,GAAG,CAACb,IAAJ,CAAS;AAACc,QAAAA,IAAI,EAACZ;AAAN,OAAT,CAAP;AACH,KAFD;AAIAa,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAEA,WAAOA,GAAP;AACH,GA1Be,CAAhB;AA4BA,SAAON,OAAP;AACH;KA3HuBd,I","sourcesContent":["export default function Rows(gameRows) {\n    // GET NUMBERS FOR ROWS\n    // const rowCount = gameRows.map(row=>{\n    //     let count = 0;\n    //     let sequences = [];\n    //     let continueSeq = true;\n    //     row.map(square=>{\n    //         if(square.value === false && continueSeq === true) {\n    //             continueSeq = false;\n    //             sequences.push(count);\n    //             count = 0;\n    //             console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n    //         }\n    //         if(square.value === true) {\n    //             continueSeq = true;\n    //             count++\n    //             console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n    //         }\n    //         return sequences.push(count);\n    //     })\n    //     console.log(sequences);\n    //     return sequences;\n    // })\n\n    const sequences = gameRows.map(row=>{\n        let sequences = [];\n        row.map(square=>{\n            if(square.value === false) {\n                sequences.push(0);\n            }\n            if(square.value === true) {\n                sequences.push(1);\n            }\n        })\n        return sequences;\n    });\n\n    const rowCount = sequences.map(seq =>{        \n        let countSequences = [];\n        let count = 0;\n\n        seq.forEach(num=>{\n            if(num === 0) {\n                countSequences.push(count);\n                count = 0;\n            }\n            if(num === 1) {\n                count++\n            }\n        });\n        countSequences.push(count);\n        return countSequences;\n    });\n\n    // MAP ROW NUMBERS TO OBJECTS\n    // const rowNums = rowCount.map(seq=> {\n    //     console.log(seq);\n    //     let only1s = [];\n    //     let only0s = []\n    //     let greaterThan1 = [];\n\n    //     const onlyOne = (num) => num === 1 || num === 0;\n    //     const onlyZero = (num) => num === 0;\n\n    //     if(seq.every(onlyOne)) {\n    //         seq.map(num =>{\n    //             if(num === 1) {\n    //                 return only1s.push(num);\n    //             }\n    //         });\n    //     }\n    //     if(seq.every(onlyZero)) {\n    //         seq.map(num=>{\n    //             return only0s.push(num);\n    //         });\n    //     } else {\n    //         seq.map(num => {\n    //             return greaterThan1.push(num);\n    //         })    \n    //     }\n        \n    //     const oneTotals = only1s.join();\n    //     const greaterTotal = greaterThan1.length;\n        \n    //     const rawNums = `${oneTotals} ${greaterTotal}`;\n    //     const nums = rawNums.replace('0', '');\n\n    //     const obj = gameRows.map((row, index)=>{\n    //         return {nums:nums, row:row[index].row, col:row[index].col };\n    //     })\n\n    //     return obj;\n    // });\n\n    const rowNums = rowCount.map(seq=> {\n        const only0s = [];\n        const onlyZero = (num) => num === 0;\n\n        if(seq.every(onlyZero)) {\n            seq.map(num=>{\n                return only0s.push(num);\n            });\n        } \n\n        const cleanNums = seq.filter(num => num != 0);\n\n        \n        // const nums = [cleanNums, only0s]\n        \n        const obj = [];\n        cleanNums.map(seq=>{\n            return obj.push({nums:seq});\n        })\n        only0s.map(seq=>{\n            return obj.push({nums:seq});\n        })\n\n        console.log(obj);\n\n        return obj;\n    });\n\n    return rowNums;\n}"]},"metadata":{},"sourceType":"module"}