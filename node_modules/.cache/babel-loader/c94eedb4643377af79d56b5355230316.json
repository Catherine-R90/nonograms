{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Number.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Number(props) {\n  const gameRows = props.gameRows; // ASSIGN COL ROWS\n\n  const nums = gameRows.map((row, index) => row[index].col);\n  const gameCols = [];\n  nums.forEach(num => {\n    const col = [];\n    gameRows.map(row => {\n      const colNum = row.map(square => {\n        if (square.col === num) {\n          return col.push(square);\n        }\n      });\n      return colNum;\n    });\n    return gameCols.push(col);\n  }); // GET NUMBERS FOR COLS\n\n  const colCount = gameCols.map(col => {\n    let continueColSequence = false;\n    let colCount = 0;\n    let colSequences = [];\n    col.map(square => {\n      if (square.value === false && continueColSequence === true) {\n        continueColSequence = false;\n        colSequences.push(colCount);\n        colCount = 0;\n      }\n\n      if (square.value === true) {\n        continueColSequence = true;\n        colCount++;\n      }\n\n      if (colSequences.length < gameCols.length) {\n        return colSequences.push(colCount);\n      } else {\n        return;\n      }\n    });\n    return colSequences;\n  }); // MAP COL NUMBERS TO OBJECTS\n\n  const colNums = colCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameCols.map((col, index) => {\n      return {\n        nums: nums,\n        col: col[index].row,\n        col: col[index].col\n      };\n    });\n    return obj;\n  }); // GET NUMBERS FOR ROWS\n\n  const rowCount = gameRows.map(row => {\n    let continueSequence = false;\n    let count = 0;\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false && continueSequence === true) {\n        continueSequence = false;\n        sequences.push(count);\n        count = 0;\n      }\n\n      if (square.value === true) {\n        continueSequence = true;\n        count++;\n      }\n\n      return sequences.push(count);\n    });\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map((row, index) => {\n      return {\n        nums: nums,\n        row: row[index].row,\n        col: row[index].col\n      };\n    });\n    return obj;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"number\",\n    children: props.number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n_c = Number;\n\nvar _c;\n\n$RefreshReg$(_c, \"Number\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Number.js"],"names":["Number","props","gameRows","nums","map","row","index","col","gameCols","forEach","num","colNum","square","push","colCount","continueColSequence","colSequences","value","length","colNums","seq","only1s","greaterThan1","onlyOne","every","oneTotals","join","greaterTotal","rawNums","replace","obj","rowCount","continueSequence","count","sequences","rowNums","number"],"mappings":"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","sourcesContent":["export default function Number(props) {\n    const gameRows = props.gameRows;\n    // ASSIGN COL ROWS\n    const nums = gameRows.map((row, index) => row[index].col);\n\n    const gameCols = [];\n    nums.forEach(num=>{\n        const col = [];\n        gameRows.map(row=>{\n            const colNum = row.map(square=>{\n                if(square.col === num) {\n                    return col.push(square);\n                }\n            });\n            return colNum;\n        })\n        return gameCols.push(col);\n    });\n\n    // GET NUMBERS FOR COLS\n    const colCount = gameCols.map(col=>{\n        let continueColSequence = false;\n        let colCount = 0;\n        let colSequences = []\n        col.map(square=>{\n            if(square.value === false && continueColSequence === true) {\n                continueColSequence = false;\n                colSequences.push(colCount);\n                colCount = 0;\n            }\n            if(square.value === true) {\n                continueColSequence = true;\n                colCount++\n            }\n            if(colSequences.length < gameCols.length) {\n                return colSequences.push(colCount);\n            } else {\n                return;\n            }\n        });\n        return colSequences;\n    })\n\n    // MAP COL NUMBERS TO OBJECTS\n    const colNums = colCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n    \n        const onlyOne = (num) => num === 1 || num === 0;\n    \n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n    \n        const obj = gameCols.map((col, index)=>{\n            return {nums:nums, col:col[index].row, col:col[index].col };\n        })\n    \n        return obj;\n    });\n\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let continueSequence = false;\n        let count = 0;\n        let sequences = []\n        row.map(square=>{\n            if(square.value === false && continueSequence === true) {\n                continueSequence = false;\n                sequences.push(count);\n                count = 0;\n            }\n            if(square.value === true) {\n                continueSequence = true;\n                count++\n            }\n            return sequences.push(count);\n        })\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map((row, index)=>{\n            return {nums:nums, row:row[index].row, col:row[index].col };\n        })\n\n        return obj;\n    });\n\n    return (\n        <div className=\"number\">\n            {props.number}\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}