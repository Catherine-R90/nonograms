{"ast":null,"code":"import { nanoid } from \"nanoid\";\nexport default function RowHelper() {\n  const RowObject = rawRows => {\n    const gameRows = rawRows.map(rawRow => {\n      const row = [];\n\n      for (let i = 1; i <= rawRows.length; i++) {\n        rawRow.map(square => {\n          row.push({\n            value: square,\n            id: \"square-\" + nanoid(),\n            key: nanoid(),\n            row: i,\n            col: ''\n          });\n        });\n        console.log(row);\n      }\n\n      return row;\n    });\n    return gameRows;\n    console.log(gameRows);\n  };\n\n  const Rows = gameRows => {\n    const sequences = gameRows.map(row => {\n      let sequences = [];\n      row.map(square => {\n        if (square.value === false) {\n          sequences.push(0);\n        }\n\n        if (square.value === true) {\n          sequences.push(1);\n        }\n      });\n      return sequences;\n    });\n    const rowCount = sequences.map(seq => {\n      let countSequences = [];\n      let count = 0;\n      seq.forEach(num => {\n        if (num === 0) {\n          countSequences.push(count);\n          count = 0;\n        }\n\n        if (num === 1) {\n          count++;\n        }\n      });\n      countSequences.push(count);\n      return countSequences;\n    });\n    const rowNums = rowCount.map(seq => {\n      const onlyZero = num => num === 0;\n\n      let obj;\n\n      if (seq.every(onlyZero)) {\n        obj = {\n          nums: \"0\"\n        };\n      } else {\n        const cleanNums = seq.filter(num => num !== 0);\n        obj = {\n          nums: cleanNums.join()\n        };\n      }\n\n      return obj;\n    });\n    return rowNums;\n  };\n}\n_c = RowHelper;\n\nvar _c;\n\n$RefreshReg$(_c, \"RowHelper\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/RowHelper.js"],"names":["nanoid","RowHelper","RowObject","rawRows","gameRows","map","rawRow","row","i","length","square","push","value","id","key","col","console","log","Rows","sequences","rowCount","seq","countSequences","count","forEach","num","rowNums","onlyZero","obj","every","nums","cleanNums","filter","join"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,eAAe,SAASC,SAAT,GAAsB;AACjC,QAAMC,SAAS,GAAIC,OAAD,IAAa;AAC3B,UAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAR,CAAYC,MAAM,IAAE;AACjC,YAAMC,GAAG,GAAG,EAAZ;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIL,OAAO,CAACM,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCF,QAAAA,MAAM,CAACD,GAAP,CAAWK,MAAM,IAAE;AACfH,UAAAA,GAAG,CAACI,IAAJ,CAAS;AAACC,YAAAA,KAAK,EAACF,MAAP;AAAeG,YAAAA,EAAE,EAAC,YAAUb,MAAM,EAAlC;AAAsCc,YAAAA,GAAG,EAACd,MAAM,EAAhD;AAAoDO,YAAAA,GAAG,EAACC,CAAxD;AAA2DO,YAAAA,GAAG,EAAC;AAA/D,WAAT;AACH,SAFD;AAGAC,QAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ;AACH;;AAED,aAAOA,GAAP;AACH,KAXgB,CAAjB;AAYA,WAAOH,QAAP;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYb,QAAZ;AACH,GAfD;;AAiBA,QAAMc,IAAI,GAAId,QAAD,IAAc;AAEvB,UAAMe,SAAS,GAAGf,QAAQ,CAACC,GAAT,CAAaE,GAAG,IAAE;AAChC,UAAIY,SAAS,GAAG,EAAhB;AACAZ,MAAAA,GAAG,CAACF,GAAJ,CAAQK,MAAM,IAAE;AACZ,YAAGA,MAAM,CAACE,KAAP,KAAiB,KAApB,EAA2B;AACvBO,UAAAA,SAAS,CAACR,IAAV,CAAe,CAAf;AACH;;AACD,YAAGD,MAAM,CAACE,KAAP,KAAiB,IAApB,EAA0B;AACtBO,UAAAA,SAAS,CAACR,IAAV,CAAe,CAAf;AACH;AACJ,OAPD;AAQA,aAAOQ,SAAP;AACH,KAXiB,CAAlB;AAaA,UAAMC,QAAQ,GAAGD,SAAS,CAACd,GAAV,CAAcgB,GAAG,IAAG;AACjC,UAAIC,cAAc,GAAG,EAArB;AACA,UAAIC,KAAK,GAAG,CAAZ;AAEAF,MAAAA,GAAG,CAACG,OAAJ,CAAYC,GAAG,IAAE;AACb,YAAGA,GAAG,KAAK,CAAX,EAAc;AACVH,UAAAA,cAAc,CAACX,IAAf,CAAoBY,KAApB;AACAA,UAAAA,KAAK,GAAG,CAAR;AACH;;AACD,YAAGE,GAAG,KAAK,CAAX,EAAc;AACVF,UAAAA,KAAK;AACR;AACJ,OARD;AASAD,MAAAA,cAAc,CAACX,IAAf,CAAoBY,KAApB;AACA,aAAOD,cAAP;AACH,KAfgB,CAAjB;AAiBA,UAAMI,OAAO,GAAGN,QAAQ,CAACf,GAAT,CAAagB,GAAG,IAAG;AAC/B,YAAMM,QAAQ,GAAIF,GAAD,IAASA,GAAG,KAAK,CAAlC;;AAEA,UAAIG,GAAJ;;AAEA,UAAGP,GAAG,CAACQ,KAAJ,CAAUF,QAAV,CAAH,EAAwB;AACpBC,QAAAA,GAAG,GAAG;AAACE,UAAAA,IAAI,EAAC;AAAN,SAAN;AACH,OAFD,MAEO;AACH,cAAMC,SAAS,GAAGV,GAAG,CAACW,MAAJ,CAAWP,GAAG,IAAIA,GAAG,KAAK,CAA1B,CAAlB;AACAG,QAAAA,GAAG,GAAG;AAACE,UAAAA,IAAI,EAACC,SAAS,CAACE,IAAV;AAAN,SAAN;AACH;;AAED,aAAOL,GAAP;AACH,KAbe,CAAhB;AAeA,WAAOF,OAAP;AACH,GAhDD;AAkDH;KApEuBzB,S","sourcesContent":["import { nanoid } from \"nanoid\";\n\nexport default function RowHelper () {\n    const RowObject = (rawRows) => {\n        const gameRows = rawRows.map(rawRow=>{\n            const row = [];\n    \n            for(let i = 1; i <= rawRows.length; i++) {\n                rawRow.map(square=>{\n                    row.push({value:square, id:\"square-\"+nanoid(), key:nanoid(), row:i, col:''})\n                })\n                console.log(row);\n            }\n            \n            return row;\n        })\n        return gameRows;\n        console.log(gameRows);       \n    }\n        \n    const Rows = (gameRows) => {    \n        \n        const sequences = gameRows.map(row=>{\n            let sequences = [];\n            row.map(square=>{\n                if(square.value === false) {\n                    sequences.push(0);\n                }\n                if(square.value === true) {\n                    sequences.push(1);\n                }\n            })\n            return sequences;\n        });\n    \n        const rowCount = sequences.map(seq =>{        \n            let countSequences = [];\n            let count = 0;\n    \n            seq.forEach(num=>{\n                if(num === 0) {\n                    countSequences.push(count);\n                    count = 0;\n                }\n                if(num === 1) {\n                    count++\n                }\n            });\n            countSequences.push(count);\n            return countSequences;\n        });\n    \n        const rowNums = rowCount.map(seq=> {\n            const onlyZero = (num) => num === 0;\n    \n            let obj;\n    \n            if(seq.every(onlyZero)) {\n                obj = {nums:\"0\"};\n            } else {\n                const cleanNums = seq.filter(num => num !== 0);\n                obj = {nums:cleanNums.join()};\n            }\n    \n            return obj;\n        });\n    \n        return rowNums;\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}