{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const bRows = gameRows.map(row => {\n    const boardRow = row.map(square => {\n      return {\n        square,\n        value: false,\n        id: \"square-\" + nanoid(),\n        key: nanoid()\n      };\n    });\n    return boardRow;\n  });\n  const [boardRows, setBoardRows] = useState(bRows);\n\n  const handleClick = id => {\n    const updatedRow = boardRows.map(row => {\n      const updatedSquare = row.map(square => {\n        if (square.id === id) {\n          return { ...square,\n            value: !square.value\n          };\n        }\n\n        return square;\n      });\n      return updatedSquare;\n    });\n    setBoardRows(updatedRow);\n  };\n\n  const rowNums = props.rowNums.map(row => {\n    let numObj;\n    row.map(num => {\n      console.log(num);\n      return numObj = /*#__PURE__*/_jsxDEV(Number, {\n        number: num.nums,\n        row: num.row\n      }, \"num-\" + nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 29\n      }, this);\n    });\n    return numObj;\n  });\n  const colNums = props.colNums.map(col => {\n    let numObj;\n    col.map(num => {\n      return numObj = /*#__PURE__*/_jsxDEV(Number, {\n        number: num.nums,\n        row: num.row\n      }, \"num-\" + nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 29\n      }, this);\n    });\n    return numObj;\n  });\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      handleClick: handleClick,\n      rowNums: rowNums,\n      colNums: colNums\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    const gameVals = gameRows.map(gameRow => {\n      const values = gameRow.map(square => {\n        return square.value;\n      });\n      return values;\n    });\n    const boardVals = boardRows.map(boardRow => {\n      const values = boardRow.map(square => {\n        return square.value;\n      });\n      return values;\n    });\n    const isArray = Array.isArray(gameVals) && Array.isArray(boardVals);\n    const length = gameVals.length === boardVals.length;\n    const matchVals = JSON.stringify(boardVals) === JSON.stringify(gameVals);\n\n    if (isArray === true && length === true && matchVals === true) {\n      return alert(\"Woohoo, you won!\");\n    }\n  }\n\n  useEffect(() => {\n    winState();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row-nums\",\n      children: rowNums\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-nums\",\n      children: colNums\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"PtkpVBdGp5rXCiFNiFTrMw2VYZ0=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useEffect","useState","Row","Number","Board","props","gameRows","bRows","map","row","boardRow","square","value","id","key","boardRows","setBoardRows","handleClick","updatedRow","updatedSquare","rowNums","numObj","num","console","log","nums","colNums","col","board","winState","gameVals","gameRow","values","boardVals","isArray","Array","length","matchVals","JSON","stringify","alert"],"mappings":"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","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const bRows = gameRows.map(row=>{\n        const boardRow = row.map(square=>{\n            return {square, value:false, id:\"square-\"+nanoid(), key:nanoid()}\n        })\n        return boardRow;\n    });\n\n    const [boardRows, setBoardRows] = useState(bRows);\n\n\n    const handleClick = (id) => {\n        const updatedRow = boardRows.map(row => {\n            const updatedSquare = row.map(square=>{\n                if(square.id === id) {\n                    return {...square, value: !square.value}\n                }\n                return square;\n            })\n            return updatedSquare\n        });\n        setBoardRows(updatedRow);\n    }\n\n    const rowNums = props.rowNums.map(row => {\n        let numObj;\n        row.map(num=>{\n            console.log(num)\n            return numObj = <Number number={num.nums} row={num.row} key={\"num-\"+nanoid()} />;\n        })\n        return numObj;\n    });\n\n    const colNums = props.colNums.map(col => {\n        let numObj;\n        col.map(num=>{\n            return numObj = <Number number={num.nums} row={num.row} key={\"num-\"+nanoid()} />;\n        })\n        return numObj;\n    })\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                handleClick={handleClick}\n                rowNums={rowNums}\n                colNums={colNums}\n            />\n        );\n    });\n\n    function winState() {\n        const gameVals = gameRows.map(gameRow => {\n            const values = gameRow.map(square=>{\n                return square.value;\n            });\n            return values;\n        })\n        \n        const boardVals = boardRows.map(boardRow => {\n            const values = boardRow.map(square=>{\n                return square.value;\n            });\n            return values;\n        })\n\n        const isArray = Array.isArray(gameVals) && Array.isArray(boardVals);\n        const length = gameVals.length === boardVals.length;\n        const matchVals = JSON.stringify(boardVals) === JSON.stringify(gameVals);\n\n        if(isArray === true && length === true && matchVals === true) {\n            return alert(\"Woohoo, you won!\");\n        }\n    }\n\n    useEffect(()=>{\n        winState();\n    })\n\n    return (   \n        <div className=\"board\">\n            <div className=\"row-nums\">{rowNums}</div>\n            <div className=\"col-nums\">{colNums}</div>\n            <div className=\"game-board\">{board}</div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}