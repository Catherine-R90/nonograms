{"ast":null,"code":"export default function Rows(gameRows) {\n  // GET NUMBERS FOR ROWS\n  // const rowCount = gameRows.map(row=>{\n  //     let count = 0;\n  //     let sequences = [];\n  //     let continueSeq = true;\n  //     row.map(square=>{\n  //         if(square.value === false && continueSeq === true) {\n  //             continueSeq = false;\n  //             sequences.push(count);\n  //             count = 0;\n  //             console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n  //         }\n  //         if(square.value === true) {\n  //             continueSeq = true;\n  //             count++\n  //             console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n  //         }\n  //         return sequences.push(count);\n  //     })\n  //     console.log(sequences);\n  //     return sequences;\n  // })\n  const rowCount = gameRows.map(row => {\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false && continueSeq === true) {\n        sequences.push(0);\n        console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`);\n      }\n\n      if (square.value === true) {\n        sequences.push(1);\n        console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`);\n      }\n\n      return sequences.push(count);\n    });\n    console.log(sequences);\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map((row, index) => {\n      return {\n        nums: nums,\n        row: row[index].row,\n        col: row[index].col\n      };\n    });\n    return obj;\n  });\n  return rowNums;\n}\n_c = Rows;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rows\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/RowHelper.js"],"names":["Rows","gameRows","rowCount","map","row","sequences","square","value","continueSeq","push","console","log","id","col","count","rowNums","seq","only1s","greaterThan1","onlyOne","num","every","oneTotals","join","greaterTotal","length","rawNums","nums","replace","obj","index"],"mappings":"AAAA,eAAe,SAASA,IAAT,CAAcC,QAAd,EAAwB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,QAAQ,GAAGD,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAC/B,QAAIC,SAAS,GAAG,EAAhB;AACAD,IAAAA,GAAG,CAACD,GAAJ,CAAQG,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACC,KAAP,KAAiB,KAAjB,IAA0BC,WAAW,KAAK,IAA7C,EAAmD;AAC/CH,QAAAA,SAAS,CAACI,IAAV,CAAe,CAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAa,eAAcL,MAAM,CAACM,EAAG,SAAQN,MAAM,CAACF,GAAI,SAAQE,MAAM,CAACO,GAAI,EAA3E;AACH;;AACD,UAAGP,MAAM,CAACC,KAAP,KAAiB,IAApB,EAA0B;AACtBF,QAAAA,SAAS,CAACI,IAAV,CAAe,CAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAa,cAAaL,MAAM,CAACM,EAAG,SAAQN,MAAM,CAACF,GAAI,SAAQE,MAAM,CAACO,GAAI,EAA1E;AACH;;AACD,aAAOR,SAAS,CAACI,IAAV,CAAeK,KAAf,CAAP;AACH,KAVD;AAWAJ,IAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACA,WAAOA,SAAP;AACH,GAfgB,CAAjB,CAxBmC,CAyCnC;;AACA,QAAMU,OAAO,GAAGb,QAAQ,CAACC,GAAT,CAAaa,GAAG,IAAG;AAC/B,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,YAAY,GAAG,EAAnB;;AAEA,UAAMC,OAAO,GAAIC,GAAD,IAASA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAA9C;;AAEA,QAAGJ,GAAG,CAACK,KAAJ,CAAUF,OAAV,CAAH,EAAuB;AACnBH,MAAAA,GAAG,CAACb,GAAJ,CAAQiB,GAAG,IAAG;AACV,YAAGA,GAAG,KAAK,CAAX,EAAc;AACV,iBAAOH,MAAM,CAACR,IAAP,CAAYW,GAAZ,CAAP;AACH;AACJ,OAJD;AAKH,KAND,MAMO;AACHJ,MAAAA,GAAG,CAACb,GAAJ,CAAQiB,GAAG,IAAI;AACX,eAAOF,YAAY,CAACT,IAAb,CAAkBW,GAAlB,CAAP;AACH,OAFD;AAGH;;AAED,UAAME,SAAS,GAAGL,MAAM,CAACM,IAAP,EAAlB;AACA,UAAMC,YAAY,GAAGN,YAAY,CAACO,MAAlC;AAEA,UAAMC,OAAO,GAAI,GAAEJ,SAAU,IAAGE,YAAa,EAA7C;AACA,UAAMG,IAAI,GAAGD,OAAO,CAACE,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAb;AAEA,UAAMC,GAAG,GAAG5B,QAAQ,CAACE,GAAT,CAAa,CAACC,GAAD,EAAM0B,KAAN,KAAc;AACnC,aAAO;AAACH,QAAAA,IAAI,EAACA,IAAN;AAAYvB,QAAAA,GAAG,EAACA,GAAG,CAAC0B,KAAD,CAAH,CAAW1B,GAA3B;AAAgCS,QAAAA,GAAG,EAACT,GAAG,CAAC0B,KAAD,CAAH,CAAWjB;AAA/C,OAAP;AACH,KAFW,CAAZ;AAIA,WAAOgB,GAAP;AACH,GA7Be,CAAhB;AA+BA,SAAOd,OAAP;AACH;KA1EuBf,I","sourcesContent":["export default function Rows(gameRows) {\n    // GET NUMBERS FOR ROWS\n    // const rowCount = gameRows.map(row=>{\n    //     let count = 0;\n    //     let sequences = [];\n    //     let continueSeq = true;\n    //     row.map(square=>{\n    //         if(square.value === false && continueSeq === true) {\n    //             continueSeq = false;\n    //             sequences.push(count);\n    //             count = 0;\n    //             console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n    //         }\n    //         if(square.value === true) {\n    //             continueSeq = true;\n    //             count++\n    //             console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n    //         }\n    //         return sequences.push(count);\n    //     })\n    //     console.log(sequences);\n    //     return sequences;\n    // })\n\n    const rowCount = gameRows.map(row=>{\n        let sequences = [];\n        row.map(square=>{\n            if(square.value === false && continueSeq === true) {\n                sequences.push(0);\n                console.log(`FALSE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n            }\n            if(square.value === true) {\n                sequences.push(1);\n                console.log(`TRUE -- id:${square.id}, row:${square.row}, col:${square.col}`)\n            }\n            return sequences.push(count);\n        })\n        console.log(sequences);\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map((row, index)=>{\n            return {nums:nums, row:row[index].row, col:row[index].col };\n        })\n\n        return obj;\n    });\n\n    return rowNums;\n}"]},"metadata":{},"sourceType":"module"}