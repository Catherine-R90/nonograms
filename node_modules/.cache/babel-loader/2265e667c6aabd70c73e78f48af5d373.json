{"ast":null,"code":"import { urlAlphabet } from './url-alphabet/index.js';\n\nif (false) {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {\n    throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID.');\n  }\n\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error('Import file with `if (!window.crypto) window.crypto = window.msCrypto`' + ' before importing Nano ID to fix IE 11 support');\n  }\n\n  if (typeof crypto === 'undefined') {\n    throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');\n  }\n}\n\nvar random = function random(bytes) {\n  return crypto.getRandomValues(new Uint8Array(bytes));\n};\n\nvar customRandom = function customRandom(alphabet, defaultSize, getRandom) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  var step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return function () {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n    var id = '';\n\n    while (true) {\n      var bytes = getRandom(step);\n      var j = step;\n\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\n\nvar customAlphabet = function customAlphabet(alphabet) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  return customRandom(alphabet, size, random);\n};\n\nvar nanoid = function nanoid() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  var id = '';\n  var bytes = crypto.getRandomValues(new Uint8Array(size));\n\n  while (size--) {\n    var byte = bytes[size] & 63;\n\n    if (byte < 36) {\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n\n  return id;\n};\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","map":{"version":3,"sources":["/var/www/dev_nonograms_com/node_modules/nanoid/index.prod.js"],"names":["urlAlphabet","navigator","product","crypto","Error","msCrypto","random","bytes","getRandomValues","Uint8Array","customRandom","alphabet","defaultSize","getRandom","mask","Math","log","length","LN2","step","size","id","j","customAlphabet","nanoid","byte","toString","toUpperCase"],"mappings":"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","sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"]},"metadata":{},"sourceType":"module"}