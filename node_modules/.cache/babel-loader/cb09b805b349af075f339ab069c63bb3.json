{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const [gameRows, setGameRows] = useState(props.gameRows);\n  const rowContent = {\n    value: false\n  };\n  const rawRow = new Array(props.length).fill({\n    value: false\n  });\n  const rows = rawRow.map(square => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, square);\n  });\n  const columns = new Array(props.height).fill(rows); // const rowsId = columns.map(row=>{\n  //     return Object.assign({id:\"row-\"+nanoid()}, row)\n  // });\n\n  const [boardRows, setBoardRows] = useState(columns);\n\n  const updateRow = (arr, id) => {\n    const updatedRow = arr.map(row => {\n      if (row.id === id) {\n        return { ...row\n        };\n      }\n\n      return row;\n    });\n    setBoardRows(updatedRow);\n  };\n\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      winState: winState,\n      updateRow: updateRow,\n      gameRows: gameRows,\n      boardRows: boardRows\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length; // const gameVals = gameRows.map(gameRow => {\n    //     gameRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const boardVals = boardRows.map(boardRow => {\n    //     boardRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}.`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [console.log(\"columns: \"), console.log(columns), console.log(\"rows: \"), console.log(rows), console.log(\"rows id: \"), console.log(rowsId), winState(), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"J3WJjAlhsQoAEplQv9JyFEHF+Nk=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","setGameRows","rowContent","value","rawRow","Array","length","fill","rows","map","square","Object","assign","id","columns","height","boardRows","setBoardRows","updateRow","arr","updatedRow","row","board","winState","isArray","console","log","rowsId"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAACG,KAAK,CAACC,QAAP,CAAxC;AAEA,QAAME,UAAU,GAAG;AAACC,IAAAA,KAAK,EAAC;AAAP,GAAnB;AACA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUN,KAAK,CAACO,MAAhB,EAAwBC,IAAxB,CAA6B;AAACJ,IAAAA,KAAK,EAAC;AAAP,GAA7B,CAAf;AACA,QAAMK,IAAI,GAAGJ,MAAM,CAACK,GAAP,CAAWC,MAAM,IAAG;AAC7B,WAAOC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,YAAUlB,MAAM;AAApB,KAAd,EAAuCe,MAAvC,CAAP;AACH,GAFY,CAAb;AAGA,QAAMI,OAAO,GAAG,IAAIT,KAAJ,CAAUN,KAAK,CAACgB,MAAhB,EAAwBR,IAAxB,CAA6BC,IAA7B,CAAhB,CARiC,CASjC;AACA;AACA;;AAEA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAACkB,OAAD,CAA1C;;AAIA,QAAMI,SAAS,GAAG,CAACC,GAAD,EAAMN,EAAN,KAAY;AAC1B,UAAMO,UAAU,GAAGD,GAAG,CAACV,GAAJ,CAAQY,GAAG,IAAI;AAC9B,UAAGA,GAAG,CAACR,EAAJ,KAAWA,EAAd,EAAiB;AACb,eAAO,EAAC,GAAGQ;AAAJ,SAAP;AACH;;AACD,aAAOA,GAAP;AACH,KALkB,CAAnB;AAMAJ,IAAAA,YAAY,CAACG,UAAD,CAAZ;AACH,GARD;;AAUA,QAAME,KAAK,GAAGN,SAAS,CAACP,GAAV,CAAcY,GAAG,IAAI;AAC/B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,QAAQ,EAAEE,QAHd;AAII,MAAA,SAAS,EAAEL,SAJf;AAKI,MAAA,QAAQ,EAAElB,QALd;AAMI,MAAA,SAAS,EAAEgB;AANf,OAES,SAAOrB,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH,GAXa,CAAd;;AAaA,WAAS4B,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,OAAO,GAAGnB,KAAK,CAACmB,OAAN,CAAcxB,QAAd,KAA2BK,KAAK,CAACmB,OAAN,CAAcR,SAAd,CAA3C;AACA,UAAMV,MAAM,GAAGN,QAAQ,CAACM,MAAT,KAAoBU,SAAS,CAACV,MAA7C,CAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAAOmB,OAAO,CAACC,GAAR,CAAa,aAAYF,OAAQ,aAAYlB,MAAO,GAApD,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACKmB,OAAO,CAACC,GAAR,CAAY,WAAZ,CADL,EAEKD,OAAO,CAACC,GAAR,CAAYZ,OAAZ,CAFL,EAGKW,OAAO,CAACC,GAAR,CAAY,QAAZ,CAHL,EAIKD,OAAO,CAACC,GAAR,CAAYlB,IAAZ,CAJL,EAKKiB,OAAO,CAACC,GAAR,CAAY,WAAZ,CALL,EAMKD,OAAO,CAACC,GAAR,CAAYC,MAAZ,CANL,EAOKJ,QAAQ,EAPb,EAQKD,KARL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GAzEuBxB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const [gameRows, setGameRows] = useState(props.gameRows);\n\n    const rowContent = {value:false};\n    const rawRow = new Array(props.length).fill({value:false});\n    const rows = rawRow.map(square =>{\n        return Object.assign({id:\"square-\"+nanoid()}, square)    \n    });\n    const columns = new Array(props.height).fill(rows);\n    // const rowsId = columns.map(row=>{\n    //     return Object.assign({id:\"row-\"+nanoid()}, row)\n    // });\n\n    const [boardRows, setBoardRows] = useState(columns);\n\n    \n\n    const updateRow = (arr, id) =>{\n        const updatedRow = arr.map(row => {\n            if(row.id === id){\n                return {...row}\n            }\n            return row;\n        })\n        setBoardRows(updatedRow);\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                winState={winState}\n                updateRow={updateRow}\n                gameRows={gameRows}\n                boardRows={boardRows}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        // const gameVals = gameRows.map(gameRow => {\n        //     gameRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const boardVals = boardRows.map(boardRow => {\n        //     boardRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}.`)\n    }\n\n    return (   \n        <div className=\"board\">\n            {console.log(\"columns: \")}\n            {console.log(columns)}\n            {console.log(\"rows: \")}\n            {console.log(rows)}\n            {console.log(\"rows id: \")}\n            {console.log(rowsId)}\n            {winState()}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}