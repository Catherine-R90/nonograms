{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\nimport CheckRow from \"./Helpers/CheckRow\";\nimport WinState from \"./Helpers/WinState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const [rowNums, setRowNums] = useState();\n  const [colNums, setColNums] = useState();\n  const gameRows = props.gameRows;\n  const bRows = gameRows.map(row => {\n    const boardRow = row.map(square => {\n      return {\n        square,\n        value: false,\n        id: \"square-\" + nanoid(),\n        key: nanoid()\n      };\n    });\n    return boardRow;\n  });\n  const [boardRows, setBoardRows] = useState(bRows);\n\n  const handleClick = (e, id) => {\n    const updatedRow = boardRows.map(row => {\n      const updatedSquare = row.map(square => {\n        if (square.id === id) {\n          if (e.type === 'click') {\n            return { ...square,\n              value: !square.value\n            };\n          } else if (e.type === 'contextmenu') {\n            e.preventDefault();\n\n            if (square.value === 'x-square') {\n              return { ...square,\n                value: false\n              };\n            } else {\n              return { ...square,\n                value: \"x-square\"\n              };\n            }\n          }\n        }\n\n        return square;\n      });\n      return updatedSquare;\n    });\n    setBoardRows(updatedRow);\n  };\n\n  const rNums = props.rowNums.map(row => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: row.num\n    }, \"key-\" + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  });\n  setRowNums(rNums);\n  const cNums = props.colNums.map(col => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: col.nums\n    }, \"num-\" + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }, this);\n  });\n  setColNums(cNums);\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      handleClick: handleClick\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  });\n  useEffect(() => {\n    if (WinState(gameRows, boardRows) === true) {\n      alert(\"Woohoo you won!\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row-nums\",\n      children: rowNums\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-nums\",\n      children: colNums\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"92gdDLcpwfCF0kf+V94JDui0cwo=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useEffect","useState","Row","Number","CheckRow","WinState","Board","props","rowNums","setRowNums","colNums","setColNums","gameRows","bRows","map","row","boardRow","square","value","id","key","boardRows","setBoardRows","handleClick","e","updatedRow","updatedSquare","type","preventDefault","rNums","num","cNums","col","nums","board","alert"],"mappings":"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","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\nimport CheckRow from \"./Helpers/CheckRow\";\nimport WinState from \"./Helpers/WinState\";\n\nexport default function Board(props) {\n    const [rowNums, setRowNums] = useState();\n    const [colNums, setColNums] = useState();\n    const gameRows = props.gameRows;\n\n    const bRows = gameRows.map(row=>{\n        const boardRow = row.map(square=>{\n            return {square, value:false, id:\"square-\"+nanoid(), key:nanoid()}\n        })\n        return boardRow;\n    });\n\n    const [boardRows, setBoardRows] = useState(bRows);\n\n\n    const handleClick = (e, id) => {\n        const updatedRow = boardRows.map(row => {\n            const updatedSquare = row.map(square=>{\n                if(square.id === id) {\n                    if(e.type === 'click') {\n                        return {...square, value: !square.value};\n                    }\n                    else if(e.type === 'contextmenu'){\n                        e.preventDefault();\n                        if(square.value === 'x-square') {\n                            return {...square, value:false}\n                        } else {\n                            return {...square, value:\"x-square\"};\n                        }\n                    }\n                }\n                return square;\n            })\n            return updatedSquare\n        });\n        setBoardRows(updatedRow);\n    }\n\n    const rNums = props.rowNums.map(row=>{\n        return <Number number={row.num} key={\"key-\"+nanoid()} />;\n    });\n    setRowNums(rNums);\n    const cNums = props.colNums.map(col => {\n        return <Number number={col.nums} key={\"num-\"+nanoid()}/>;\n    });\n    setColNums(cNums);\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                handleClick={handleClick}\n            />\n        );\n    });\n\n    useEffect(()=>{\n        if(WinState(gameRows, boardRows) === true) {\n            alert(\"Woohoo you won!\");\n        }\n    })\n\n    return (\n        <div className=\"board\">\n            <div className=\"row-nums\">{rowNums}</div>\n            <div className=\"col-nums\">{colNums}</div>\n            <div className=\"game-board\">{board}</div>\n        </div>        \n    );\n}"]},"metadata":{},"sourceType":"module"}