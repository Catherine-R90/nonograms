{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Tutorial.js\";\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tutorial() {\n  const gameBoard = [[{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 5\n  }], [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 5\n  }], [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 5\n  }], [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 5\n  }], [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 5\n  }]]; // const gameRows = [];\n\n  const gameCols = [];\n  const gameRows = gameBoard.map(row => {\n    const check = current => {\n      if (current === row.row) {\n        return true;\n      }\n    };\n\n    if (row.every(check(row.row))) {\n      return row;\n    }\n  }); // GET NUMBERS FOR ROWS\n\n  const rowCount = gameRows.map(row => {\n    let continueSequence = false;\n    let count = 0;\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false && continueSequence === true) {\n        continueSequence = false;\n        sequences.push(count);\n        count = 0;\n      }\n\n      if (square.value === true) {\n        continueSequence = true;\n        count++;\n      }\n\n      return sequences.push(count);\n    });\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map(row => {\n      row.map(square => {\n        return {\n          nums: nums,\n          row: square.row,\n          col: square.col\n        };\n      });\n    });\n    return obj;\n  });\n  const tutorial = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(gameRows), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n_c = Tutorial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tutorial\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Tutorial.js"],"names":["nanoid","Row","Board","Tutorial","gameBoard","value","id","key","row","col","gameCols","gameRows","map","check","current","every","rowCount","continueSequence","count","sequences","square","push","rowNums","seq","only1s","greaterThan1","onlyOne","num","oneTotals","join","greaterTotal","length","rawNums","nums","replace","obj","tutorial","board","console","log"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\n\nexport default function Tutorial() {\n    const gameBoard = [\n        [\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:5},\n        ],\n        [\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:5},\n        ],\n        [\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:5},\n        ],\n        [\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:5},\n        ],\n        [\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:1},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:2},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:3},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:4},\n            {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:5},\n        ]\n    ]\n\n    // const gameRows = [];\n    const gameCols = []\n    const gameRows = gameBoard.map(row=>{\n        const check = (current) => {\n            if(current === row.row) {\n                return true;\n            }\n        }\n        if(row.every((check(row.row)))){\n            return row;\n        }\n    });\n\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let continueSequence = false;\n        let count = 0;\n        let sequences = []\n        row.map(square=>{\n            if(square.value === false && continueSequence === true) {\n                continueSequence = false;\n                sequences.push(count);\n                count = 0;\n            }\n            if(square.value === true) {\n                continueSequence = true;\n                count++\n            }\n            return sequences.push(count);\n        })\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map(row=>{\n            row.map(square=>{\n                return {nums:nums, row:square.row, col:square.col };\n            })\n        })\n\n        return obj;\n    });\n\n    const tutorial = gameRows.map(row => {\n        return (\n            <Row \n                row={row}\n                id={row.id}\n                key={'row-'+nanoid()}\n            />\n        )\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} />\n    \n    return (\n        <div>\n            {console.log(gameRows)}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}