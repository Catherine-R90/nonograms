{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Tutorial.js\";\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tutorial() {\n  const row1 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }];\n  const col1Nums = {\n    nums: \"5\",\n    col: 0\n  };\n  const row2 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }];\n  const col2Nums = {\n    nums: \"1, 1\",\n    col: 1\n  };\n  const row3 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }];\n  const col3Nums = {\n    nums: \"1, 1\",\n    col: 2\n  };\n  const row4 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }];\n  const col4Nums = {\n    nums: \"1, 1\",\n    col: 3\n  };\n  const row5 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid()\n  }];\n  const col5Nums = {\n    nums: \"1, 1\",\n    col: 4\n  };\n  const gameRows = [row1, row2, row3, row4, row5]; // GET NUMBERS FOR ROWS\n\n  const rowCount = gameRows.map(row => {\n    let continueSequence = false;\n    let count = 0;\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false && continueSequence === true) {\n        continueSequence = false;\n        sequences.push(count);\n        count = 0;\n      }\n\n      if (square.value === true) {\n        continueSequence = true;\n        count++;\n      }\n\n      return sequences.push(count);\n    });\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(function (seq, index) {\n    let only1s = [];\n    let greaterThan1 = [];\n    const rowNum = index;\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = {\n      nums: nums,\n      row: rowNum\n    };\n    return obj;\n  }); // const gameCols = [];\n\n  const colIndex = gameRows.map(row => {\n    const cols = row.map(index => {\n      // const squareIndex = index;\n      return {\n        col: index\n      };\n    });\n    return cols;\n  });\n  const gameCols = gameRows.map(row => {\n    const cols = row.map(square => {\n      colIndex.map(col => {\n        if (square[col.col]) {\n          return square;\n        }\n      });\n      return square;\n    });\n    return cols;\n  }); // const colCount = gameRows.map((row, index)=>{\n  //     const gameCols = [];\n  //     const gameRowIndex = index;\n  //     const colIndex = gamwRows.map(row=>{\n  //         row.map((square, index)=>{\n  //             const squareIndex = index;\n  //             return {col: squareIndex}\n  //         });\n  //     })\n  //     colIndex.map(index => {\n  //         row.map(square=>{\n  //             if(square[index.col]) {\n  //                 return gameCols.push(square);\n  //             }\n  //         })\n  //         return;\n  //     })\n  //     // const matchIndex = colIndex.map((col, index)=>{\n  //     //     const colIndex = index;\n  //     //     if(colIndex === gameRowIndex) {\n  //     //         row.map(gameSquare=>{\n  //     //             return gameCols.push(gameSquare[col.col])\n  //     //         })\n  //     //     }\n  //     // });\n  //     return gameCols;\n  // });\n\n  const colNums = [col1Nums, col2Nums, col3Nums, col4Nums, col5Nums]; // GET INDEX OF COLS\n  // const colCount = gameRows.map((row, index)=>{\n  //     let continueSequence = false;\n  //     let count = 0;\n  //     let sequences = [];\n  //     const colIndex = row.map((square, index)=>{\n  //         return {col: index}\n  //     })\n  //     const message = colIndex.map((col, index)=>{\n  //         if(col.index === row.index) {\n  //             return console.log(\"found! col index: \"+col.index+\" row index: \"+row.index)\n  //         }\n  //     })\n  //     return message;\n  // })\n\n  const tutorial = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums,\n    colNums: colNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(gameCols), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n}\n_c = Tutorial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tutorial\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Tutorial.js"],"names":["nanoid","Row","Board","Tutorial","row1","value","id","key","col1Nums","nums","col","row2","col2Nums","row3","col3Nums","row4","col4Nums","row5","col5Nums","gameRows","rowCount","map","row","continueSequence","count","sequences","square","push","rowNums","seq","index","only1s","greaterThan1","rowNum","onlyOne","num","every","oneTotals","join","greaterTotal","length","rawNums","replace","obj","colIndex","cols","gameCols","colNums","tutorial","board","console","log"],"mappings":";AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAC/B,QAAMC,IAAI,GAAG,CACT;AAACC,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GADS,EAET;AAACK,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GAFS,EAGT;AAACK,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GAHS,EAIT;AAACK,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GAJS,EAKT;AAACK,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GALS,CAAb;AAOA,QAAMQ,QAAQ,GAAG;AAACC,IAAAA,IAAI,EAAC,GAAN;AAAWC,IAAAA,GAAG,EAAC;AAAf,GAAjB;AACA,QAAMC,IAAI,GAAG,CACT;AAACN,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GADS,EAET;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GAFS,EAGT;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GAHS,EAIT;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GAJS,EAKT;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GALS,CAAb;AAOA,QAAMY,QAAQ,GAAG;AAACH,IAAAA,IAAI,EAAC,MAAN;AAAcC,IAAAA,GAAG,EAAC;AAAlB,GAAjB;AACA,QAAMG,IAAI,GAAG,CACT;AAACR,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GADS,EAET;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GAFS,EAGT;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GAHS,EAIT;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GAJS,EAKT;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GALS,CAAb;AAOA,QAAMc,QAAQ,GAAG;AAACL,IAAAA,IAAI,EAAC,MAAN;AAAcC,IAAAA,GAAG,EAAC;AAAlB,GAAjB;AACA,QAAMK,IAAI,GAAG,CACT;AAACV,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GADS,EAET;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GAFS,EAGT;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GAHS,EAIT;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GAJS,EAKT;AAACK,IAAAA,KAAK,EAAC,KAAP;AAAcC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAjC;AAAqCO,IAAAA,GAAG,EAACP,MAAM;AAA/C,GALS,CAAb;AAOA,QAAMgB,QAAQ,GAAG;AAACP,IAAAA,IAAI,EAAC,MAAN;AAAcC,IAAAA,GAAG,EAAC;AAAlB,GAAjB;AACA,QAAMO,IAAI,GAAG,CACT;AAACZ,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GADS,EAET;AAACK,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GAFS,EAGT;AAACK,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GAHS,EAIT;AAACK,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GAJS,EAKT;AAACK,IAAAA,KAAK,EAAC,IAAP;AAAaC,IAAAA,EAAE,EAAC,YAAUN,MAAM,EAAhC;AAAoCO,IAAAA,GAAG,EAACP,MAAM;AAA9C,GALS,CAAb;AAOA,QAAMkB,QAAQ,GAAG;AAACT,IAAAA,IAAI,EAAC,MAAN;AAAcC,IAAAA,GAAG,EAAC;AAAlB,GAAjB;AAEA,QAAMS,QAAQ,GAAG,CAACf,IAAD,EAAOO,IAAP,EAAaE,IAAb,EAAmBE,IAAnB,EAAyBE,IAAzB,CAAjB,CA1C+B,CA6C/B;;AACA,QAAMG,QAAQ,GAAGD,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAC/B,QAAIC,gBAAgB,GAAG,KAAvB;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,SAAS,GAAG,EAAhB;AACAH,IAAAA,GAAG,CAACD,GAAJ,CAAQK,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACrB,KAAP,KAAiB,KAAjB,IAA0BkB,gBAAgB,KAAK,IAAlD,EAAwD;AACpDA,QAAAA,gBAAgB,GAAG,KAAnB;AACAE,QAAAA,SAAS,CAACE,IAAV,CAAeH,KAAf;AACAA,QAAAA,KAAK,GAAG,CAAR;AACH;;AACD,UAAGE,MAAM,CAACrB,KAAP,KAAiB,IAApB,EAA0B;AACtBkB,QAAAA,gBAAgB,GAAG,IAAnB;AACAC,QAAAA,KAAK;AACR;;AACD,aAAOC,SAAS,CAACE,IAAV,CAAeH,KAAf,CAAP;AACH,KAXD;AAYA,WAAOC,SAAP;AACH,GAjBgB,CAAjB,CA9C+B,CAiE/B;;AACA,QAAMG,OAAO,GAAGR,QAAQ,CAACC,GAAT,CAAa,UAAUQ,GAAV,EAAeC,KAAf,EAAsB;AAC/C,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,UAAMC,MAAM,GAAGH,KAAf;;AAEA,UAAMI,OAAO,GAAIC,GAAD,IAASA,GAAG,KAAK,CAAR,IAAaA,GAAG,KAAK,CAA9C;;AAEA,QAAGN,GAAG,CAACO,KAAJ,CAAUF,OAAV,CAAH,EAAuB;AACnBL,MAAAA,GAAG,CAACR,GAAJ,CAAQc,GAAG,IAAG;AACV,YAAGA,GAAG,KAAK,CAAX,EAAc;AACV,iBAAOJ,MAAM,CAACJ,IAAP,CAAYQ,GAAZ,CAAP;AACH;AACJ,OAJD;AAKH,KAND,MAMO;AACHN,MAAAA,GAAG,CAACR,GAAJ,CAAQc,GAAG,IAAI;AACX,eAAOH,YAAY,CAACL,IAAb,CAAkBQ,GAAlB,CAAP;AACH,OAFD;AAGH;;AAED,UAAME,SAAS,GAAGN,MAAM,CAACO,IAAP,EAAlB;AACA,UAAMC,YAAY,GAAGP,YAAY,CAACQ,MAAlC;AAEA,UAAMC,OAAO,GAAI,GAAEJ,SAAU,IAAGE,YAAa,EAA7C;AACA,UAAM9B,IAAI,GAAGgC,OAAO,CAACC,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAb;AAEA,UAAMC,GAAG,GAAG;AAAClC,MAAAA,IAAI,EAACA,IAAN;AAAYa,MAAAA,GAAG,EAACW;AAAhB,KAAZ;AAEA,WAAOU,GAAP;AACH,GA5Be,CAAhB,CAlE+B,CAgG/B;;AACA,QAAMC,QAAQ,GAAGzB,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAC/B,UAAMuB,IAAI,GAAGvB,GAAG,CAACD,GAAJ,CAASS,KAAD,IAAS;AAC1B;AACA,aAAO;AAACpB,QAAAA,GAAG,EAAEoB;AAAN,OAAP;AACH,KAHY,CAAb;AAIA,WAAOe,IAAP;AACH,GANgB,CAAjB;AAOA,QAAMC,QAAQ,GAAG3B,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAC/B,UAAMuB,IAAI,GAAGvB,GAAG,CAACD,GAAJ,CAAQK,MAAM,IAAE;AACzBkB,MAAAA,QAAQ,CAACvB,GAAT,CAAaX,GAAG,IAAE;AACd,YAAGgB,MAAM,CAAChB,GAAG,CAACA,GAAL,CAAT,EAAoB;AAChB,iBAAOgB,MAAP;AACH;AACJ,OAJD;AAKA,aAAOA,MAAP;AACH,KAPY,CAAb;AAQA,WAAOmB,IAAP;AACH,GAVgB,CAAjB,CAxG+B,CAoH/B;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAME,OAAO,GAAG,CAACvC,QAAD,EAAWI,QAAX,EAAqBE,QAArB,EAA+BE,QAA/B,EAAyCE,QAAzC,CAAhB,CApJ+B,CAsJ/B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM8B,QAAQ,GAAG7B,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAI;AACjC,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAEI,MAAA,EAAE,EAAEA,GAAG,CAAChB;AAFZ,OAGS,SAAON,MAAM,EAHtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GARgB,CAAjB;;AAUA,QAAMiD,KAAK,gBAAG,QAAC,KAAD;AAAO,IAAA,QAAQ,EAAE9B,QAAjB;AAA2B,IAAA,OAAO,EAAES,OAApC;AAA6C,IAAA,OAAO,EAAEmB;AAAtD;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,sBACI;AAAA,eAEKG,OAAO,CAACC,GAAR,CAAYL,QAAZ,CAFL,EAGKG,KAHL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;KA3LuB9C,Q","sourcesContent":["import { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\n\nexport default function Tutorial() {\n    const row1 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n    ];\n    const col1Nums = {nums:\"5\", col:0};\n    const row2 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()},  \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()}, \n    ];\n    const col2Nums = {nums:\"1, 1\", col:1};\n    const row3 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()},  \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()},\n    ];\n    const col3Nums = {nums:\"1, 1\", col:2};\n    const row4 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()}, \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()},  \n        {value:false, id:\"square-\"+nanoid(), key:nanoid()},\n    ];\n    const col4Nums = {nums:\"1, 1\", col:3};\n    const row5 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid()},\n    ];\n    const col5Nums = {nums:\"1, 1\", col:4};\n\n    const gameRows = [row1, row2, row3, row4, row5];\n    \n\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let continueSequence = false;\n        let count = 0;\n        let sequences = []\n        row.map(square=>{\n            if(square.value === false && continueSequence === true) {\n                continueSequence = false;\n                sequences.push(count);\n                count = 0;\n            }\n            if(square.value === true) {\n                continueSequence = true;\n                count++\n            }\n            return sequences.push(count);\n        })\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(function (seq, index) {\n        let only1s = [];\n        let greaterThan1 = [];\n        const rowNum = index;\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = {nums:nums, row:rowNum};\n\n        return obj;\n    });\n    \n    // const gameCols = [];\n    const colIndex = gameRows.map(row=>{\n        const cols = row.map((index)=>{\n            // const squareIndex = index;\n            return {col: index}\n        });\n        return cols;\n    })\n    const gameCols = gameRows.map(row=>{\n        const cols = row.map(square=>{\n            colIndex.map(col=>{\n                if(square[col.col]) {\n                    return square;\n                }\n            })\n            return square;\n        })\n        return cols;\n    })\n\n    // const colCount = gameRows.map((row, index)=>{\n    //     const gameCols = [];\n\n    //     const gameRowIndex = index;\n\n    //     const colIndex = gamwRows.map(row=>{\n    //         row.map((square, index)=>{\n    //             const squareIndex = index;\n    //             return {col: squareIndex}\n    //         });\n    //     })\n\n    //     colIndex.map(index => {\n    //         row.map(square=>{\n    //             if(square[index.col]) {\n    //                 return gameCols.push(square);\n    //             }\n    //         })\n    //         return;\n    //     })\n\n    //     // const matchIndex = colIndex.map((col, index)=>{\n    //     //     const colIndex = index;\n    //     //     if(colIndex === gameRowIndex) {\n    //     //         row.map(gameSquare=>{\n    //     //             return gameCols.push(gameSquare[col.col])\n    //     //         })\n    //     //     }\n    //     // });\n    //     return gameCols;\n    // });\n\n    const colNums = [col1Nums, col2Nums, col3Nums, col4Nums, col5Nums];\n\n    // GET INDEX OF COLS\n    // const colCount = gameRows.map((row, index)=>{\n    //     let continueSequence = false;\n    //     let count = 0;\n    //     let sequences = [];\n        \n    //     const colIndex = row.map((square, index)=>{\n    //         return {col: index}\n    //     })\n\n    //     const message = colIndex.map((col, index)=>{\n    //         if(col.index === row.index) {\n    //             return console.log(\"found! col index: \"+col.index+\" row index: \"+row.index)\n    //         }\n    //     })\n    //     return message;\n    // })\n\n    const tutorial = gameRows.map(row => {\n        return (\n            <Row \n                row={row}\n                id={row.id}\n                key={'row-'+nanoid()}\n            />\n        )\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} colNums={colNums} />\n    \n    return (\n        <div>\n            {/* {console.log(rowNums)} */}\n            {console.log(gameCols)}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}