{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Tutorial.js\";\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport Columns from '../Helpers/ColumnHelper';\nimport Rows from '../Helpers/RowHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tutorial() {\n  const rawRows = [[true, true, true, true, true], [true, false, false, false, false], [true, false, false, false, false], [true, false, false, false, false], [true, true, true, true, true]];\n  const gameRows = [];\n\n  for (let i = 0; i <= rawRows.length; i++) {\n    console.log(rawRows[i]); // rawRows[i].map(square=>{\n    //     if(square=== true) {\n    //         return gameRows.push({value:true, id:\"square-\"+nanoid(), row:i});\n    //     } else {\n    //         return gameRows.push({value:false, id:\"square-\"+nanoid(), row:i});\n    //     }\n    // })\n  }\n\n  console.log(gameRows);\n  const colNums = Columns(gameRows);\n  const rowNums = Rows(gameRows);\n  const tutorial = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums,\n    colNums: colNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n_c = Tutorial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tutorial\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Tutorial.js"],"names":["nanoid","Row","Board","Columns","Rows","Tutorial","rawRows","gameRows","i","length","console","log","colNums","rowNums","tutorial","map","row","id","board"],"mappings":";AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAC/B,QAAMC,OAAO,GAAG,CACZ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CADY,EAEZ,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,KAArB,EAA4B,KAA5B,CAFY,EAGZ,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,KAArB,EAA4B,KAA5B,CAHY,EAIZ,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,EAAqB,KAArB,EAA4B,KAA5B,CAJY,EAKZ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CALY,CAAhB;AAQA,QAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCE,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACE,CAAD,CAAnB,EADqC,CAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDE,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEA,QAAMK,OAAO,GAAGT,OAAO,CAACI,QAAD,CAAvB;AAEA,QAAMM,OAAO,GAAGT,IAAI,CAACG,QAAD,CAApB;AAEA,QAAMO,QAAQ,GAAGP,QAAQ,CAACQ,GAAT,CAAaC,GAAG,IAAI;AACjC,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAEI,MAAA,EAAE,EAAEA,GAAG,CAACC;AAFZ,OAGS,SAAOjB,MAAM,EAHtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GARgB,CAAjB;;AAUA,QAAMkB,KAAK,gBAAG,QAAC,KAAD;AAAO,IAAA,QAAQ,EAAEX,QAAjB;AAA2B,IAAA,OAAO,EAAEM,OAApC;AAA6C,IAAA,OAAO,EAAED;AAAtD;AAAA;AAAA;AAAA;AAAA,UAAd;;AAEA,sBACI;AAAA,cACKM;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;KA5CuBb,Q","sourcesContent":["import { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport Columns from '../Helpers/ColumnHelper';\nimport Rows from '../Helpers/RowHelper';\n\nexport default function Tutorial() {\n    const rawRows = [\n        [true, true, true, true, true],\n        [true, false, false, false, false],\n        [true, false, false, false, false],\n        [true, false, false, false, false],\n        [true, true, true, true, true],\n    ];\n\n    const gameRows = [];\n    for(let i = 0; i <= rawRows.length; i++) {\n        console.log(rawRows[i]);\n        // rawRows[i].map(square=>{\n        //     if(square=== true) {\n        //         return gameRows.push({value:true, id:\"square-\"+nanoid(), row:i});\n        //     } else {\n        //         return gameRows.push({value:false, id:\"square-\"+nanoid(), row:i});\n        //     }\n        // })\n    }\n\n    console.log(gameRows);\n\n    const colNums = Columns(gameRows);\n\n    const rowNums = Rows(gameRows);\n\n    const tutorial = gameRows.map(row => {\n        return (\n            <Row \n                row={row}\n                id={row.id}\n                key={'row-'+nanoid()}\n            />\n        );\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} colNums={colNums} />\n    \n    return (\n        <div>\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}