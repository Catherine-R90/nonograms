{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const rawRow = new Array(props.length).fill({\n    value: false\n  });\n  const rows = rawRow.map(square => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, square);\n  }); // const columns = new Array(props.height).fill(colContenets);\n\n  const colContenets = rows.map(row => {\n    return {\n      boardRow: row,\n      id: \"boardRow\" + nanoid()\n    };\n  });\n  const columns = new Array(props.height).fill(colContenets); // columns.map(row=>{\n  //     return Object.assign({id:\"boardRow-\"+nanoid()}, row);\n  // });\n\n  const [boardRows, setBoardRows] = useState(columns);\n\n  const updateRow = id => {// const updatedRow = columns.map(row => {\n    //     if(row.id === id) {\n    //         console.log(square)\n    //         return {...square, value:!square.value}\n    //     }\n    //     return square;\n    // })\n    // setBoardRows(updatedRow);\n  };\n\n  const board = boardRows.map(row => {\n    return (// <Row \n      //     row={row.boardRow}\n      //     key={'row-'+nanoid()}\n      //     winState={winState}\n      //     updateRow={updateRow}\n      //     id={row.id}\n      // />\n      console.log(row)\n    );\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length; // const gameVals = gameRows.map(gameRow => {\n    //     gameRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const boardVals = boardRows.map(boardRow => {\n    //     boardRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}.`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [console.log(columns), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"m42llyUEhU7snWIW5g25bZf2Xlk=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","rawRow","Array","length","fill","value","rows","map","square","Object","assign","id","colContenets","row","boardRow","columns","height","boardRows","setBoardRows","updateRow","board","console","log","winState","isArray"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AAEA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUH,KAAK,CAACI,MAAhB,EAAwBC,IAAxB,CAA6B;AAACC,IAAAA,KAAK,EAAC;AAAP,GAA7B,CAAf;AACA,QAAMC,IAAI,GAAGL,MAAM,CAACM,GAAP,CAAWC,MAAM,IAAG;AAC7B,WAAOC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,YAAUhB,MAAM;AAApB,KAAd,EAAuCa,MAAvC,CAAP;AACH,GAFY,CAAb,CAJiC,CAOjC;;AACA,QAAMI,YAAY,GAAGN,IAAI,CAACC,GAAL,CAASM,GAAG,IAAE;AAC/B,WAAO;AAACC,MAAAA,QAAQ,EAACD,GAAV;AAAeF,MAAAA,EAAE,EAAC,aAAWhB,MAAM;AAAnC,KAAP;AACH,GAFoB,CAArB;AAGA,QAAMoB,OAAO,GAAG,IAAIb,KAAJ,CAAUH,KAAK,CAACiB,MAAhB,EAAwBZ,IAAxB,CAA6BQ,YAA7B,CAAhB,CAXiC,CAcjC;AACA;AACA;;AAEA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAACmB,OAAD,CAA1C;;AAEA,QAAMI,SAAS,GAAIR,EAAD,IAAO,CACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GATD;;AAWA,QAAMS,KAAK,GAAGH,SAAS,CAACV,GAAV,CAAcM,GAAG,IAAI;AAC/B,WACI;AACA;AACA;AACA;AACA;AACA;AACA;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AARJ;AAUH,GAXa,CAAd;;AAaA,WAASU,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,OAAO,GAAGtB,KAAK,CAACsB,OAAN,CAAcxB,QAAd,KAA2BE,KAAK,CAACsB,OAAN,CAAcP,SAAd,CAA3C;AACA,UAAMd,MAAM,GAAGH,QAAQ,CAACG,MAAT,KAAoBc,SAAS,CAACd,MAA7C,CAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAAOkB,OAAO,CAACC,GAAR,CAAa,aAAYE,OAAQ,aAAYrB,MAAO,GAApD,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACCkB,OAAO,CAACC,GAAR,CAAYP,OAAZ,CADD,EAEKK,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAvEuBtB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const rawRow = new Array(props.length).fill({value:false});\n    const rows = rawRow.map(square =>{\n        return Object.assign({id:\"square-\"+nanoid()}, square);  \n    });\n    // const columns = new Array(props.height).fill(colContenets);\n    const colContenets = rows.map(row=>{\n        return {boardRow:row, id:\"boardRow\"+nanoid()};\n    })\n    const columns = new Array(props.height).fill(colContenets);\n\n    \n    // columns.map(row=>{\n    //     return Object.assign({id:\"boardRow-\"+nanoid()}, row);\n    // });\n\n    const [boardRows, setBoardRows] = useState(columns);\n\n    const updateRow = (id) =>{\n        // const updatedRow = columns.map(row => {\n        //     if(row.id === id) {\n        //         console.log(square)\n        //         return {...square, value:!square.value}\n        //     }\n        //     return square;\n        // })\n        // setBoardRows(updatedRow);\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            // <Row \n            //     row={row.boardRow}\n            //     key={'row-'+nanoid()}\n            //     winState={winState}\n            //     updateRow={updateRow}\n            //     id={row.id}\n            // />\n            console.log(row)\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        // const gameVals = gameRows.map(gameRow => {\n        //     gameRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const boardVals = boardRows.map(boardRow => {\n        //     boardRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}.`)\n    }\n\n    return (   \n        <div className=\"board\">\n        {console.log(columns)}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}