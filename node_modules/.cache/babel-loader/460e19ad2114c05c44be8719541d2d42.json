{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const [gameRows, setGameRows] = useState(props.gameRows); // const rows = new Array(props.length).fill(rowContent);\n\n  for (let i = 0; i < props.height; i++) {\n    const rowContent = {\n      value: false,\n      id: \"square\" + nanoid()\n    };\n    const rows = new Array(props.height).fill(rowContent);\n    return rows;\n  } // const column = new Array(props.height).fill(rows);\n\n\n  const board = rows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  }); // const winState = (rows, board) => {\n  //     rows.map(gameRow=>{\n  //         board.map(boardRow => {\n  //             if(boardRow.state === gameRow.state) {\n  //                 return console.log(\"success!\");\n  //             }\n  //         });\n  //         return;\n  //     });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"ClKmcqQhVu+qQ91IRHsEiBUFWck=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","setGameRows","i","height","rowContent","value","id","rows","Array","fill","board","map","row"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAACG,KAAK,CAACC,QAAP,CAAxC,CADiC,CAGjC;;AACA,OAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAEH,KAAK,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,UAAME,UAAU,GAAG;AAACC,MAAAA,KAAK,EAAC,KAAP;AAAcC,MAAAA,EAAE,EAAC,WAASX,MAAM;AAAhC,KAAnB;AACA,UAAMY,IAAI,GAAG,IAAIC,KAAJ,CAAUT,KAAK,CAACI,MAAhB,EAAwBM,IAAxB,CAA6BL,UAA7B,CAAb;AACA,WAAOG,IAAP;AACH,GARgC,CASjC;;;AAEA,QAAMG,KAAK,GAAGH,IAAI,CAACI,GAAL,CAASC,GAAG,IAAI;AAC1B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA;AADT,OAES,SAAOjB,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GAPa,CAAd,CAXiC,CAoBjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKe;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GApCuBZ,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const [gameRows, setGameRows] = useState(props.gameRows);\n\n    // const rows = new Array(props.length).fill(rowContent);\n    for(let i = 0; i< props.height; i++) {\n        const rowContent = {value:false, id:\"square\"+nanoid()};\n        const rows = new Array(props.height).fill(rowContent);\n        return rows;\n    }\n    // const column = new Array(props.height).fill(rows);\n\n    const board = rows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n            />\n        );\n    });\n\n    // const winState = (rows, board) => {\n    //     rows.map(gameRow=>{\n    //         board.map(boardRow => {\n    //             if(boardRow.state === gameRow.state) {\n    //                 return console.log(\"success!\");\n    //             }\n    //         });\n    //         return;\n    //     });\n    // }\n\n    return (\n        <div className=\"board\">\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}