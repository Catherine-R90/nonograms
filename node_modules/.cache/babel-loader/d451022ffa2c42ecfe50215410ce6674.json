{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Tutorial.js\";\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport Columns from '../Helpers/ColumnHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tutorial() {\n  const row1 = [{\n    value: true,\n    id: \"square-tut1\",\n    key: nanoid(),\n    row: 1,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-tut2\",\n    key: nanoid(),\n    row: 1,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-tut3\",\n    key: nanoid(),\n    row: 1,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-tut4\",\n    key: nanoid(),\n    row: 1,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-tut5\",\n    key: nanoid(),\n    row: 1,\n    col: 5\n  }];\n  const row2 = [{\n    value: true,\n    id: \"square-tut6\",\n    key: nanoid(),\n    row: 2,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-tut7\",\n    key: nanoid(),\n    row: 2,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-tut8\",\n    key: nanoid(),\n    row: 2,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-tut9\",\n    key: nanoid(),\n    row: 2,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-tut10\",\n    key: nanoid(),\n    row: 2,\n    col: 5\n  }];\n  const row3 = [{\n    value: true,\n    id: \"square-tut11\",\n    key: nanoid(),\n    row: 3,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-tut12\",\n    key: nanoid(),\n    row: 3,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-tut13\",\n    key: nanoid(),\n    row: 3,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-tut14\",\n    key: nanoid(),\n    row: 3,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-tut15\",\n    key: nanoid(),\n    row: 3,\n    col: 5\n  }];\n  const row4 = [{\n    value: true,\n    id: \"square-tut16\",\n    key: nanoid(),\n    row: 4,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-tut17\",\n    key: nanoid(),\n    row: 4,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-tut18\",\n    key: nanoid(),\n    row: 4,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-tut19\",\n    key: nanoid(),\n    row: 4,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-tut20\",\n    key: nanoid(),\n    row: 4,\n    col: 5\n  }];\n  const row5 = [{\n    value: true,\n    id: \"square-tut21\",\n    key: nanoid(),\n    row: 5,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-tut22\",\n    key: nanoid(),\n    row: 5,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-tut23\",\n    key: nanoid(),\n    row: 5,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-tut24\",\n    key: nanoid(),\n    row: 5,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-tut25\",\n    key: nanoid(),\n    row: 5,\n    col: 5\n  }];\n  const gameRows = [row1, row2, row3, row4, row5];\n  const colNums = Columns(gameRows); // GET NUMBERS FOR ROWS\n\n  const rowCount = gameRows.map(row => {\n    let count = 0;\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false && count <= row.length) {\n        sequences.push(count);\n        count = 0;\n      }\n\n      if (square.value === true && count <= row.length) {\n        count++;\n      }\n\n      return sequences.push(count);\n    });\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map((row, index) => {\n      return {\n        nums: nums,\n        row: row[index].row,\n        col: row[index].col\n      };\n    });\n    return obj;\n  });\n  const tutorial = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums,\n    colNums: colNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_c = Tutorial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tutorial\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Tutorial.js"],"names":["nanoid","Row","Board","Columns","Tutorial","row1","value","id","key","row","col","row2","row3","row4","row5","gameRows","colNums","rowCount","map","count","sequences","square","length","push","rowNums","seq","only1s","greaterThan1","onlyOne","num","every","oneTotals","join","greaterTotal","rawNums","nums","replace","obj","index","tutorial","board"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport Columns from '../Helpers/ColumnHelper';\n\nexport default function Tutorial() {\n    const row1 = [\n        {value:true, id:\"square-tut1\", key:nanoid(), row:1, col:1},\n        {value:true, id:\"square-tut2\", key:nanoid(), row:1, col:2},\n        {value:true, id:\"square-tut3\", key:nanoid(), row:1, col:3},\n        {value:true, id:\"square-tut4\", key:nanoid(), row:1, col:4},\n        {value:true, id:\"square-tut5\", key:nanoid(), row:1, col:5},\n    ];\n    const row2 = [\n        {value:true, id:\"square-tut6\", key:nanoid(), row:2, col:1},\n        {value:false, id:\"square-tut7\", key:nanoid(), row:2, col:2},\n        {value:false, id:\"square-tut8\", key:nanoid(), row:2, col:3},\n        {value:false, id:\"square-tut9\", key:nanoid(), row:2, col:4},\n        {value:false, id:\"square-tut10\", key:nanoid(), row:2, col:5},\n    ];\n    const row3 = [\n        {value:true, id:\"square-tut11\", key:nanoid(), row:3, col:1},\n        {value:false, id:\"square-tut12\", key:nanoid(), row:3, col:2},\n        {value:false, id:\"square-tut13\", key:nanoid(), row:3, col:3},\n        {value:false, id:\"square-tut14\", key:nanoid(), row:3, col:4},\n        {value:false, id:\"square-tut15\", key:nanoid(), row:3, col:5},\n    ];\n    const row4 = [\n        {value:true, id:\"square-tut16\", key:nanoid(), row:4, col:1},\n        {value:false, id:\"square-tut17\", key:nanoid(), row:4, col:2},\n        {value:false, id:\"square-tut18\", key:nanoid(), row:4, col:3},\n        {value:false, id:\"square-tut19\", key:nanoid(), row:4, col:4},\n        {value:false, id:\"square-tut20\", key:nanoid(), row:4, col:5},\n    ];\n    const row5 = [\n        {value:true, id:\"square-tut21\", key:nanoid(), row:5, col:1},\n        {value:true, id:\"square-tut22\", key:nanoid(), row:5, col:2},\n        {value:true, id:\"square-tut23\", key:nanoid(), row:5, col:3},\n        {value:true, id:\"square-tut24\", key:nanoid(), row:5, col:4},\n        {value:true, id:\"square-tut25\", key:nanoid(), row:5, col:5},\n    ];\n\n    const gameRows = [row1, row2, row3, row4, row5];    \n\n    const colNums = Columns(gameRows);\n\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let count = 0;\n        let sequences = [];\n        row.map(square=>{\n            if(square.value === false && count <= row.length) {\n                sequences.push(count);\n                count = 0;\n            }\n            if(square.value === true && count <= row.length) {\n                count++\n            }\n            return sequences.push(count);\n        })\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map((row, index)=>{\n            return {nums:nums, row:row[index].row, col:row[index].col };\n        })\n\n        return obj;\n    });\n\n    const tutorial = gameRows.map(row => {\n        return (\n            <Row \n                row={row}\n                id={row.id}\n                key={'row-'+nanoid()}\n            />\n        )\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} colNums={colNums} />\n    \n    return (\n        <div>\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}