{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const rawRow = new Array(props.length).fill({\n    value: false\n  });\n  const rows = rawRow.map(row => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, row);\n  });\n  const columns = new Array(props.height).fill(rows);\n  const [boardRows, setBoardRows] = useState(columns);\n\n  const handleClick = id => {\n    const updatedRow = boardRows.map(row => {\n      row.map(square => {\n        if (square.id === id) {\n          return { ...square,\n            value: !square.value\n          };\n        }\n\n        return square;\n      });\n    });\n    setBoardRows(updatedRow);\n    winState();\n  };\n\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      handleClick: handleClick,\n      winState: winState,\n      setBoardRows: setBoardRows,\n      gameRows: gameRows,\n      boardRows: boardRows\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length; // const gameVals = gameRows.map(gameRow => {\n    //     gameRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const boardVals = boardRows.map(boardRow => {\n    //     boardRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}. }`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [winState(), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"m42llyUEhU7snWIW5g25bZf2Xlk=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","rawRow","Array","length","fill","value","rows","map","row","Object","assign","id","columns","height","boardRows","setBoardRows","handleClick","updatedRow","square","winState","board","isArray","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AAEA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUH,KAAK,CAACI,MAAhB,EAAwBC,IAAxB,CAA6B;AAACC,IAAAA,KAAK,EAAC;AAAP,GAA7B,CAAf;AACA,QAAMC,IAAI,GAAGL,MAAM,CAACM,GAAP,CAAWC,GAAG,IAAG;AAC1B,WAAOC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,YAAUhB,MAAM;AAApB,KAAd,EAAuCa,GAAvC,CAAP;AACH,GAFY,CAAb;AAGA,QAAMI,OAAO,GAAG,IAAIV,KAAJ,CAAUH,KAAK,CAACc,MAAhB,EAAwBT,IAAxB,CAA6BE,IAA7B,CAAhB;AAEA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAACgB,OAAD,CAA1C;;AAEA,QAAMI,WAAW,GAAIL,EAAD,IAAQ;AACxB,UAAMM,UAAU,GAAGH,SAAS,CAACP,GAAV,CAAcC,GAAG,IAAI;AACpCA,MAAAA,GAAG,CAACD,GAAJ,CAAQW,MAAM,IAAG;AACb,YAAGA,MAAM,CAACP,EAAP,KAAcA,EAAjB,EAAqB;AACjB,iBAAO,EAAC,GAAGO,MAAJ;AAAYb,YAAAA,KAAK,EAAE,CAACa,MAAM,CAACb;AAA3B,WAAP;AACH;;AACD,eAAOa,MAAP;AACH,OALD;AAMH,KAPkB,CAAnB;AAQAH,IAAAA,YAAY,CAACE,UAAD,CAAZ;AACAE,IAAAA,QAAQ;AACX,GAXD;;AAaA,QAAMC,KAAK,GAAGN,SAAS,CAACP,GAAV,CAAcC,GAAG,IAAI;AAC/B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,WAAW,EAAEQ,WAHjB;AAII,MAAA,QAAQ,EAAEG,QAJd;AAKI,MAAA,YAAY,EAAEJ,YALlB;AAMI,MAAA,QAAQ,EAAEf,QANd;AAOI,MAAA,SAAS,EAAEc;AAPf,OAES,SAAOnB,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH,GAZa,CAAd;;AAcA,WAASwB,QAAT,GAAoB;AAChB;AACA;AACA,UAAME,OAAO,GAAGnB,KAAK,CAACmB,OAAN,CAAcrB,QAAd,KAA2BE,KAAK,CAACmB,OAAN,CAAcP,SAAd,CAA3C;AACA,UAAMX,MAAM,GAAGH,QAAQ,CAACG,MAAT,KAAoBW,SAAS,CAACX,MAA7C,CAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAAOmB,OAAO,CAACC,GAAR,CAAa,aAAYF,OAAQ,aAAYlB,MAAO,KAApD,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACKgB,QAAQ,EADb,EAEKC,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAjEuBtB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const rawRow = new Array(props.length).fill({value:false});\n    const rows = rawRow.map(row =>{\n        return Object.assign({id:\"square-\"+nanoid()}, row)    \n    });\n    const columns = new Array(props.height).fill(rows)\n\n    const [boardRows, setBoardRows] = useState(columns);\n\n    const handleClick = (id) => {\n        const updatedRow = boardRows.map(row => {\n            row.map(square =>{\n                if(square.id === id) {\n                    return {...square, value: !square.value}\n                }\n                return square;  \n            })\n        });\n        setBoardRows(updatedRow);\n        winState();\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                handleClick={handleClick}\n                winState={winState}\n                setBoardRows={setBoardRows}\n                gameRows={gameRows}\n                boardRows={boardRows}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        // const gameVals = gameRows.map(gameRow => {\n        //     gameRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const boardVals = boardRows.map(boardRow => {\n        //     boardRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}. }`)\n    }\n\n    return (   \n        <div className=\"board\">\n            {winState()}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}