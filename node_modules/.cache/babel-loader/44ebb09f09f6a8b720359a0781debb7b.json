{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/levels/Tutorial.js\";\nimport { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tutorial() {\n  const row1 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 1,\n    col: 5\n  }];\n  const row2 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 2,\n    col: 5\n  }];\n  const row3 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 3,\n    col: 5\n  }];\n  const row4 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 1\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 2\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 3\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 4\n  }, {\n    value: false,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 4,\n    col: 5\n  }];\n  const row5 = [{\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 1\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 2\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 3\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 4\n  }, {\n    value: true,\n    id: \"square-\" + nanoid(),\n    key: nanoid(),\n    row: 5,\n    col: 5\n  }];\n  const gameRows = [row1, row2, row3, row4, row5]; // ASSIGN COL ROWS\n\n  const nums = gameRows.map((row, index) => row[index].col);\n  const gameCols = [];\n  nums.forEach(num => {\n    const col = [];\n    gameRows.map(row => {\n      const colNum = row.map(square => {\n        if (square.col === num) {\n          return col.push(square);\n        }\n      });\n      return colNum;\n    });\n    return gameCols.push(col);\n  }); // GET NUMBERS FOR COLS\n\n  const colCount = gameCols.map(row => {\n    let continueColSequence = false;\n    let count = 0;\n    let colSequences = [];\n    row.map(square => {\n      if (square.value === false && continueColSequence === true) {\n        continueColSequence = false;\n        colSequences.push(count);\n        count = 0;\n      }\n\n      if (square.value === true) {\n        continueColSequence = true;\n        count++;\n      }\n\n      return colSequences.push(count);\n    });\n    console.log(\"col sequences: \");\n    console.log(colSequences);\n    return colSequences;\n  }); // MAP COL NUMBERS TO OBJECTS\n\n  const colNums = colCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameCols.map((col, index) => {\n      return {\n        nums: nums,\n        col: col[index].row,\n        col: col[index].col\n      };\n    });\n    return obj;\n  }); // GET NUMBERS FOR ROWS\n\n  const rowCount = gameRows.map(row => {\n    let continueSequence = false;\n    let count = 0;\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false && continueSequence === true) {\n        continueSequence = false;\n        sequences.push(count);\n        count = 0;\n      }\n\n      if (square.value === true) {\n        continueSequence = true;\n        count++;\n      }\n\n      return sequences.push(count);\n    });\n    return sequences;\n  }); // MAP ROW NUMBERS TO OBJECTS\n\n  const rowNums = rowCount.map(seq => {\n    let only1s = [];\n    let greaterThan1 = [];\n\n    const onlyOne = num => num === 1 || num === 0;\n\n    if (seq.every(onlyOne)) {\n      seq.map(num => {\n        if (num === 1) {\n          return only1s.push(num);\n        }\n      });\n    } else {\n      seq.map(num => {\n        return greaterThan1.push(num);\n      });\n    }\n\n    const oneTotals = only1s.join();\n    const greaterTotal = greaterThan1.length;\n    const rawNums = `${oneTotals} ${greaterTotal}`;\n    const nums = rawNums.replace('0', '');\n    const obj = gameRows.map((row, index) => {\n      return {\n        nums: nums,\n        row: row[index].row,\n        col: row[index].col\n      };\n    });\n    return obj;\n  });\n  const tutorial = gameRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this);\n  });\n\n  const board = /*#__PURE__*/_jsxDEV(Board, {\n    gameRows: gameRows,\n    rowNums: rowNums,\n    colNums: colNums\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(gameCols), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n}\n_c = Tutorial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tutorial\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/levels/Tutorial.js"],"names":["nanoid","Row","Board","Tutorial","row1","value","id","key","row","col","row2","row3","row4","row5","gameRows","nums","map","index","gameCols","forEach","num","colNum","square","push","colCount","continueColSequence","count","colSequences","console","log","colNums","seq","only1s","greaterThan1","onlyOne","every","oneTotals","join","greaterTotal","length","rawNums","replace","obj","rowCount","continueSequence","sequences","rowNums","tutorial","board"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid';\nimport Row from '../Row';\nimport Board from '../Board';\n\nexport default function Tutorial() {\n    const row1 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:1},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:2},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:3},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:4},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:1, col:5},\n    ];\n    const row2 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:1},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:2},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:3},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:4},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:2, col:5},\n    ];\n    const row3 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:1},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:2},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:3},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:4},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:3, col:5},\n    ];\n    const row4 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:1},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:2},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:3},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:4},\n        {value:false, id:\"square-\"+nanoid(), key:nanoid(), row:4, col:5},\n    ];\n    const row5 = [\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:1},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:2},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:3},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:4},\n        {value:true, id:\"square-\"+nanoid(), key:nanoid(), row:5, col:5},\n    ];\n\n    const gameRows = [row1, row2, row3, row4, row5];    \n\n\n    // ASSIGN COL ROWS\n    const nums = gameRows.map((row, index) => row[index].col);\n\n    const gameCols = [];\n    nums.forEach(num=>{\n        const col = [];\n        gameRows.map(row=>{\n            const colNum = row.map(square=>{\n                if(square.col === num) {\n                    return col.push(square);\n                }\n            });\n            return colNum;\n        })\n        return gameCols.push(col);\n    });\n\n    // GET NUMBERS FOR COLS\n    const colCount = gameCols.map(row=>{\n        let continueColSequence = false;\n        let count = 0;\n        let colSequences = []\n        row.map(square=>{\n            if(square.value === false && continueColSequence === true) {\n                continueColSequence = false;\n                colSequences.push(count);\n                count = 0;\n            }\n            if(square.value === true) {\n                continueColSequence = true;\n                count++\n            }\n            return colSequences.push(count);\n        })\n        console.log(\"col sequences: \");\n        console.log(colSequences);\n        return colSequences;\n    })\n\n    // MAP COL NUMBERS TO OBJECTS\n    const colNums = colCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n    \n        const onlyOne = (num) => num === 1 || num === 0;\n    \n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n    \n        const obj = gameCols.map((col, index)=>{\n            return {nums:nums, col:col[index].row, col:col[index].col };\n        })\n    \n        return obj;\n    });\n\n    // GET NUMBERS FOR ROWS\n    const rowCount = gameRows.map(row=>{\n        let continueSequence = false;\n        let count = 0;\n        let sequences = []\n        row.map(square=>{\n            if(square.value === false && continueSequence === true) {\n                continueSequence = false;\n                sequences.push(count);\n                count = 0;\n            }\n            if(square.value === true) {\n                continueSequence = true;\n                count++\n            }\n            return sequences.push(count);\n        })\n        return sequences;\n    })\n\n    // MAP ROW NUMBERS TO OBJECTS\n    const rowNums = rowCount.map(seq=> {\n        let only1s = [];\n        let greaterThan1 = [];\n\n        const onlyOne = (num) => num === 1 || num === 0;\n\n        if(seq.every(onlyOne)) {\n            seq.map(num =>{\n                if(num === 1) {\n                    return only1s.push(num);\n                }\n            })\n        } else {\n            seq.map(num => {\n                return greaterThan1.push(num);\n            })    \n        }\n        \n        const oneTotals = only1s.join();\n        const greaterTotal = greaterThan1.length;\n        \n        const rawNums = `${oneTotals} ${greaterTotal}`;\n        const nums = rawNums.replace('0', '');\n\n        const obj = gameRows.map((row, index)=>{\n            return {nums:nums, row:row[index].row, col:row[index].col };\n        })\n\n        return obj;\n    });\n\n    const tutorial = gameRows.map(row => {\n        return (\n            <Row \n                row={row}\n                id={row.id}\n                key={'row-'+nanoid()}\n            />\n        )\n    });\n\n    const board = <Board gameRows={gameRows} rowNums={rowNums} colNums={colNums} />\n    \n    return (\n        <div>\n            {console.log(gameCols)}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}