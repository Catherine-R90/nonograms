{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const rawRow = new Array(props.length).fill({\n    value: false\n  });\n  const rows = rawRow.map(square => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, square);\n  });\n  const [boardRows, setBoardRows] = useState(rows);\n  const cols = new Array(props.height).fill(rows);\n  const [columns, setColumns] = useState(cols);\n  const board = columns.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      winState: winState,\n      updateRow: updateRow,\n      id: row.id\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  });\n\n  const updateRow = id => {\n    const updatedRow = boardRows.map(square => {\n      if (square.id === id) {\n        return { ...square,\n          value: !square.value\n        };\n      }\n\n      return square;\n    }); // const updatedCol = \n\n    setBoardRows(updatedRow); // setColumns(updatedCol);\n  };\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length; // const gameVals = gameRows.map(gameRow => {\n    //     gameRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const boardVals = boardRows.map(boardRow => {\n    //     boardRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}.`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"4BMxE7B0Ez1ZYWWygh51P7S/4EM=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","rawRow","Array","length","fill","value","rows","map","square","Object","assign","id","boardRows","setBoardRows","cols","height","columns","setColumns","board","row","winState","updateRow","updatedRow","isArray","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AAEA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUH,KAAK,CAACI,MAAhB,EAAwBC,IAAxB,CAA6B;AAACC,IAAAA,KAAK,EAAC;AAAP,GAA7B,CAAf;AACA,QAAMC,IAAI,GAAGL,MAAM,CAACM,GAAP,CAAWC,MAAM,IAAG;AAC7B,WAAOC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,YAAUhB,MAAM;AAApB,KAAd,EAAuCa,MAAvC,CAAP;AACH,GAFY,CAAb;AAIA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAACU,IAAD,CAA1C;AAEA,QAAMQ,IAAI,GAAG,IAAIZ,KAAJ,CAAUH,KAAK,CAACgB,MAAhB,EAAwBX,IAAxB,CAA6BE,IAA7B,CAAb;AAEA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAACkB,IAAD,CAAtC;AAEA,QAAMI,KAAK,GAAGF,OAAO,CAACT,GAAR,CAAYY,GAAG,IAAI;AAC7B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,QAAQ,EAAEC,QAHd;AAII,MAAA,SAAS,EAAEC,SAJf;AAKI,MAAA,EAAE,EAAEF,GAAG,CAACR;AALZ,OAES,SAAOhB,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAVa,CAAd;;AAYA,QAAM0B,SAAS,GAAIV,EAAD,IAAO;AACrB,UAAMW,UAAU,GAAGV,SAAS,CAACL,GAAV,CAAcC,MAAM,IAAI;AACvC,UAAGA,MAAM,CAACG,EAAP,KAAcA,EAAjB,EAAqB;AACjB,eAAO,EAAC,GAAGH,MAAJ;AAAYH,UAAAA,KAAK,EAAC,CAACG,MAAM,CAACH;AAA1B,SAAP;AACH;;AACD,aAAOG,MAAP;AACH,KALkB,CAAnB,CADqB,CAOrB;;AACAK,IAAAA,YAAY,CAACS,UAAD,CAAZ,CARqB,CASrB;AACH,GAVD;;AAYA,WAASF,QAAT,GAAoB;AAChB;AACA;AACA,UAAMG,OAAO,GAAGrB,KAAK,CAACqB,OAAN,CAAcvB,QAAd,KAA2BE,KAAK,CAACqB,OAAN,CAAcX,SAAd,CAA3C;AACA,UAAMT,MAAM,GAAGH,QAAQ,CAACG,MAAT,KAAoBS,SAAS,CAACT,MAA7C,CAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAAOqB,OAAO,CAACC,GAAR,CAAa,aAAYF,OAAQ,aAAYpB,MAAO,GAApD,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACKe;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAhEuBpB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const rawRow = new Array(props.length).fill({value:false});\n    const rows = rawRow.map(square =>{\n        return Object.assign({id:\"square-\"+nanoid()}, square);  \n    });\n\n    const [boardRows, setBoardRows] = useState(rows);\n\n    const cols = new Array(props.height).fill(rows);\n   \n    const [columns, setColumns] = useState(cols);\n\n    const board = columns.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                winState={winState}\n                updateRow={updateRow}\n                id={row.id}\n            />\n        );\n    });\n\n    const updateRow = (id) =>{\n        const updatedRow = boardRows.map(square => {\n            if(square.id === id) {\n                return {...square, value:!square.value}\n            }\n            return square;\n        })\n        // const updatedCol = \n        setBoardRows(updatedRow);\n        // setColumns(updatedCol);\n    }\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        // const gameVals = gameRows.map(gameRow => {\n        //     gameRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const boardVals = boardRows.map(boardRow => {\n        //     boardRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}.`)\n    }\n\n    return (   \n        <div className=\"board\">\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}