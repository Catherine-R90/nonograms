{"ast":null,"code":"import { nanoid } from \"nanoid\";\nexport default function Rows(rawRows) {\n  const nums = [];\n\n  for (let i = 1; i <= rawRows.length; i++) {\n    nums.push(i);\n  }\n\n  const gameRows = rawRows.map(rawRow => {\n    const row = [];\n    rawRow.map(square => {\n      nums.forEach(num => {\n        return row.push({\n          value: square,\n          id: \"square-\" + nanoid(),\n          key: nanoid(),\n          row: num\n        });\n      });\n    });\n    return row;\n  });\n  console.log(gameRows);\n  const sequences = gameRows.map(row => {\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false) {\n        sequences.push(0);\n      }\n\n      if (square.value === true) {\n        sequences.push(1);\n      }\n    });\n    return sequences;\n  });\n  const rowCount = sequences.map(seq => {\n    let countSequences = [];\n    let count = 0;\n    seq.forEach(num => {\n      if (num === 0) {\n        countSequences.push(count);\n        count = 0;\n      }\n\n      if (num === 1) {\n        count++;\n      }\n    });\n    countSequences.push(count);\n    return countSequences;\n  });\n  const rowNums = rowCount.map(seq => {\n    const onlyZero = num => num === 0;\n\n    let obj;\n\n    if (seq.every(onlyZero)) {\n      obj = {\n        nums: \"0\"\n      };\n    } else {\n      const cleanNums = seq.filter(num => num !== 0);\n      obj = {\n        nums: cleanNums.join()\n      };\n    }\n\n    return obj;\n  });\n  return rowNums;\n}\n_c = Rows;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rows\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/RowHelper.js"],"names":["nanoid","Rows","rawRows","nums","i","length","push","gameRows","map","rawRow","row","square","forEach","num","value","id","key","console","log","sequences","rowCount","seq","countSequences","count","rowNums","onlyZero","obj","every","cleanNums","filter","join"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,eAAe,SAASC,IAAT,CAAcC,OAAd,EAAuB;AAClC,QAAMC,IAAI,GAAG,EAAb;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrCD,IAAAA,IAAI,CAACG,IAAL,CAAUF,CAAV;AACH;;AACD,QAAMG,QAAQ,GAAGL,OAAO,CAACM,GAAR,CAAYC,MAAM,IAAE;AACjC,UAAMC,GAAG,GAAG,EAAZ;AACAD,IAAAA,MAAM,CAACD,GAAP,CAAWG,MAAM,IAAE;AACfR,MAAAA,IAAI,CAACS,OAAL,CAAaC,GAAG,IAAE;AACd,eAAOH,GAAG,CAACJ,IAAJ,CAAS;AAACQ,UAAAA,KAAK,EAACH,MAAP;AAAeI,UAAAA,EAAE,EAAC,YAAUf,MAAM,EAAlC;AAAsCgB,UAAAA,GAAG,EAAChB,MAAM,EAAhD;AAAoDU,UAAAA,GAAG,EAACG;AAAxD,SAAT,CAAP;AACH,OAFD;AAGH,KAJD;AAKA,WAAOH,GAAP;AACH,GARgB,CAAjB;AASAO,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AAEA,QAAMY,SAAS,GAAGZ,QAAQ,CAACC,GAAT,CAAaE,GAAG,IAAE;AAChC,QAAIS,SAAS,GAAG,EAAhB;AACAT,IAAAA,GAAG,CAACF,GAAJ,CAAQG,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACG,KAAP,KAAiB,KAApB,EAA2B;AACvBK,QAAAA,SAAS,CAACb,IAAV,CAAe,CAAf;AACH;;AACD,UAAGK,MAAM,CAACG,KAAP,KAAiB,IAApB,EAA0B;AACtBK,QAAAA,SAAS,CAACb,IAAV,CAAe,CAAf;AACH;AACJ,KAPD;AAQA,WAAOa,SAAP;AACH,GAXiB,CAAlB;AAaA,QAAMC,QAAQ,GAAGD,SAAS,CAACX,GAAV,CAAca,GAAG,IAAG;AACjC,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;AAEAF,IAAAA,GAAG,CAACT,OAAJ,CAAYC,GAAG,IAAE;AACb,UAAGA,GAAG,KAAK,CAAX,EAAc;AACVS,QAAAA,cAAc,CAAChB,IAAf,CAAoBiB,KAApB;AACAA,QAAAA,KAAK,GAAG,CAAR;AACH;;AACD,UAAGV,GAAG,KAAK,CAAX,EAAc;AACVU,QAAAA,KAAK;AACR;AACJ,KARD;AASAD,IAAAA,cAAc,CAAChB,IAAf,CAAoBiB,KAApB;AACA,WAAOD,cAAP;AACH,GAfgB,CAAjB;AAiBA,QAAME,OAAO,GAAGJ,QAAQ,CAACZ,GAAT,CAAaa,GAAG,IAAG;AAC/B,UAAMI,QAAQ,GAAIZ,GAAD,IAASA,GAAG,KAAK,CAAlC;;AAEA,QAAIa,GAAJ;;AAEA,QAAGL,GAAG,CAACM,KAAJ,CAAUF,QAAV,CAAH,EAAwB;AACpBC,MAAAA,GAAG,GAAG;AAACvB,QAAAA,IAAI,EAAC;AAAN,OAAN;AACH,KAFD,MAEO;AACH,YAAMyB,SAAS,GAAGP,GAAG,CAACQ,MAAJ,CAAWhB,GAAG,IAAIA,GAAG,KAAK,CAA1B,CAAlB;AACAa,MAAAA,GAAG,GAAG;AAACvB,QAAAA,IAAI,EAACyB,SAAS,CAACE,IAAV;AAAN,OAAN;AACH;;AAED,WAAOJ,GAAP;AACH,GAbe,CAAhB;AAeA,SAAOF,OAAP;AACH;KA9DuBvB,I","sourcesContent":["import { nanoid } from \"nanoid\";\n\nexport default function Rows(rawRows) {\n    const nums = [];\n    for(let i = 1; i <= rawRows.length; i++) {\n        nums.push(i);\n    }\n    const gameRows = rawRows.map(rawRow=>{\n        const row = [];\n        rawRow.map(square=>{\n            nums.forEach(num=>{\n                return row.push({value:square, id:\"square-\"+nanoid(), key:nanoid(), row:num})\n            })\n        })\n        return row;\n    })\n    console.log(gameRows);\n\n    const sequences = gameRows.map(row=>{\n        let sequences = [];\n        row.map(square=>{\n            if(square.value === false) {\n                sequences.push(0);\n            }\n            if(square.value === true) {\n                sequences.push(1);\n            }\n        })\n        return sequences;\n    });\n\n    const rowCount = sequences.map(seq =>{        \n        let countSequences = [];\n        let count = 0;\n\n        seq.forEach(num=>{\n            if(num === 0) {\n                countSequences.push(count);\n                count = 0;\n            }\n            if(num === 1) {\n                count++\n            }\n        });\n        countSequences.push(count);\n        return countSequences;\n    });\n\n    const rowNums = rowCount.map(seq=> {\n        const onlyZero = (num) => num === 0;\n\n        let obj;\n\n        if(seq.every(onlyZero)) {\n            obj = {nums:\"0\"};\n        } else {\n            const cleanNums = seq.filter(num => num !== 0);\n            obj = {nums:cleanNums.join()};\n        }\n\n        return obj;\n    });\n\n    return rowNums;\n}"]},"metadata":{},"sourceType":"module"}