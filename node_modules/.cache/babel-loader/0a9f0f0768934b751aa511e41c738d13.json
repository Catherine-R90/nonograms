{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const [gameRows, setGameRows] = useState(props.gameRows);\n  const [boardRows, setBoardRows] = useState('');\n  const rowContent = {\n    value: false\n  };\n  const rawRow = new Array(props.length).fill(rowContent);\n  const rows = rawRow.map(row => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, row);\n  });\n  const columns = new Array(props.height).fill(rows);\n  setBoardRows(columns);\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      winState: winState,\n      setBoardRows: setBoardRows // gameRows={gameRows}\n      // boardRows={boardRows}\n\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length;\n    const gameVals = gameRows.map(gameRow => {\n      gameRow.map(square => {\n        return square.value;\n      });\n    });\n    const boardVals = boardRows.map(boardRow => {\n      boardRow.map(square => {\n        return square.value;\n      });\n    }); // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}. game values: ${gameVals}. board values: ${boardVals}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [winState(), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"5tjs+iq4Y7ZOSEKtl7atwpTtVe0=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","setGameRows","boardRows","setBoardRows","rowContent","value","rawRow","Array","length","fill","rows","map","row","Object","assign","id","columns","height","board","winState","isArray","gameVals","gameRow","square","boardVals","boardRow","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAACG,KAAK,CAACC,QAAP,CAAxC;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMQ,UAAU,GAAG;AAACC,IAAAA,KAAK,EAAC;AAAP,GAAnB;AACA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUR,KAAK,CAACS,MAAhB,EAAwBC,IAAxB,CAA6BL,UAA7B,CAAf;AACA,QAAMM,IAAI,GAAGJ,MAAM,CAACK,GAAP,CAAWC,GAAG,IAAG;AAC1B,WAAOC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,YAAUpB,MAAM;AAApB,KAAd,EAAuCiB,GAAvC,CAAP;AACH,GAFY,CAAb;AAGA,QAAMI,OAAO,GAAG,IAAIT,KAAJ,CAAUR,KAAK,CAACkB,MAAhB,EAAwBR,IAAxB,CAA6BC,IAA7B,CAAhB;AACAP,EAAAA,YAAY,CAACa,OAAD,CAAZ;AAEA,QAAME,KAAK,GAAGhB,SAAS,CAACS,GAAV,CAAcC,GAAG,IAAI;AAC/B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA,GADT;AAGI,MAAA,QAAQ,EAAEO,QAHd;AAII,MAAA,YAAY,EAAEhB,YAJlB,CAKI;AACA;;AANJ,OAES,SAAOR,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH,GAXa,CAAd;;AAaA,WAASwB,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,OAAO,GAAGb,KAAK,CAACa,OAAN,CAAcpB,QAAd,KAA2BO,KAAK,CAACa,OAAN,CAAclB,SAAd,CAA3C;AACA,UAAMM,MAAM,GAAGR,QAAQ,CAACQ,MAAT,KAAoBN,SAAS,CAACM,MAA7C;AACA,UAAMa,QAAQ,GAAGrB,QAAQ,CAACW,GAAT,CAAaW,OAAO,IAAI;AACrCA,MAAAA,OAAO,CAACX,GAAR,CAAYY,MAAM,IAAE;AAChB,eAAOA,MAAM,CAAClB,KAAd;AACH,OAFD;AAGH,KAJgB,CAAjB;AAKA,UAAMmB,SAAS,GAAGtB,SAAS,CAACS,GAAV,CAAcc,QAAQ,IAAI;AACxCA,MAAAA,QAAQ,CAACd,GAAT,CAAaY,MAAM,IAAE;AACjB,eAAOA,MAAM,CAAClB,KAAd;AACH,OAFD;AAGH,KAJiB,CAAlB,CAVgB,CAehB;;AAGA,WAAOqB,OAAO,CAACC,GAAR,CAAa,aAAYP,OAAQ,aAAYZ,MAAO,kBAAiBa,QAAS,mBAAkBG,SAAU,EAA1G,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACKL,QAAQ,EADb,EAEKD,KAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GApDuBpB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const [gameRows, setGameRows] = useState(props.gameRows);\n    const [boardRows, setBoardRows] = useState('');\n\n    const rowContent = {value:false};\n    const rawRow = new Array(props.length).fill(rowContent);\n    const rows = rawRow.map(row =>{\n        return Object.assign({id:\"square-\"+nanoid()}, row)    \n    });\n    const columns = new Array(props.height).fill(rows)\n    setBoardRows(columns);\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                winState={winState}\n                setBoardRows={setBoardRows}\n                // gameRows={gameRows}\n                // boardRows={boardRows}\n            />\n        );\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        const gameVals = gameRows.map(gameRow => {\n            gameRow.map(square=>{\n                return square.value;\n            })\n        })\n        const boardVals = boardRows.map(boardRow => {\n            boardRow.map(square=>{\n                return square.value;\n            })\n        })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}. game values: ${gameVals}. board values: ${boardVals}`)\n    }\n\n    return (   \n        <div className=\"board\">\n            {winState()}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}