{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const bRows = Array.from(gameRows, [value => false, id => \"square-\" + nanoid(), key => nanoid()]); // const bSquares = bRows.map(square => {\n  //     return {square, value:false, id:\"square-\"+nanoid(), key:nanoid()}\n  // });\n\n  const [boardRows, setBoardRows] = useState(bRows); // const rawRow = new Array(props.length).fill({value:false, id:\"square-\"+nanoid()});\n  // const rows = rawRow.map(square =>{\n  //     return Object.assign({id:\"square-\"+nanoid()}, square);  \n  // });\n  // var boardRows = [];\n  // var squares = {};\n  // for(let i = 0; i < props.height; i++) {\n  //     for(let j = 0; j < props.length; j++) {\n  //         boardRows[i] = [          \n  //             squares[j] = {\n  //                 value: false, id:\"square-\"+nanoid(), key:nanoid()\n  //             }\n  //         ];\n  //     }\n  // }\n  // const cols = new Array(props.height).fill(rows);\n  // const [columns, setColumns] = useState(cols);\n\n  const updateRow = id => {// const updatedRow = boardRows.map(square => {\n    //     if(square.id === id) {\n    //         return {...square, value:!square.value}\n    //     }\n    //     return square;\n    // })\n    // const updatedCol = \n    // setBoardRows(updatedRow);\n    // setColumns(updatedCol);\n  };\n\n  const board = boardRows.map(row => {\n    // return (\n    //     <Row \n    //         row={row}\n    //         key={'row-'+nanoid()}\n    //         // winState={winState}\n    //         // updateRow={updateRow}\n    //     />\n    // );\n    console.log(boardRows);\n  });\n\n  function winState() {\n    // const a = gameRows;\n    // const b = boardRows;\n    const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n    const length = gameRows.length === boardRows.length; // const gameVals = gameRows.map(gameRow => {\n    //     gameRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const boardVals = boardRows.map(boardRow => {\n    //     boardRow.map(square=>{\n    //         return square.value;\n    //     });\n    // })\n    // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n    return console.log(`is array: ${isArray}. length: ${length}.`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"taI91rsSe5axfKg7icm1DlUp8A4=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","bRows","Array","from","value","id","key","boardRows","setBoardRows","updateRow","board","map","row","console","log","winState","isArray","length"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AAEA,QAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWH,QAAX,EAAqB,CAACI,KAAK,IAAE,KAAR,EAAeC,EAAE,IAAE,YAAUV,MAAM,EAAnC,EAAuCW,GAAG,IAAEX,MAAM,EAAlD,CAArB,CAAd,CAHiC,CAKjC;AACA;AACA;;AAEA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAACK,KAAD,CAA1C,CATiC,CAWjC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,QAAMQ,SAAS,GAAIJ,EAAD,IAAO,CACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAVD;;AAYA,QAAMK,KAAK,GAAGH,SAAS,CAACI,GAAV,CAAcC,GAAG,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,SAAZ;AACH,GAVa,CAAd;;AAYA,WAASQ,QAAT,GAAoB;AAChB;AACA;AACA,UAAMC,OAAO,GAAGd,KAAK,CAACc,OAAN,CAAchB,QAAd,KAA2BE,KAAK,CAACc,OAAN,CAAcT,SAAd,CAA3C;AACA,UAAMU,MAAM,GAAGjB,QAAQ,CAACiB,MAAT,KAAoBV,SAAS,CAACU,MAA7C,CAJgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,WAAOJ,OAAO,CAACC,GAAR,CAAa,aAAYE,OAAQ,aAAYC,MAAO,GAApD,CAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cAEKP;AAFL;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAnFuBZ,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const bRows = Array.from(gameRows, [value=>false, id=>\"square-\"+nanoid(), key=>nanoid()]);\n\n    // const bSquares = bRows.map(square => {\n    //     return {square, value:false, id:\"square-\"+nanoid(), key:nanoid()}\n    // });\n\n    const [boardRows, setBoardRows] = useState(bRows);\n\n    // const rawRow = new Array(props.length).fill({value:false, id:\"square-\"+nanoid()});\n    // const rows = rawRow.map(square =>{\n    //     return Object.assign({id:\"square-\"+nanoid()}, square);  \n    // });\n\n    // var boardRows = [];\n    // var squares = {};\n    // for(let i = 0; i < props.height; i++) {\n    //     for(let j = 0; j < props.length; j++) {\n    //         boardRows[i] = [          \n    //             squares[j] = {\n    //                 value: false, id:\"square-\"+nanoid(), key:nanoid()\n    //             }\n    //         ];\n    //     }\n    // }\n\n    // const cols = new Array(props.height).fill(rows);\n   \n    // const [columns, setColumns] = useState(cols);\n\n    const updateRow = (id) =>{\n        // const updatedRow = boardRows.map(square => {\n        //     if(square.id === id) {\n        //         return {...square, value:!square.value}\n        //     }\n        //     return square;\n        // })\n        // const updatedCol = \n        // setBoardRows(updatedRow);\n        // setColumns(updatedCol);\n    }\n\n    const board = boardRows.map(row => {\n        // return (\n        //     <Row \n        //         row={row}\n        //         key={'row-'+nanoid()}\n        //         // winState={winState}\n        //         // updateRow={updateRow}\n        //     />\n        // );\n        console.log(boardRows);\n    });\n\n    function winState() {\n        // const a = gameRows;\n        // const b = boardRows;\n        const isArray = Array.isArray(gameRows) && Array.isArray(boardRows);\n        const length = gameRows.length === boardRows.length;\n        // const gameVals = gameRows.map(gameRow => {\n        //     gameRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const boardVals = boardRows.map(boardRow => {\n        //     boardRow.map(square=>{\n        //         return square.value;\n        //     });\n        // })\n        // const matchVals = gameRows.every((gameRows.value, index) => value === boardRows[index]);\n\n\n        return console.log(`is array: ${isArray}. length: ${length}.`)\n    }\n\n    return (   \n        <div className=\"board\">\n\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}