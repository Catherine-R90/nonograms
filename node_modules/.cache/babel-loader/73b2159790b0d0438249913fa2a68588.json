{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\nimport CheckRow from \"./Helpers/CheckRow\";\nimport CheckCol from \"./Helpers/CheckCol\";\nimport WinState from \"./Helpers/WinState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const [rowNums, setRowNums] = useState(props.rowNums);\n  const [colNums, setColNums] = useState(props.colNums);\n  const rowNumbers = rowNums.map(row => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: row.nums,\n      rowId: row.rowId,\n      complete: false\n    }, \"num-\" + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this);\n  });\n  const colNumbers = colNums.map(col => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: col.nums,\n      rowId: col.rowId,\n      complete: false\n    }, \"num-\" + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  });\n  const bRows = gameRows.map(row => {\n    const boardRow = row.map(square => {\n      return {\n        square,\n        value: false,\n        rowindex: square.rowindex,\n        colindex: square.colindex,\n        id: \"square-\" + nanoid(),\n        key: nanoid()\n      };\n    });\n    return boardRow;\n  });\n  const [boardRows, setBoardRows] = useState(bRows);\n\n  const handleClick = (e, id) => {\n    let rowId;\n    let colId;\n    const updatedRow = boardRows.map(row => {\n      const updatedSquare = row.map(square => {\n        if (square.id === id) {\n          rowId = square.rowindex;\n          colId = square.colindex;\n\n          if (e.type === 'click') {\n            return { ...square,\n              value: !square.value\n            };\n          } else if (e.type === 'contextmenu') {\n            e.preventDefault();\n\n            if (square.value === 'x-square') {\n              return { ...square,\n                value: false\n              };\n            } else {\n              return { ...square,\n                value: \"x-square\"\n              };\n            }\n          }\n        }\n\n        return square;\n      });\n      return updatedSquare;\n    });\n    setBoardRows(updatedRow);\n\n    if (CheckRow(gameRows, updatedRow, rowId) === true) {\n      const completedRow = updatedRow.map(row => {\n        const completedSquares = row.map(square => {\n          if (square.value === false && square.rowindex === rowId) {\n            return { ...square,\n              value: \"x-square\"\n            };\n          }\n\n          return square;\n        });\n        return completedSquares;\n      });\n      setBoardRows(completedRow);\n      const updatedRowNums = rowNums.map(num => {\n        if (num.rowId === rowId) {\n          console.log(\"found!\" + num.rowId);\n          return { ...num,\n            complete: true\n          };\n        }\n\n        return num;\n      });\n      setRowNums(updatedRowNums);\n    }\n\n    if (CheckCol(gameRows, updatedRow, colId) === true) {\n      const completedCol = updatedRow.map(row => {\n        const completedColSquares = row.map(square => {\n          if (square.value === false & square.colindex === colId) {\n            return { ...square,\n              value: \"x-square\"\n            };\n          }\n\n          return square;\n        });\n        return completedColSquares;\n      });\n      setBoardRows(completedCol);\n    }\n  };\n\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      handleClick: handleClick\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  });\n  useEffect(() => {\n    if (WinState(gameRows, boardRows) === true) {\n      alert(\"Woohoo you won!\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row-nums\",\n      children: rowNumbers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-nums\",\n      children: colNumbers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"S5jS7VZrfoSwHgVVEm+x6sCh4f8=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useEffect","useState","Row","Number","CheckRow","CheckCol","WinState","Board","props","gameRows","rowNums","setRowNums","colNums","setColNums","rowNumbers","map","row","nums","rowId","colNumbers","col","bRows","boardRow","square","value","rowindex","colindex","id","key","boardRows","setBoardRows","handleClick","e","colId","updatedRow","updatedSquare","type","preventDefault","completedRow","completedSquares","updatedRowNums","num","console","log","complete","completedCol","completedColSquares","board","alert"],"mappings":"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","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\nimport CheckRow from \"./Helpers/CheckRow\";\nimport CheckCol from \"./Helpers/CheckCol\";\nimport WinState from \"./Helpers/WinState\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n    const [rowNums, setRowNums] = useState(props.rowNums);\n    const [colNums, setColNums] = useState(props.colNums);\n\n    const rowNumbers = rowNums.map(row=>{\n        return <Number number={row.nums} rowId={row.rowId} key={\"num-\"+nanoid()} complete={false}/>;\n    });\n\n    const colNumbers = colNums.map(col => {\n        return <Number number={col.nums} rowId={col.rowId} key={\"num-\"+nanoid()} complete={false}/>;\n    });\n\n    const bRows = gameRows.map(row=>{\n        const boardRow = row.map(square=>{\n            return {square, value:false, rowindex:square.rowindex, colindex:square.colindex, id:\"square-\"+nanoid(), key:nanoid()}\n        })\n        return boardRow;\n    });\n\n    const [boardRows, setBoardRows] = useState(bRows);\n\n\n    const handleClick = (e, id) => {\n        let rowId;\n        let colId;\n        const updatedRow = boardRows.map(row => {\n            const updatedSquare = row.map(square=>{\n                if(square.id === id) {\n                    rowId = square.rowindex;\n                    colId = square.colindex;\n\n                    if(e.type === 'click') {\n                        return {...square, value: !square.value};\n                    }\n                    else if(e.type === 'contextmenu'){\n                        e.preventDefault();\n                        if(square.value === 'x-square') {\n                            return {...square, value:false}\n                        } else {\n                            return {...square, value:\"x-square\"};\n                        }\n                    }\n                }\n                \n                return square;\n            })\n            return updatedSquare\n        });\n        setBoardRows(updatedRow);\n        \n        if(CheckRow(gameRows, updatedRow, rowId) === true) {\n            const completedRow = updatedRow.map(row=>{\n                const completedSquares = row.map(square=>{\n                    if(square.value === false && square.rowindex === rowId) {\n                        return {...square, value:\"x-square\"}\n                    }\n                    return square;\n                });\n                return completedSquares;\n            });\n            setBoardRows(completedRow);\n\n            const updatedRowNums = rowNums.map(num=>{\n                if(num.rowId === rowId) {\n                    console.log(\"found!\" + num.rowId)\n                    return {...num, complete:true}\n                }\n                return num;\n            });\n            setRowNums(updatedRowNums);\n        }\n\n        if(CheckCol(gameRows, updatedRow, colId) === true) {\n            const completedCol = updatedRow.map(row=>{\n                const completedColSquares = row.map(square=>{\n                    if(square.value === false & square.colindex === colId) {\n                        return {...square, value:\"x-square\"}\n                    }\n                    return square;\n                });\n                return completedColSquares;\n            });\n            setBoardRows(completedCol);\n        }\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                handleClick={handleClick}\n            />\n        );  \n    });\n\n    useEffect(()=>{\n        if(WinState(gameRows, boardRows) === true) {\n            alert(\"Woohoo you won!\");\n        }\n    });\n\n    return (\n        <div className=\"board\">\n            <div className=\"row-nums\">{rowNumbers}</div>\n            <div className=\"col-nums\">{colNumbers}</div>\n            <div className=\"game-board\">{board}</div>\n        </div>        \n    );\n}"]},"metadata":{},"sourceType":"module"}