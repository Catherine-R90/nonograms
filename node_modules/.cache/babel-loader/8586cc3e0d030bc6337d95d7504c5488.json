{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Grid.js\";\nimport { nanoid } from \"nanoid\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Grid(props) {\n  const boardRows = props.boardRows;\n  const chunkSize = 5;\n  const rowChunk = boardRows.map((row, i) => {\n    return i % chunkSize === 0 ? boardRows.slice(i, i + chunkSize) : null;\n  }).filter(row => {\n    return row;\n  });\n  rowChunk.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row\n    }, \"row-\" + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this);\n  });\n  return console.log(rowChunk);\n}\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Grid.js"],"names":["nanoid","Row","Grid","props","boardRows","chunkSize","rowChunk","map","row","i","slice","filter","console","log"],"mappings":";AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAChC,QAAMC,SAAS,GAAGD,KAAK,CAACC,SAAxB;AACA,QAAMC,SAAS,GAAG,CAAlB;AACA,QAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAV,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAU;AACrC,WAAOA,CAAC,GAAGJ,SAAJ,KAAkB,CAAlB,GAAsBD,SAAS,CAACM,KAAV,CAAgBD,CAAhB,EAAmBA,CAAC,GAAGJ,SAAvB,CAAtB,GAA0D,IAAjE;AACH,GAFgB,EAEdM,MAFc,CAEPH,GAAG,IAAI;AAAC,WAAOA,GAAP;AAAW,GAFZ,CAAjB;AAIAF,EAAAA,QAAQ,CAACC,GAAT,CAAaC,GAAG,IAAE;AACd,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA;AADT,OAES,SAAOR,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GAPD;AAQA,SACIY,OAAO,CAACC,GAAR,CAAYP,QAAZ,CADJ;AAGH;KAlBuBJ,I","sourcesContent":["import { nanoid } from \"nanoid\";\nimport Row from \"./Row\";\n\nexport default function Grid(props) {\n    const boardRows = props.boardRows;\n    const chunkSize = 5;\n    const rowChunk = boardRows.map((row, i)=>{\n        return i % chunkSize === 0 ? boardRows.slice(i, i + chunkSize) : null;\n    }).filter(row => {return row});\n\n    rowChunk.map(row=>{\n        return (\n            <Row \n                row={row}\n                key={\"row-\"+nanoid()}\n            />\n        )\n    })\n    return (\n        console.log(rowChunk)\n    )\n}"]},"metadata":{},"sourceType":"module"}