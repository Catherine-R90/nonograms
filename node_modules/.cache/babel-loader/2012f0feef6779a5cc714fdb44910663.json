{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const numbers = gameRows.map(row => {\n    let t = [];\n    let f = [];\n    row.map(square => {\n      if (square.value === true) {\n        return t = square;\n      } else {\n        return f = square;\n      }\n    });\n    const trueCount = t.count();\n    const falseCount = f.count();\n  });\n  const bRows = gameRows.map(row => {\n    const boardRow = row.map(square => {\n      return {\n        square,\n        value: false,\n        id: \"square-\" + nanoid(),\n        key: nanoid()\n      };\n    });\n    return boardRow;\n  });\n  const [boardRows, setBoardRows] = useState(bRows);\n\n  const handleClick = id => {\n    const updatedRow = boardRows.map(row => {\n      const updatedSquare = row.map(square => {\n        if (square.id === id) {\n          return { ...square,\n            value: !square.value\n          };\n        }\n\n        return square;\n      });\n      return updatedSquare;\n    });\n    setBoardRows(updatedRow);\n  };\n\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      handleClick: handleClick\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  });\n\n  function winState() {\n    const gameVals = gameRows.map(gameRow => {\n      const values = gameRow.map(square => {\n        return square.value;\n      });\n      return values;\n    });\n    const boardVals = boardRows.map(boardRow => {\n      const values = boardRow.map(square => {\n        return square.value;\n      });\n      return values;\n    });\n    const isArray = Array.isArray(gameVals) && Array.isArray(boardVals);\n    const length = gameVals.length === boardVals.length;\n    const matchVals = JSON.stringify(boardVals) === JSON.stringify(gameVals);\n\n    if (isArray === true && length === true && matchVals === true) {\n      return alert(\"Woohoo, you won!\");\n    }\n  }\n\n  useEffect(() => {\n    winState();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [console.log(numbers), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"PtkpVBdGp5rXCiFNiFTrMw2VYZ0=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useEffect","useState","Row","Board","props","gameRows","numbers","map","row","t","f","square","value","trueCount","count","falseCount","bRows","boardRow","id","key","boardRows","setBoardRows","handleClick","updatedRow","updatedSquare","board","winState","gameVals","gameRow","values","boardVals","isArray","Array","length","matchVals","JSON","stringify","alert","console","log"],"mappings":"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","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const numbers = gameRows.map(row=>{\n        let t = [];\n        let f = [];\n        row.map(square =>{\n            if(square.value === true) {\n                return t = square;\n            } else {\n                return f = square;\n            }\n        });\n        const trueCount = t.count();\n        const falseCount = f.count();\n    })\n\n    const bRows = gameRows.map(row=>{\n        const boardRow = row.map(square=>{\n            return {square, value:false, id:\"square-\"+nanoid(), key:nanoid()}\n        })\n        return boardRow;\n    });\n\n    const [boardRows, setBoardRows] = useState(bRows);\n\n\n    const handleClick = (id) => {\n        const updatedRow = boardRows.map(row => {\n            const updatedSquare = row.map(square=>{\n                if(square.id === id) {\n                    return {...square, value: !square.value}\n                }\n                return square;\n            })\n            return updatedSquare\n        });\n        setBoardRows(updatedRow);\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                handleClick={handleClick}\n            />\n        );\n    });\n\n    function winState() {\n        const gameVals = gameRows.map(gameRow => {\n            const values = gameRow.map(square=>{\n                return square.value;\n            });\n            return values;\n        })\n        \n        const boardVals = boardRows.map(boardRow => {\n            const values = boardRow.map(square=>{\n                return square.value;\n            });\n            return values;\n        })\n\n        const isArray = Array.isArray(gameVals) && Array.isArray(boardVals);\n        const length = gameVals.length === boardVals.length;\n        const matchVals = JSON.stringify(boardVals) === JSON.stringify(gameVals);\n\n        if(isArray === true && length === true && matchVals === true) {\n            return alert(\"Woohoo, you won!\");\n        }\n    }\n\n    useEffect(()=>{\n        winState();\n    })\n\n    return (   \n        <div className=\"board\">\n            {console.log(numbers)}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}