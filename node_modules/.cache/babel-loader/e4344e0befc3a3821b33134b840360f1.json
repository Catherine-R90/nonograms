{"ast":null,"code":"export default function Columns(gameRows) {\n  // ASSIGN COL ROWS\n  // const nums = gameRows.map((row, index) => row[index].col);\n  const nums = [];\n  gameRows.map(row => {\n    row.map(square => {\n      return nums.push(square.col);\n    });\n  });\n  console.log(nums);\n  const gameCols = [];\n  nums.forEach(num => {\n    const col = [];\n    gameRows.map(row => {\n      const colNum = row.map(square => {\n        if (square.col === num) {\n          return col.push(square);\n        }\n      });\n      return colNum;\n    });\n    return gameCols.push(col);\n  }); // GET NUMBERS FOR COLS\n\n  const sequences = gameCols.map(col => {\n    let sequences = [];\n    col.map(square => {\n      if (square.value === false) {\n        sequences.push(0);\n      }\n\n      if (square.value === true) {\n        sequences.push(1);\n      }\n    });\n    return sequences;\n  });\n  const colCount = sequences.map(seq => {\n    let countSequences = [];\n    let count = 0;\n    seq.forEach(num => {\n      if (num === 0) {\n        countSequences.push(count);\n        count = 0;\n      }\n\n      if (num === 1) {\n        count++;\n      }\n    });\n    countSequences.push(count);\n    return countSequences;\n  });\n  const colNums = colCount.map(seq => {\n    const onlyZero = num => num === 0;\n\n    let obj;\n\n    if (seq.every(onlyZero)) {\n      obj = {\n        nums: \"0\"\n      };\n    } else {\n      const cleanNums = seq.filter(num => num !== 0);\n      obj = {\n        nums: cleanNums.join()\n      };\n    }\n\n    return obj;\n  });\n  return colNums;\n}\n_c = Columns;\n\nvar _c;\n\n$RefreshReg$(_c, \"Columns\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/ColumnHelper.js"],"names":["Columns","gameRows","nums","map","row","square","push","col","console","log","gameCols","forEach","num","colNum","sequences","value","colCount","seq","countSequences","count","colNums","onlyZero","obj","every","cleanNums","filter","join"],"mappings":"AAAA,eAAe,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AACtC;AACA;AACA,QAAMC,IAAI,GAAG,EAAb;AACAD,EAAAA,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AACdA,IAAAA,GAAG,CAACD,GAAJ,CAAQE,MAAM,IAAE;AACZ,aAAOH,IAAI,CAACI,IAAL,CAAUD,MAAM,CAACE,GAAjB,CAAP;AACH,KAFD;AAGH,GAJD;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AAEA,QAAMQ,QAAQ,GAAG,EAAjB;AAEAR,EAAAA,IAAI,CAACS,OAAL,CAAaC,GAAG,IAAE;AACd,UAAML,GAAG,GAAG,EAAZ;AACAN,IAAAA,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AACd,YAAMS,MAAM,GAAGT,GAAG,CAACD,GAAJ,CAAQE,MAAM,IAAE;AAC3B,YAAGA,MAAM,CAACE,GAAP,KAAeK,GAAlB,EAAuB;AACnB,iBAAOL,GAAG,CAACD,IAAJ,CAASD,MAAT,CAAP;AACH;AACJ,OAJc,CAAf;AAKA,aAAOQ,MAAP;AACH,KAPD;AAQA,WAAOH,QAAQ,CAACJ,IAAT,CAAcC,GAAd,CAAP;AACH,GAXD,EAbsC,CA0BtC;;AACA,QAAMO,SAAS,GAAGJ,QAAQ,CAACP,GAAT,CAAaI,GAAG,IAAE;AAChC,QAAIO,SAAS,GAAG,EAAhB;AACAP,IAAAA,GAAG,CAACJ,GAAJ,CAAQE,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACU,KAAP,KAAiB,KAApB,EAA2B;AACvBD,QAAAA,SAAS,CAACR,IAAV,CAAe,CAAf;AACH;;AACD,UAAGD,MAAM,CAACU,KAAP,KAAiB,IAApB,EAA0B;AACtBD,QAAAA,SAAS,CAACR,IAAV,CAAe,CAAf;AACH;AACJ,KAPD;AAQA,WAAOQ,SAAP;AACH,GAXiB,CAAlB;AAaA,QAAME,QAAQ,GAAGF,SAAS,CAACX,GAAV,CAAcc,GAAG,IAAG;AACjC,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;AAEAF,IAAAA,GAAG,CAACN,OAAJ,CAAYC,GAAG,IAAE;AACb,UAAGA,GAAG,KAAK,CAAX,EAAc;AACVM,QAAAA,cAAc,CAACZ,IAAf,CAAoBa,KAApB;AACAA,QAAAA,KAAK,GAAG,CAAR;AACH;;AACD,UAAGP,GAAG,KAAK,CAAX,EAAc;AACVO,QAAAA,KAAK;AACR;AACJ,KARD;AASAD,IAAAA,cAAc,CAACZ,IAAf,CAAoBa,KAApB;AACA,WAAOD,cAAP;AACH,GAfgB,CAAjB;AAiBA,QAAME,OAAO,GAAGJ,QAAQ,CAACb,GAAT,CAAac,GAAG,IAAG;AAC/B,UAAMI,QAAQ,GAAIT,GAAD,IAASA,GAAG,KAAK,CAAlC;;AAEA,QAAIU,GAAJ;;AAEA,QAAGL,GAAG,CAACM,KAAJ,CAAUF,QAAV,CAAH,EAAwB;AACpBC,MAAAA,GAAG,GAAG;AAACpB,QAAAA,IAAI,EAAC;AAAN,OAAN;AACH,KAFD,MAEO;AACH,YAAMsB,SAAS,GAAGP,GAAG,CAACQ,MAAJ,CAAWb,GAAG,IAAIA,GAAG,KAAK,CAA1B,CAAlB;AACAU,MAAAA,GAAG,GAAG;AAACpB,QAAAA,IAAI,EAACsB,SAAS,CAACE,IAAV;AAAN,OAAN;AACH;;AAED,WAAOJ,GAAP;AACH,GAbe,CAAhB;AAeA,SAAOF,OAAP;AACH;KAzEuBpB,O","sourcesContent":["export default function Columns(gameRows) {\n    // ASSIGN COL ROWS\n    // const nums = gameRows.map((row, index) => row[index].col);\n    const nums = []\n    gameRows.map(row=>{\n        row.map(square=>{\n            return nums.push(square.col);\n        });\n    });\n    console.log(nums)\n    \n    const gameCols = [];\n\n    nums.forEach(num=>{\n        const col = [];\n        gameRows.map(row=>{\n            const colNum = row.map(square=>{\n                if(square.col === num) {\n                    return col.push(square);\n                }\n            });\n            return colNum;\n        })\n        return gameCols.push(col);\n    });\n\n    // GET NUMBERS FOR COLS\n    const sequences = gameCols.map(col=>{\n        let sequences = [];\n        col.map(square=>{\n            if(square.value === false) {\n                sequences.push(0);\n            }\n            if(square.value === true) {\n                sequences.push(1);\n            }\n        })\n        return sequences;\n    });\n\n    const colCount = sequences.map(seq =>{        \n        let countSequences = [];\n        let count = 0;\n\n        seq.forEach(num=>{\n            if(num === 0) {\n                countSequences.push(count);\n                count = 0;\n            }\n            if(num === 1) {\n                count++\n            }\n        });\n        countSequences.push(count);\n        return countSequences;\n    });\n\n    const colNums = colCount.map(seq=> {\n        const onlyZero = (num) => num === 0;\n\n        let obj;\n\n        if(seq.every(onlyZero)) {\n            obj = {nums:\"0\"};\n        } else {\n            const cleanNums = seq.filter(num => num !== 0);\n            obj = {nums:cleanNums.join()};\n        }\n\n        return obj;\n    });\n\n    return colNums;\n}"]},"metadata":{},"sourceType":"module"}