{"ast":null,"code":"export default function Rows(gameRows) {\n  const sequences = gameRows.map(row => {\n    let sequences = [];\n    row.map(square => {\n      if (square.value === false) {\n        sequences.push(0);\n      }\n\n      if (square.value === true) {\n        sequences.push(1);\n      }\n    });\n    return sequences;\n  });\n  const rowCount = sequences.map(seq => {\n    let countSequences = [];\n    let count = 0;\n    seq.forEach(num => {\n      if (num === 0) {\n        countSequences.push(count);\n        count = 0;\n      }\n\n      if (num === 1) {\n        count++;\n      }\n    });\n    countSequences.push(count);\n    return countSequences;\n  });\n  const rowNums = rowCount.map((seq, index) => {\n    const onlyZero = num => num === 0;\n\n    console.log(seq, index);\n    let obj;\n\n    if (seq.every(onlyZero)) {\n      obj = {\n        nums: \"0\"\n      };\n    } else {\n      const cleanNums = seq.filter(num => num !== 0);\n      obj = {\n        nums: cleanNums.join()\n      };\n    }\n\n    return obj;\n  });\n  return rowNums;\n}\n_c = Rows;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rows\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Helpers/RowHelper.js"],"names":["Rows","gameRows","sequences","map","row","square","value","push","rowCount","seq","countSequences","count","forEach","num","rowNums","index","onlyZero","console","log","obj","every","nums","cleanNums","filter","join"],"mappings":"AAAA,eAAe,SAASA,IAAT,CAAcC,QAAd,EAAwB;AACnC,QAAMC,SAAS,GAAGD,QAAQ,CAACE,GAAT,CAAaC,GAAG,IAAE;AAChC,QAAIF,SAAS,GAAG,EAAhB;AACAE,IAAAA,GAAG,CAACD,GAAJ,CAAQE,MAAM,IAAE;AACZ,UAAGA,MAAM,CAACC,KAAP,KAAiB,KAApB,EAA2B;AACvBJ,QAAAA,SAAS,CAACK,IAAV,CAAe,CAAf;AACH;;AACD,UAAGF,MAAM,CAACC,KAAP,KAAiB,IAApB,EAA0B;AACtBJ,QAAAA,SAAS,CAACK,IAAV,CAAe,CAAf;AACH;AACJ,KAPD;AAQA,WAAOL,SAAP;AACH,GAXiB,CAAlB;AAaA,QAAMM,QAAQ,GAAGN,SAAS,CAACC,GAAV,CAAcM,GAAG,IAAG;AACjC,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,KAAK,GAAG,CAAZ;AAEAF,IAAAA,GAAG,CAACG,OAAJ,CAAYC,GAAG,IAAE;AACb,UAAGA,GAAG,KAAK,CAAX,EAAc;AACVH,QAAAA,cAAc,CAACH,IAAf,CAAoBI,KAApB;AACAA,QAAAA,KAAK,GAAG,CAAR;AACH;;AACD,UAAGE,GAAG,KAAK,CAAX,EAAc;AACVF,QAAAA,KAAK;AACR;AACJ,KARD;AASAD,IAAAA,cAAc,CAACH,IAAf,CAAoBI,KAApB;AACA,WAAOD,cAAP;AACH,GAfgB,CAAjB;AAiBA,QAAMI,OAAO,GAAGN,QAAQ,CAACL,GAAT,CAAa,CAACM,GAAD,EAAMM,KAAN,KAAe;AACxC,UAAMC,QAAQ,GAAIH,GAAD,IAASA,GAAG,KAAK,CAAlC;;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ,EAAiBM,KAAjB;AACA,QAAII,GAAJ;;AAEA,QAAGV,GAAG,CAACW,KAAJ,CAAUJ,QAAV,CAAH,EAAwB;AACpBG,MAAAA,GAAG,GAAG;AAACE,QAAAA,IAAI,EAAC;AAAN,OAAN;AACH,KAFD,MAEO;AACH,YAAMC,SAAS,GAAGb,GAAG,CAACc,MAAJ,CAAWV,GAAG,IAAIA,GAAG,KAAK,CAA1B,CAAlB;AACAM,MAAAA,GAAG,GAAG;AAACE,QAAAA,IAAI,EAACC,SAAS,CAACE,IAAV;AAAN,OAAN;AACH;;AAED,WAAOL,GAAP;AACH,GAbe,CAAhB;AAeA,SAAOL,OAAP;AACH;KA/CuBd,I","sourcesContent":["export default function Rows(gameRows) {\n    const sequences = gameRows.map(row=>{\n        let sequences = [];\n        row.map(square=>{\n            if(square.value === false) {\n                sequences.push(0);\n            }\n            if(square.value === true) {\n                sequences.push(1);\n            }\n        })\n        return sequences;\n    });\n\n    const rowCount = sequences.map(seq =>{        \n        let countSequences = [];\n        let count = 0;\n\n        seq.forEach(num=>{\n            if(num === 0) {\n                countSequences.push(count);\n                count = 0;\n            }\n            if(num === 1) {\n                count++\n            }\n        });\n        countSequences.push(count);\n        return countSequences;\n    });\n\n    const rowNums = rowCount.map((seq, index)=> {\n        const onlyZero = (num) => num === 0;\n        console.log(seq, index)\n        let obj;\n\n        if(seq.every(onlyZero)) {\n            obj = {nums:\"0\"};\n        } else {\n            const cleanNums = seq.filter(num => num !== 0);\n            obj = {nums:cleanNums.join()};\n        }\n\n        return obj;\n    });\n\n    return rowNums;\n}"]},"metadata":{},"sourceType":"module"}