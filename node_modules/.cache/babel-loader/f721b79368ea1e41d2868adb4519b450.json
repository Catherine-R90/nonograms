{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const [gameRows, setGameRows] = useState(props.gameRows);\n  const rowContent = {\n    value: false\n  };\n  const rawRow = new Array(props.length).fill(rowContent);\n  const rows = rawRow.map(row => {\n    return Object.assign({\n      id: \"square-\" + nanoid()\n    }, row);\n  });\n  const column = new Array(props.height).fill(rows);\n  const [boardRows, setBoardRows] = useState(rows);\n  const board = column.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  });\n\n  const winState = () => {\n    gameRows.map(gameRow => {\n      boardRows.map(boardRow => {\n        if (gameRow.value === boardRow.value) {\n          return console.log(\"success!\");\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [console.log(\"Game rows: \" + gameRows), console.log(\"Board rows: \" + boardRows), board]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"AjZFeMVGGDA3BLBUeN/yNdbCAoU=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useState","Row","Board","props","gameRows","setGameRows","rowContent","value","rawRow","Array","length","fill","rows","map","row","Object","assign","id","column","height","boardRows","setBoardRows","board","winState","gameRow","boardRow","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACjC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAACG,KAAK,CAACC,QAAP,CAAxC;AAEA,QAAME,UAAU,GAAG;AAACC,IAAAA,KAAK,EAAC;AAAP,GAAnB;AACA,QAAMC,MAAM,GAAG,IAAIC,KAAJ,CAAUN,KAAK,CAACO,MAAhB,EAAwBC,IAAxB,CAA6BL,UAA7B,CAAf;AACA,QAAMM,IAAI,GAAGJ,MAAM,CAACK,GAAP,CAAWC,GAAG,IAAG;AAC1B,WAAOC,MAAM,CAACC,MAAP,CAAc;AAACC,MAAAA,EAAE,EAAC,YAAUlB,MAAM;AAApB,KAAd,EAAuCe,GAAvC,CAAP;AACH,GAFY,CAAb;AAGA,QAAMI,MAAM,GAAG,IAAIT,KAAJ,CAAUN,KAAK,CAACgB,MAAhB,EAAwBR,IAAxB,CAA6BC,IAA7B,CAAf;AAEA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAACY,IAAD,CAA1C;AAEA,QAAMU,KAAK,GAAGJ,MAAM,CAACL,GAAP,CAAWC,GAAG,IAAI;AAC5B,wBACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEA;AADT,OAES,SAAOf,MAAM,EAFtB;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GAPa,CAAd;;AASA,QAAMwB,QAAQ,GAAG,MAAM;AACnBnB,IAAAA,QAAQ,CAACS,GAAT,CAAaW,OAAO,IAAE;AAClBJ,MAAAA,SAAS,CAACP,GAAV,CAAcY,QAAQ,IAAI;AACtB,YAAGD,OAAO,CAACjB,KAAR,KAAkBkB,QAAQ,CAAClB,KAA9B,EAAqC;AACjC,iBAAOmB,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAP;AACH;AACJ,OAJD;AAKH,KAND;AAOH,GARD;;AAUA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACKD,OAAO,CAACC,GAAR,CAAY,gBAAcvB,QAA1B,CADL,EAEKsB,OAAO,CAACC,GAAR,CAAY,iBAAeP,SAA3B,CAFL,EAGKE,KAHL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAtCuBpB,K;;KAAAA,K","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport Row from \"./Row\";\n\nexport default function Board(props) {\n    const [gameRows, setGameRows] = useState(props.gameRows);\n\n    const rowContent = {value:false};\n    const rawRow = new Array(props.length).fill(rowContent);\n    const rows = rawRow.map(row =>{\n        return Object.assign({id:\"square-\"+nanoid()}, row)    \n    });\n    const column = new Array(props.height).fill(rows);\n\n    const [boardRows, setBoardRows] = useState(rows);\n\n    const board = column.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n            />\n        );\n    });\n\n    const winState = () => {\n        gameRows.map(gameRow=>{\n            boardRows.map(boardRow => {\n                if(gameRow.value === boardRow.value) {\n                    return console.log(\"success!\")\n                }\n            });\n        });\n    }\n\n    return (\n        <div className=\"board\">\n            {console.log(\"Game rows: \"+gameRows)}\n            {console.log(\"Board rows: \"+boardRows)}\n            {board}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}