{"ast":null,"code":"var _jsxFileName = \"/var/www/dev_nonograms_com/src/components/Board.js\",\n    _s = $RefreshSig$();\n\nimport { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\nimport CheckRow from \"./Helpers/CheckRow\";\nimport CheckCol from \"./Helpers/CheckCol\";\nimport WinState from \"./Helpers/WinState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board(props) {\n  _s();\n\n  const gameRows = props.gameRows;\n  const rNums = props.rowNums.map(row => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: row.nums,\n      rowId: row.rowId,\n      colId: row.colId,\n      complete: false\n    }, \"num-\" + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, this);\n  });\n  const cNums = props.colNums.map(col => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: col.nums,\n      rowId: row.rowId,\n      colId: row.colId,\n      complete: false\n    }, \"num-\" + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  });\n  const [rowNums, setRowNums] = useState(rNums);\n  const [colNums, setColNums] = useState(cNums);\n  const bRows = gameRows.map(row => {\n    const boardRow = row.map(square => {\n      return {\n        square,\n        value: false,\n        rowindex: square.rowindex,\n        colindex: square.colindex,\n        id: \"square-\" + nanoid(),\n        key: nanoid()\n      };\n    });\n    return boardRow;\n  });\n  const [boardRows, setBoardRows] = useState(bRows);\n\n  const handleClick = (e, id) => {\n    let rowId;\n    let colId;\n    const updatedRow = boardRows.map(row => {\n      const updatedSquare = row.map(square => {\n        if (square.id === id) {\n          rowId = square.rowindex;\n          colId = square.colindex;\n\n          if (e.type === 'click') {\n            return { ...square,\n              value: !square.value\n            };\n          } else if (e.type === 'contextmenu') {\n            e.preventDefault();\n\n            if (square.value === 'x-square') {\n              return { ...square,\n                value: false\n              };\n            } else {\n              return { ...square,\n                value: \"x-square\"\n              };\n            }\n          }\n        }\n\n        return square;\n      });\n      return updatedSquare;\n    });\n    setBoardRows(updatedRow);\n\n    if (CheckRow(gameRows, updatedRow, rowId) === true) {\n      const completedRow = updatedRow.map(row => {\n        const completedSquares = row.map(square => {\n          if (square.value === false && square.rowindex === rowId) {\n            return { ...square,\n              value: \"x-square\"\n            };\n          }\n\n          return square;\n        });\n        return completedSquares;\n      });\n      setBoardRows(completedRow);\n    }\n\n    if (CheckCol(gameRows, updatedRow, colId) === true) {\n      const completedCol = updatedRow.map(row => {\n        const completedColSquares = row.map(square => {\n          if (square.value === false & square.colindex === colId) {\n            return { ...square,\n              value: \"x-square\"\n            };\n          }\n\n          return square;\n        });\n        return completedColSquares;\n      });\n      setBoardRows(completedCol);\n    }\n  };\n\n  const board = boardRows.map(row => {\n    return /*#__PURE__*/_jsxDEV(Row, {\n      row: row,\n      handleClick: handleClick\n    }, 'row-' + nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  });\n  useEffect(() => {\n    if (WinState(gameRows, boardRows) === true) {\n      alert(\"Woohoo you won!\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row-nums\",\n      children: rowNums\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-nums\",\n      children: colNums\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"KDN8uzrgKe13exFEKHaE8kTcM8A=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/var/www/dev_nonograms_com/src/components/Board.js"],"names":["nanoid","useEffect","useState","Row","Number","CheckRow","CheckCol","WinState","Board","props","gameRows","rNums","rowNums","map","row","nums","rowId","colId","cNums","colNums","col","setRowNums","setColNums","bRows","boardRow","square","value","rowindex","colindex","id","key","boardRows","setBoardRows","handleClick","e","updatedRow","updatedSquare","type","preventDefault","completedRow","completedSquares","completedCol","completedColSquares","board","alert"],"mappings":"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","sourcesContent":["import { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\nimport Row from \"./Row\";\nimport Number from \"./Number\";\nimport CheckRow from \"./Helpers/CheckRow\";\nimport CheckCol from \"./Helpers/CheckCol\";\nimport WinState from \"./Helpers/WinState\";\n\nexport default function Board(props) {\n    const gameRows = props.gameRows;\n\n    const rNums = props.rowNums.map(row=>{\n        return <Number number={row.nums} rowId={row.rowId} colId={row.colId} key={\"num-\"+nanoid()} complete={false}/>;\n    });\n    \n    const cNums = props.colNums.map(col => {\n        return <Number number={col.nums} rowId={row.rowId} colId={row.colId} key={\"num-\"+nanoid()} complete={false}/>;\n    });\n\n    const [rowNums, setRowNums] = useState(rNums);\n    const [colNums, setColNums] = useState(cNums);\n\n\n    const bRows = gameRows.map(row=>{\n        const boardRow = row.map(square=>{\n            return {square, value:false, rowindex:square.rowindex, colindex:square.colindex, id:\"square-\"+nanoid(), key:nanoid()}\n        })\n        return boardRow;\n    });\n\n    const [boardRows, setBoardRows] = useState(bRows);\n\n\n    const handleClick = (e, id) => {\n        let rowId;\n        let colId;\n        const updatedRow = boardRows.map(row => {\n            const updatedSquare = row.map(square=>{\n                if(square.id === id) {\n                    rowId = square.rowindex;\n                    colId = square.colindex;\n\n                    if(e.type === 'click') {\n                        return {...square, value: !square.value};\n                    }\n                    else if(e.type === 'contextmenu'){\n                        e.preventDefault();\n                        if(square.value === 'x-square') {\n                            return {...square, value:false}\n                        } else {\n                            return {...square, value:\"x-square\"};\n                        }\n                    }\n                }\n                \n                return square;\n            })\n            return updatedSquare\n        });\n        setBoardRows(updatedRow);\n        \n        if(CheckRow(gameRows, updatedRow, rowId) === true) {\n            const completedRow = updatedRow.map(row=>{\n                const completedSquares = row.map(square=>{\n                    if(square.value === false && square.rowindex === rowId) {\n                        return {...square, value:\"x-square\"}\n                    }\n                    return square;\n                });\n                return completedSquares;\n            });\n            setBoardRows(completedRow);\n        }\n\n        if(CheckCol(gameRows, updatedRow, colId) === true) {\n            const completedCol = updatedRow.map(row=>{\n                const completedColSquares = row.map(square=>{\n                    if(square.value === false & square.colindex === colId) {\n                        return {...square, value:\"x-square\"}\n                    }\n                    return square;\n                });\n                return completedColSquares;\n            });\n            setBoardRows(completedCol);\n        }\n    }\n\n    const board = boardRows.map(row => {\n        return (\n            <Row \n                row={row}\n                key={'row-'+nanoid()}\n                handleClick={handleClick}\n            />\n        );  \n    });\n\n    useEffect(()=>{\n        if(WinState(gameRows, boardRows) === true) {\n            alert(\"Woohoo you won!\");\n        }\n    });\n\n    return (\n        <div className=\"board\">\n            <div className=\"row-nums\">{rowNums}</div>\n            <div className=\"col-nums\">{colNums}</div>\n            <div className=\"game-board\">{board}</div>\n        </div>        \n    );\n}"]},"metadata":{},"sourceType":"module"}